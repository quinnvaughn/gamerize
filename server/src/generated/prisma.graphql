type AggregateBookedPlayer {
  count: Int!
}

type AggregateBooking {
  count: Int!
}

type AggregateBookingInvite {
  count: Int!
}

type AggregateDiscount {
  count: Int!
}

type AggregateFriendRequest {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateGameIndex {
  count: Int!
}

type AggregateGamerRequest {
  count: Int!
}

type AggregateGamerTag {
  count: Int!
}

type AggregateGamingSession {
  count: Int!
}

type AggregateGamingSessionIndex {
  count: Int!
}

type AggregateGamingTimeSlot {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePCLauncher {
  count: Int!
}

type AggregateRequirement {
  count: Int!
}

type AggregateSavedCard {
  count: Int!
}

type AggregateSessionReview {
  count: Int!
}

type AggregateSessionReviewIndex {
  count: Int!
}

type AggregateSocialMedia {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserIndex {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BookedPlayer {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  player: User!
  booking: Booking!
  timeslot: GamingTimeSlot!
}

type BookedPlayerConnection {
  pageInfo: PageInfo!
  edges: [BookedPlayerEdge]!
  aggregate: AggregateBookedPlayer!
}

input BookedPlayerCreateInput {
  player: UserCreateOneInput!
  booking: BookingCreateOneWithoutPlayersInput!
  timeslot: GamingTimeSlotCreateOneWithoutPlayersInput!
}

input BookedPlayerCreateManyWithoutBookingInput {
  create: [BookedPlayerCreateWithoutBookingInput!]
  connect: [BookedPlayerWhereUniqueInput!]
}

input BookedPlayerCreateManyWithoutTimeslotInput {
  create: [BookedPlayerCreateWithoutTimeslotInput!]
  connect: [BookedPlayerWhereUniqueInput!]
}

input BookedPlayerCreateWithoutBookingInput {
  player: UserCreateOneInput!
  timeslot: GamingTimeSlotCreateOneWithoutPlayersInput!
}

input BookedPlayerCreateWithoutTimeslotInput {
  player: UserCreateOneInput!
  booking: BookingCreateOneWithoutPlayersInput!
}

type BookedPlayerEdge {
  node: BookedPlayer!
  cursor: String!
}

enum BookedPlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookedPlayerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BookedPlayerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BookedPlayerScalarWhereInput!]
  OR: [BookedPlayerScalarWhereInput!]
  NOT: [BookedPlayerScalarWhereInput!]
}

type BookedPlayerSubscriptionPayload {
  mutation: MutationType!
  node: BookedPlayer
  updatedFields: [String!]
  previousValues: BookedPlayerPreviousValues
}

input BookedPlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookedPlayerWhereInput
  AND: [BookedPlayerSubscriptionWhereInput!]
  OR: [BookedPlayerSubscriptionWhereInput!]
  NOT: [BookedPlayerSubscriptionWhereInput!]
}

input BookedPlayerUpdateInput {
  player: UserUpdateOneRequiredInput
  booking: BookingUpdateOneRequiredWithoutPlayersInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutPlayersInput
}

input BookedPlayerUpdateManyWithoutBookingInput {
  create: [BookedPlayerCreateWithoutBookingInput!]
  delete: [BookedPlayerWhereUniqueInput!]
  connect: [BookedPlayerWhereUniqueInput!]
  set: [BookedPlayerWhereUniqueInput!]
  disconnect: [BookedPlayerWhereUniqueInput!]
  update: [BookedPlayerUpdateWithWhereUniqueWithoutBookingInput!]
  upsert: [BookedPlayerUpsertWithWhereUniqueWithoutBookingInput!]
  deleteMany: [BookedPlayerScalarWhereInput!]
}

input BookedPlayerUpdateManyWithoutTimeslotInput {
  create: [BookedPlayerCreateWithoutTimeslotInput!]
  delete: [BookedPlayerWhereUniqueInput!]
  connect: [BookedPlayerWhereUniqueInput!]
  set: [BookedPlayerWhereUniqueInput!]
  disconnect: [BookedPlayerWhereUniqueInput!]
  update: [BookedPlayerUpdateWithWhereUniqueWithoutTimeslotInput!]
  upsert: [BookedPlayerUpsertWithWhereUniqueWithoutTimeslotInput!]
  deleteMany: [BookedPlayerScalarWhereInput!]
}

input BookedPlayerUpdateWithoutBookingDataInput {
  player: UserUpdateOneRequiredInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutPlayersInput
}

input BookedPlayerUpdateWithoutTimeslotDataInput {
  player: UserUpdateOneRequiredInput
  booking: BookingUpdateOneRequiredWithoutPlayersInput
}

input BookedPlayerUpdateWithWhereUniqueWithoutBookingInput {
  where: BookedPlayerWhereUniqueInput!
  data: BookedPlayerUpdateWithoutBookingDataInput!
}

input BookedPlayerUpdateWithWhereUniqueWithoutTimeslotInput {
  where: BookedPlayerWhereUniqueInput!
  data: BookedPlayerUpdateWithoutTimeslotDataInput!
}

input BookedPlayerUpsertWithWhereUniqueWithoutBookingInput {
  where: BookedPlayerWhereUniqueInput!
  update: BookedPlayerUpdateWithoutBookingDataInput!
  create: BookedPlayerCreateWithoutBookingInput!
}

input BookedPlayerUpsertWithWhereUniqueWithoutTimeslotInput {
  where: BookedPlayerWhereUniqueInput!
  update: BookedPlayerUpdateWithoutTimeslotDataInput!
  create: BookedPlayerCreateWithoutTimeslotInput!
}

input BookedPlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  player: UserWhereInput
  booking: BookingWhereInput
  timeslot: GamingTimeSlotWhereInput
  AND: [BookedPlayerWhereInput!]
  OR: [BookedPlayerWhereInput!]
  NOT: [BookedPlayerWhereInput!]
}

input BookedPlayerWhereUniqueInput {
  id: ID
}

type Booking {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  charge: String
  numSlots: Int!
  numPlayers: Int!
  players(where: BookedPlayerWhereInput, orderBy: BookedPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookedPlayer!]
  total: Float!
  bookee: User!
  timeslot: GamingTimeSlot!
  invites(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookingInvite!]
  cancelled: Boolean
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
}

type BookingConnection {
  pageInfo: PageInfo!
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  charge: String
  numSlots: Int!
  numPlayers: Int!
  players: BookedPlayerCreateManyWithoutBookingInput
  total: Float!
  bookee: UserCreateOneInput!
  timeslot: GamingTimeSlotCreateOneWithoutBookingsInput!
  invites: BookingInviteCreateManyWithoutBookingInput
  cancelled: Boolean
  notifications: NotificationCreateManyWithoutBookingInput
}

input BookingCreateManyWithoutTimeslotInput {
  create: [BookingCreateWithoutTimeslotInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateOneWithoutInvitesInput {
  create: BookingCreateWithoutInvitesInput
  connect: BookingWhereUniqueInput
}

input BookingCreateOneWithoutNotificationsInput {
  create: BookingCreateWithoutNotificationsInput
  connect: BookingWhereUniqueInput
}

input BookingCreateOneWithoutPlayersInput {
  create: BookingCreateWithoutPlayersInput
  connect: BookingWhereUniqueInput
}

input BookingCreateWithoutInvitesInput {
  charge: String
  numSlots: Int!
  numPlayers: Int!
  players: BookedPlayerCreateManyWithoutBookingInput
  total: Float!
  bookee: UserCreateOneInput!
  timeslot: GamingTimeSlotCreateOneWithoutBookingsInput!
  cancelled: Boolean
  notifications: NotificationCreateManyWithoutBookingInput
}

input BookingCreateWithoutNotificationsInput {
  charge: String
  numSlots: Int!
  numPlayers: Int!
  players: BookedPlayerCreateManyWithoutBookingInput
  total: Float!
  bookee: UserCreateOneInput!
  timeslot: GamingTimeSlotCreateOneWithoutBookingsInput!
  invites: BookingInviteCreateManyWithoutBookingInput
  cancelled: Boolean
}

input BookingCreateWithoutPlayersInput {
  charge: String
  numSlots: Int!
  numPlayers: Int!
  total: Float!
  bookee: UserCreateOneInput!
  timeslot: GamingTimeSlotCreateOneWithoutBookingsInput!
  invites: BookingInviteCreateManyWithoutBookingInput
  cancelled: Boolean
  notifications: NotificationCreateManyWithoutBookingInput
}

input BookingCreateWithoutTimeslotInput {
  charge: String
  numSlots: Int!
  numPlayers: Int!
  players: BookedPlayerCreateManyWithoutBookingInput
  total: Float!
  bookee: UserCreateOneInput!
  invites: BookingInviteCreateManyWithoutBookingInput
  cancelled: Boolean
  notifications: NotificationCreateManyWithoutBookingInput
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

type BookingInvite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  booking: Booking!
  to: User
  from: User!
  sent: Boolean!
  accepted: Boolean
  notification: Notification
}

type BookingInviteConnection {
  pageInfo: PageInfo!
  edges: [BookingInviteEdge]!
  aggregate: AggregateBookingInvite!
}

input BookingInviteCreateInput {
  startTime: DateTime!
  booking: BookingCreateOneWithoutInvitesInput!
  to: UserCreateOneWithoutInvitesReceivedInput
  from: UserCreateOneWithoutInvitesInput!
  sent: Boolean!
  accepted: Boolean
  notification: NotificationCreateOneWithoutBookingInviteInput
}

input BookingInviteCreateManyWithoutBookingInput {
  create: [BookingInviteCreateWithoutBookingInput!]
  connect: [BookingInviteWhereUniqueInput!]
}

input BookingInviteCreateManyWithoutFromInput {
  create: [BookingInviteCreateWithoutFromInput!]
  connect: [BookingInviteWhereUniqueInput!]
}

input BookingInviteCreateManyWithoutToInput {
  create: [BookingInviteCreateWithoutToInput!]
  connect: [BookingInviteWhereUniqueInput!]
}

input BookingInviteCreateOneWithoutNotificationInput {
  create: BookingInviteCreateWithoutNotificationInput
  connect: BookingInviteWhereUniqueInput
}

input BookingInviteCreateWithoutBookingInput {
  startTime: DateTime!
  to: UserCreateOneWithoutInvitesReceivedInput
  from: UserCreateOneWithoutInvitesInput!
  sent: Boolean!
  accepted: Boolean
  notification: NotificationCreateOneWithoutBookingInviteInput
}

input BookingInviteCreateWithoutFromInput {
  startTime: DateTime!
  booking: BookingCreateOneWithoutInvitesInput!
  to: UserCreateOneWithoutInvitesReceivedInput
  sent: Boolean!
  accepted: Boolean
  notification: NotificationCreateOneWithoutBookingInviteInput
}

input BookingInviteCreateWithoutNotificationInput {
  startTime: DateTime!
  booking: BookingCreateOneWithoutInvitesInput!
  to: UserCreateOneWithoutInvitesReceivedInput
  from: UserCreateOneWithoutInvitesInput!
  sent: Boolean!
  accepted: Boolean
}

input BookingInviteCreateWithoutToInput {
  startTime: DateTime!
  booking: BookingCreateOneWithoutInvitesInput!
  from: UserCreateOneWithoutInvitesInput!
  sent: Boolean!
  accepted: Boolean
  notification: NotificationCreateOneWithoutBookingInviteInput
}

type BookingInviteEdge {
  node: BookingInvite!
  cursor: String!
}

enum BookingInviteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  startTime_ASC
  startTime_DESC
  sent_ASC
  sent_DESC
  accepted_ASC
  accepted_DESC
}

type BookingInvitePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  sent: Boolean!
  accepted: Boolean
}

input BookingInviteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  sent: Boolean
  sent_not: Boolean
  accepted: Boolean
  accepted_not: Boolean
  AND: [BookingInviteScalarWhereInput!]
  OR: [BookingInviteScalarWhereInput!]
  NOT: [BookingInviteScalarWhereInput!]
}

type BookingInviteSubscriptionPayload {
  mutation: MutationType!
  node: BookingInvite
  updatedFields: [String!]
  previousValues: BookingInvitePreviousValues
}

input BookingInviteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookingInviteWhereInput
  AND: [BookingInviteSubscriptionWhereInput!]
  OR: [BookingInviteSubscriptionWhereInput!]
  NOT: [BookingInviteSubscriptionWhereInput!]
}

input BookingInviteUpdateInput {
  startTime: DateTime
  booking: BookingUpdateOneRequiredWithoutInvitesInput
  to: UserUpdateOneWithoutInvitesReceivedInput
  from: UserUpdateOneRequiredWithoutInvitesInput
  sent: Boolean
  accepted: Boolean
  notification: NotificationUpdateOneWithoutBookingInviteInput
}

input BookingInviteUpdateManyDataInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
}

input BookingInviteUpdateManyMutationInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
}

input BookingInviteUpdateManyWithoutBookingInput {
  create: [BookingInviteCreateWithoutBookingInput!]
  delete: [BookingInviteWhereUniqueInput!]
  connect: [BookingInviteWhereUniqueInput!]
  set: [BookingInviteWhereUniqueInput!]
  disconnect: [BookingInviteWhereUniqueInput!]
  update: [BookingInviteUpdateWithWhereUniqueWithoutBookingInput!]
  upsert: [BookingInviteUpsertWithWhereUniqueWithoutBookingInput!]
  deleteMany: [BookingInviteScalarWhereInput!]
  updateMany: [BookingInviteUpdateManyWithWhereNestedInput!]
}

input BookingInviteUpdateManyWithoutFromInput {
  create: [BookingInviteCreateWithoutFromInput!]
  delete: [BookingInviteWhereUniqueInput!]
  connect: [BookingInviteWhereUniqueInput!]
  set: [BookingInviteWhereUniqueInput!]
  disconnect: [BookingInviteWhereUniqueInput!]
  update: [BookingInviteUpdateWithWhereUniqueWithoutFromInput!]
  upsert: [BookingInviteUpsertWithWhereUniqueWithoutFromInput!]
  deleteMany: [BookingInviteScalarWhereInput!]
  updateMany: [BookingInviteUpdateManyWithWhereNestedInput!]
}

input BookingInviteUpdateManyWithoutToInput {
  create: [BookingInviteCreateWithoutToInput!]
  delete: [BookingInviteWhereUniqueInput!]
  connect: [BookingInviteWhereUniqueInput!]
  set: [BookingInviteWhereUniqueInput!]
  disconnect: [BookingInviteWhereUniqueInput!]
  update: [BookingInviteUpdateWithWhereUniqueWithoutToInput!]
  upsert: [BookingInviteUpsertWithWhereUniqueWithoutToInput!]
  deleteMany: [BookingInviteScalarWhereInput!]
  updateMany: [BookingInviteUpdateManyWithWhereNestedInput!]
}

input BookingInviteUpdateManyWithWhereNestedInput {
  where: BookingInviteScalarWhereInput!
  data: BookingInviteUpdateManyDataInput!
}

input BookingInviteUpdateOneWithoutNotificationInput {
  create: BookingInviteCreateWithoutNotificationInput
  update: BookingInviteUpdateWithoutNotificationDataInput
  upsert: BookingInviteUpsertWithoutNotificationInput
  delete: Boolean
  disconnect: Boolean
  connect: BookingInviteWhereUniqueInput
}

input BookingInviteUpdateWithoutBookingDataInput {
  startTime: DateTime
  to: UserUpdateOneWithoutInvitesReceivedInput
  from: UserUpdateOneRequiredWithoutInvitesInput
  sent: Boolean
  accepted: Boolean
  notification: NotificationUpdateOneWithoutBookingInviteInput
}

input BookingInviteUpdateWithoutFromDataInput {
  startTime: DateTime
  booking: BookingUpdateOneRequiredWithoutInvitesInput
  to: UserUpdateOneWithoutInvitesReceivedInput
  sent: Boolean
  accepted: Boolean
  notification: NotificationUpdateOneWithoutBookingInviteInput
}

input BookingInviteUpdateWithoutNotificationDataInput {
  startTime: DateTime
  booking: BookingUpdateOneRequiredWithoutInvitesInput
  to: UserUpdateOneWithoutInvitesReceivedInput
  from: UserUpdateOneRequiredWithoutInvitesInput
  sent: Boolean
  accepted: Boolean
}

input BookingInviteUpdateWithoutToDataInput {
  startTime: DateTime
  booking: BookingUpdateOneRequiredWithoutInvitesInput
  from: UserUpdateOneRequiredWithoutInvitesInput
  sent: Boolean
  accepted: Boolean
  notification: NotificationUpdateOneWithoutBookingInviteInput
}

input BookingInviteUpdateWithWhereUniqueWithoutBookingInput {
  where: BookingInviteWhereUniqueInput!
  data: BookingInviteUpdateWithoutBookingDataInput!
}

input BookingInviteUpdateWithWhereUniqueWithoutFromInput {
  where: BookingInviteWhereUniqueInput!
  data: BookingInviteUpdateWithoutFromDataInput!
}

input BookingInviteUpdateWithWhereUniqueWithoutToInput {
  where: BookingInviteWhereUniqueInput!
  data: BookingInviteUpdateWithoutToDataInput!
}

input BookingInviteUpsertWithoutNotificationInput {
  update: BookingInviteUpdateWithoutNotificationDataInput!
  create: BookingInviteCreateWithoutNotificationInput!
}

input BookingInviteUpsertWithWhereUniqueWithoutBookingInput {
  where: BookingInviteWhereUniqueInput!
  update: BookingInviteUpdateWithoutBookingDataInput!
  create: BookingInviteCreateWithoutBookingInput!
}

input BookingInviteUpsertWithWhereUniqueWithoutFromInput {
  where: BookingInviteWhereUniqueInput!
  update: BookingInviteUpdateWithoutFromDataInput!
  create: BookingInviteCreateWithoutFromInput!
}

input BookingInviteUpsertWithWhereUniqueWithoutToInput {
  where: BookingInviteWhereUniqueInput!
  update: BookingInviteUpdateWithoutToDataInput!
  create: BookingInviteCreateWithoutToInput!
}

input BookingInviteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  booking: BookingWhereInput
  to: UserWhereInput
  from: UserWhereInput
  sent: Boolean
  sent_not: Boolean
  accepted: Boolean
  accepted_not: Boolean
  notification: NotificationWhereInput
  AND: [BookingInviteWhereInput!]
  OR: [BookingInviteWhereInput!]
  NOT: [BookingInviteWhereInput!]
}

input BookingInviteWhereUniqueInput {
  id: ID
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  charge_ASC
  charge_DESC
  numSlots_ASC
  numSlots_DESC
  numPlayers_ASC
  numPlayers_DESC
  total_ASC
  total_DESC
  cancelled_ASC
  cancelled_DESC
}

type BookingPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  charge: String
  numSlots: Int!
  numPlayers: Int!
  total: Float!
  cancelled: Boolean
}

input BookingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  charge: String
  charge_not: String
  charge_in: [String!]
  charge_not_in: [String!]
  charge_lt: String
  charge_lte: String
  charge_gt: String
  charge_gte: String
  charge_contains: String
  charge_not_contains: String
  charge_starts_with: String
  charge_not_starts_with: String
  charge_ends_with: String
  charge_not_ends_with: String
  numSlots: Int
  numSlots_not: Int
  numSlots_in: [Int!]
  numSlots_not_in: [Int!]
  numSlots_lt: Int
  numSlots_lte: Int
  numSlots_gt: Int
  numSlots_gte: Int
  numPlayers: Int
  numPlayers_not: Int
  numPlayers_in: [Int!]
  numPlayers_not_in: [Int!]
  numPlayers_lt: Int
  numPlayers_lte: Int
  numPlayers_gt: Int
  numPlayers_gte: Int
  total: Float
  total_not: Float
  total_in: [Float!]
  total_not_in: [Float!]
  total_lt: Float
  total_lte: Float
  total_gt: Float
  total_gte: Float
  cancelled: Boolean
  cancelled_not: Boolean
  AND: [BookingScalarWhereInput!]
  OR: [BookingScalarWhereInput!]
  NOT: [BookingScalarWhereInput!]
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
  AND: [BookingSubscriptionWhereInput!]
  OR: [BookingSubscriptionWhereInput!]
  NOT: [BookingSubscriptionWhereInput!]
}

input BookingUpdateInput {
  charge: String
  numSlots: Int
  numPlayers: Int
  players: BookedPlayerUpdateManyWithoutBookingInput
  total: Float
  bookee: UserUpdateOneRequiredInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
  invites: BookingInviteUpdateManyWithoutBookingInput
  cancelled: Boolean
  notifications: NotificationUpdateManyWithoutBookingInput
}

input BookingUpdateManyDataInput {
  charge: String
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
}

input BookingUpdateManyMutationInput {
  charge: String
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
}

input BookingUpdateManyWithoutTimeslotInput {
  create: [BookingCreateWithoutTimeslotInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutTimeslotInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutTimeslotInput!]
  deleteMany: [BookingScalarWhereInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
}

input BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyDataInput!
}

input BookingUpdateOneRequiredWithoutInvitesInput {
  create: BookingCreateWithoutInvitesInput
  update: BookingUpdateWithoutInvitesDataInput
  upsert: BookingUpsertWithoutInvitesInput
  connect: BookingWhereUniqueInput
}

input BookingUpdateOneRequiredWithoutPlayersInput {
  create: BookingCreateWithoutPlayersInput
  update: BookingUpdateWithoutPlayersDataInput
  upsert: BookingUpsertWithoutPlayersInput
  connect: BookingWhereUniqueInput
}

input BookingUpdateOneWithoutNotificationsInput {
  create: BookingCreateWithoutNotificationsInput
  update: BookingUpdateWithoutNotificationsDataInput
  upsert: BookingUpsertWithoutNotificationsInput
  delete: Boolean
  disconnect: Boolean
  connect: BookingWhereUniqueInput
}

input BookingUpdateWithoutInvitesDataInput {
  charge: String
  numSlots: Int
  numPlayers: Int
  players: BookedPlayerUpdateManyWithoutBookingInput
  total: Float
  bookee: UserUpdateOneRequiredInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
  cancelled: Boolean
  notifications: NotificationUpdateManyWithoutBookingInput
}

input BookingUpdateWithoutNotificationsDataInput {
  charge: String
  numSlots: Int
  numPlayers: Int
  players: BookedPlayerUpdateManyWithoutBookingInput
  total: Float
  bookee: UserUpdateOneRequiredInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
  invites: BookingInviteUpdateManyWithoutBookingInput
  cancelled: Boolean
}

input BookingUpdateWithoutPlayersDataInput {
  charge: String
  numSlots: Int
  numPlayers: Int
  total: Float
  bookee: UserUpdateOneRequiredInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
  invites: BookingInviteUpdateManyWithoutBookingInput
  cancelled: Boolean
  notifications: NotificationUpdateManyWithoutBookingInput
}

input BookingUpdateWithoutTimeslotDataInput {
  charge: String
  numSlots: Int
  numPlayers: Int
  players: BookedPlayerUpdateManyWithoutBookingInput
  total: Float
  bookee: UserUpdateOneRequiredInput
  invites: BookingInviteUpdateManyWithoutBookingInput
  cancelled: Boolean
  notifications: NotificationUpdateManyWithoutBookingInput
}

input BookingUpdateWithWhereUniqueWithoutTimeslotInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutTimeslotDataInput!
}

input BookingUpsertWithoutInvitesInput {
  update: BookingUpdateWithoutInvitesDataInput!
  create: BookingCreateWithoutInvitesInput!
}

input BookingUpsertWithoutNotificationsInput {
  update: BookingUpdateWithoutNotificationsDataInput!
  create: BookingCreateWithoutNotificationsInput!
}

input BookingUpsertWithoutPlayersInput {
  update: BookingUpdateWithoutPlayersDataInput!
  create: BookingCreateWithoutPlayersInput!
}

input BookingUpsertWithWhereUniqueWithoutTimeslotInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutTimeslotDataInput!
  create: BookingCreateWithoutTimeslotInput!
}

input BookingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  charge: String
  charge_not: String
  charge_in: [String!]
  charge_not_in: [String!]
  charge_lt: String
  charge_lte: String
  charge_gt: String
  charge_gte: String
  charge_contains: String
  charge_not_contains: String
  charge_starts_with: String
  charge_not_starts_with: String
  charge_ends_with: String
  charge_not_ends_with: String
  numSlots: Int
  numSlots_not: Int
  numSlots_in: [Int!]
  numSlots_not_in: [Int!]
  numSlots_lt: Int
  numSlots_lte: Int
  numSlots_gt: Int
  numSlots_gte: Int
  numPlayers: Int
  numPlayers_not: Int
  numPlayers_in: [Int!]
  numPlayers_not_in: [Int!]
  numPlayers_lt: Int
  numPlayers_lte: Int
  numPlayers_gt: Int
  numPlayers_gte: Int
  players_every: BookedPlayerWhereInput
  players_some: BookedPlayerWhereInput
  players_none: BookedPlayerWhereInput
  total: Float
  total_not: Float
  total_in: [Float!]
  total_not_in: [Float!]
  total_lt: Float
  total_lte: Float
  total_gt: Float
  total_gte: Float
  bookee: UserWhereInput
  timeslot: GamingTimeSlotWhereInput
  invites_every: BookingInviteWhereInput
  invites_some: BookingInviteWhereInput
  invites_none: BookingInviteWhereInput
  cancelled: Boolean
  cancelled_not: Boolean
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
}

input BookingWhereUniqueInput {
  id: ID
}

scalar DateTime

type Discount {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

type DiscountConnection {
  pageInfo: PageInfo!
  edges: [DiscountEdge]!
  aggregate: AggregateDiscount!
}

input DiscountCreateInput {
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

input DiscountCreateManyInput {
  create: [DiscountCreateInput!]
  connect: [DiscountWhereUniqueInput!]
}

type DiscountEdge {
  node: Discount!
  cursor: String!
}

enum DiscountOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  percentage_ASC
  percentage_DESC
  threshold_ASC
  threshold_DESC
  playerOrSession_ASC
  playerOrSession_DESC
}

type DiscountPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

input DiscountScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  percentage: Int
  percentage_not: Int
  percentage_in: [Int!]
  percentage_not_in: [Int!]
  percentage_lt: Int
  percentage_lte: Int
  percentage_gt: Int
  percentage_gte: Int
  threshold: Int
  threshold_not: Int
  threshold_in: [Int!]
  threshold_not_in: [Int!]
  threshold_lt: Int
  threshold_lte: Int
  threshold_gt: Int
  threshold_gte: Int
  playerOrSession: PlayerOrSession
  playerOrSession_not: PlayerOrSession
  playerOrSession_in: [PlayerOrSession!]
  playerOrSession_not_in: [PlayerOrSession!]
  AND: [DiscountScalarWhereInput!]
  OR: [DiscountScalarWhereInput!]
  NOT: [DiscountScalarWhereInput!]
}

type DiscountSubscriptionPayload {
  mutation: MutationType!
  node: Discount
  updatedFields: [String!]
  previousValues: DiscountPreviousValues
}

input DiscountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiscountWhereInput
  AND: [DiscountSubscriptionWhereInput!]
  OR: [DiscountSubscriptionWhereInput!]
  NOT: [DiscountSubscriptionWhereInput!]
}

input DiscountUpdateDataInput {
  percentage: Int
  threshold: Int
  playerOrSession: PlayerOrSession
}

input DiscountUpdateInput {
  percentage: Int
  threshold: Int
  playerOrSession: PlayerOrSession
}

input DiscountUpdateManyDataInput {
  percentage: Int
  threshold: Int
  playerOrSession: PlayerOrSession
}

input DiscountUpdateManyInput {
  create: [DiscountCreateInput!]
  update: [DiscountUpdateWithWhereUniqueNestedInput!]
  upsert: [DiscountUpsertWithWhereUniqueNestedInput!]
  delete: [DiscountWhereUniqueInput!]
  connect: [DiscountWhereUniqueInput!]
  set: [DiscountWhereUniqueInput!]
  disconnect: [DiscountWhereUniqueInput!]
  deleteMany: [DiscountScalarWhereInput!]
  updateMany: [DiscountUpdateManyWithWhereNestedInput!]
}

input DiscountUpdateManyMutationInput {
  percentage: Int
  threshold: Int
  playerOrSession: PlayerOrSession
}

input DiscountUpdateManyWithWhereNestedInput {
  where: DiscountScalarWhereInput!
  data: DiscountUpdateManyDataInput!
}

input DiscountUpdateWithWhereUniqueNestedInput {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateDataInput!
}

input DiscountUpsertWithWhereUniqueNestedInput {
  where: DiscountWhereUniqueInput!
  update: DiscountUpdateDataInput!
  create: DiscountCreateInput!
}

input DiscountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  percentage: Int
  percentage_not: Int
  percentage_in: [Int!]
  percentage_not_in: [Int!]
  percentage_lt: Int
  percentage_lte: Int
  percentage_gt: Int
  percentage_gte: Int
  threshold: Int
  threshold_not: Int
  threshold_in: [Int!]
  threshold_not_in: [Int!]
  threshold_lt: Int
  threshold_lte: Int
  threshold_gt: Int
  threshold_gte: Int
  playerOrSession: PlayerOrSession
  playerOrSession_not: PlayerOrSession
  playerOrSession_in: [PlayerOrSession!]
  playerOrSession_not_in: [PlayerOrSession!]
  AND: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
}

input DiscountWhereUniqueInput {
  id: ID
}

type FriendRequest {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  to: User!
  from: User!
  notification: Notification!
}

type FriendRequestConnection {
  pageInfo: PageInfo!
  edges: [FriendRequestEdge]!
  aggregate: AggregateFriendRequest!
}

input FriendRequestCreateInput {
  to: UserCreateOneInput!
  from: UserCreateOneInput!
  notification: NotificationCreateOneWithoutFriendRequestInput!
}

input FriendRequestCreateOneWithoutNotificationInput {
  create: FriendRequestCreateWithoutNotificationInput
  connect: FriendRequestWhereUniqueInput
}

input FriendRequestCreateWithoutNotificationInput {
  to: UserCreateOneInput!
  from: UserCreateOneInput!
}

type FriendRequestEdge {
  node: FriendRequest!
  cursor: String!
}

enum FriendRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FriendRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FriendRequestSubscriptionPayload {
  mutation: MutationType!
  node: FriendRequest
  updatedFields: [String!]
  previousValues: FriendRequestPreviousValues
}

input FriendRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FriendRequestWhereInput
  AND: [FriendRequestSubscriptionWhereInput!]
  OR: [FriendRequestSubscriptionWhereInput!]
  NOT: [FriendRequestSubscriptionWhereInput!]
}

input FriendRequestUpdateInput {
  to: UserUpdateOneRequiredInput
  from: UserUpdateOneRequiredInput
  notification: NotificationUpdateOneRequiredWithoutFriendRequestInput
}

input FriendRequestUpdateOneWithoutNotificationInput {
  create: FriendRequestCreateWithoutNotificationInput
  update: FriendRequestUpdateWithoutNotificationDataInput
  upsert: FriendRequestUpsertWithoutNotificationInput
  delete: Boolean
  disconnect: Boolean
  connect: FriendRequestWhereUniqueInput
}

input FriendRequestUpdateWithoutNotificationDataInput {
  to: UserUpdateOneRequiredInput
  from: UserUpdateOneRequiredInput
}

input FriendRequestUpsertWithoutNotificationInput {
  update: FriendRequestUpdateWithoutNotificationDataInput!
  create: FriendRequestCreateWithoutNotificationInput!
}

input FriendRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  to: UserWhereInput
  from: UserWhereInput
  notification: NotificationWhereInput
  AND: [FriendRequestWhereInput!]
  OR: [FriendRequestWhereInput!]
  NOT: [FriendRequestWhereInput!]
}

input FriendRequestWhereUniqueInput {
  id: ID
}

type Game {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  tags: [Tags!]!
  sessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession!]
  launcher: Launcher
  numSessions: Int!
  picture: String!
  banner: String!
}

type GameConnection {
  pageInfo: PageInfo!
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  name: String!
  tags: GameCreatetagsInput
  sessions: GamingSessionCreateManyWithoutGameInput
  launcher: Launcher
  numSessions: Int
  picture: String!
  banner: String!
}

input GameCreateOneInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutSessionsInput {
  create: GameCreateWithoutSessionsInput
  connect: GameWhereUniqueInput
}

input GameCreatetagsInput {
  set: [Tags!]
}

input GameCreateWithoutSessionsInput {
  name: String!
  tags: GameCreatetagsInput
  launcher: Launcher
  numSessions: Int
  picture: String!
  banner: String!
}

type GameEdge {
  node: Game!
  cursor: String!
}

type GameIndex {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  launcher: String
  tags: [String!]!
  game: Game!
}

type GameIndexConnection {
  pageInfo: PageInfo!
  edges: [GameIndexEdge]!
  aggregate: AggregateGameIndex!
}

input GameIndexCreateInput {
  name: String!
  launcher: String
  tags: GameIndexCreatetagsInput
  game: GameCreateOneInput!
}

input GameIndexCreatetagsInput {
  set: [String!]
}

type GameIndexEdge {
  node: GameIndex!
  cursor: String!
}

enum GameIndexOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  launcher_ASC
  launcher_DESC
}

type GameIndexPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  launcher: String
  tags: [String!]!
}

type GameIndexSubscriptionPayload {
  mutation: MutationType!
  node: GameIndex
  updatedFields: [String!]
  previousValues: GameIndexPreviousValues
}

input GameIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameIndexWhereInput
  AND: [GameIndexSubscriptionWhereInput!]
  OR: [GameIndexSubscriptionWhereInput!]
  NOT: [GameIndexSubscriptionWhereInput!]
}

input GameIndexUpdateInput {
  name: String
  launcher: String
  tags: GameIndexUpdatetagsInput
  game: GameUpdateOneRequiredInput
}

input GameIndexUpdateManyMutationInput {
  name: String
  launcher: String
  tags: GameIndexUpdatetagsInput
}

input GameIndexUpdatetagsInput {
  set: [String!]
}

input GameIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  launcher: String
  launcher_not: String
  launcher_in: [String!]
  launcher_not_in: [String!]
  launcher_lt: String
  launcher_lte: String
  launcher_gt: String
  launcher_gte: String
  launcher_contains: String
  launcher_not_contains: String
  launcher_starts_with: String
  launcher_not_starts_with: String
  launcher_ends_with: String
  launcher_not_ends_with: String
  game: GameWhereInput
  AND: [GameIndexWhereInput!]
  OR: [GameIndexWhereInput!]
  NOT: [GameIndexWhereInput!]
}

input GameIndexWhereUniqueInput {
  id: ID
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  launcher_ASC
  launcher_DESC
  numSessions_ASC
  numSessions_DESC
  picture_ASC
  picture_DESC
  banner_ASC
  banner_DESC
}

type GamePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  tags: [Tags!]!
  launcher: Launcher
  numSessions: Int!
  picture: String!
  banner: String!
}

type GamerRequest {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  occupations: [Occupations!]!
  addToOccupations: String
  socialMedia: SocialMedia!
}

type GamerRequestConnection {
  pageInfo: PageInfo!
  edges: [GamerRequestEdge]!
  aggregate: AggregateGamerRequest!
}

input GamerRequestCreateInput {
  user: UserCreateOneInput!
  occupations: GamerRequestCreateoccupationsInput
  addToOccupations: String
  socialMedia: SocialMediaCreateOneInput!
}

input GamerRequestCreateoccupationsInput {
  set: [Occupations!]
}

type GamerRequestEdge {
  node: GamerRequest!
  cursor: String!
}

enum GamerRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  addToOccupations_ASC
  addToOccupations_DESC
}

type GamerRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  occupations: [Occupations!]!
  addToOccupations: String
}

type GamerRequestSubscriptionPayload {
  mutation: MutationType!
  node: GamerRequest
  updatedFields: [String!]
  previousValues: GamerRequestPreviousValues
}

input GamerRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamerRequestWhereInput
  AND: [GamerRequestSubscriptionWhereInput!]
  OR: [GamerRequestSubscriptionWhereInput!]
  NOT: [GamerRequestSubscriptionWhereInput!]
}

input GamerRequestUpdateInput {
  user: UserUpdateOneRequiredInput
  occupations: GamerRequestUpdateoccupationsInput
  addToOccupations: String
  socialMedia: SocialMediaUpdateOneRequiredInput
}

input GamerRequestUpdateManyMutationInput {
  occupations: GamerRequestUpdateoccupationsInput
  addToOccupations: String
}

input GamerRequestUpdateoccupationsInput {
  set: [Occupations!]
}

input GamerRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  addToOccupations: String
  addToOccupations_not: String
  addToOccupations_in: [String!]
  addToOccupations_not_in: [String!]
  addToOccupations_lt: String
  addToOccupations_lte: String
  addToOccupations_gt: String
  addToOccupations_gte: String
  addToOccupations_contains: String
  addToOccupations_not_contains: String
  addToOccupations_starts_with: String
  addToOccupations_not_starts_with: String
  addToOccupations_ends_with: String
  addToOccupations_not_ends_with: String
  socialMedia: SocialMediaWhereInput
  AND: [GamerRequestWhereInput!]
  OR: [GamerRequestWhereInput!]
  NOT: [GamerRequestWhereInput!]
}

input GamerRequestWhereUniqueInput {
  id: ID
}

type GamerTag {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  psn: String
  xbl: String
  nso: String
  pc: PCLauncher
}

type GamerTagConnection {
  pageInfo: PageInfo!
  edges: [GamerTagEdge]!
  aggregate: AggregateGamerTag!
}

input GamerTagCreateInput {
  user: UserCreateOneWithoutGamertagsInput!
  psn: String
  xbl: String
  nso: String
  pc: PCLauncherCreateOneWithoutGamerTagInput
}

input GamerTagCreateOneWithoutPcInput {
  create: GamerTagCreateWithoutPcInput
  connect: GamerTagWhereUniqueInput
}

input GamerTagCreateOneWithoutUserInput {
  create: GamerTagCreateWithoutUserInput
  connect: GamerTagWhereUniqueInput
}

input GamerTagCreateWithoutPcInput {
  user: UserCreateOneWithoutGamertagsInput!
  psn: String
  xbl: String
  nso: String
}

input GamerTagCreateWithoutUserInput {
  psn: String
  xbl: String
  nso: String
  pc: PCLauncherCreateOneWithoutGamerTagInput
}

type GamerTagEdge {
  node: GamerTag!
  cursor: String!
}

enum GamerTagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  psn_ASC
  psn_DESC
  xbl_ASC
  xbl_DESC
  nso_ASC
  nso_DESC
}

type GamerTagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  psn: String
  xbl: String
  nso: String
}

type GamerTagSubscriptionPayload {
  mutation: MutationType!
  node: GamerTag
  updatedFields: [String!]
  previousValues: GamerTagPreviousValues
}

input GamerTagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamerTagWhereInput
  AND: [GamerTagSubscriptionWhereInput!]
  OR: [GamerTagSubscriptionWhereInput!]
  NOT: [GamerTagSubscriptionWhereInput!]
}

input GamerTagUpdateInput {
  user: UserUpdateOneRequiredWithoutGamertagsInput
  psn: String
  xbl: String
  nso: String
  pc: PCLauncherUpdateOneWithoutGamerTagInput
}

input GamerTagUpdateManyMutationInput {
  psn: String
  xbl: String
  nso: String
}

input GamerTagUpdateOneRequiredWithoutPcInput {
  create: GamerTagCreateWithoutPcInput
  update: GamerTagUpdateWithoutPcDataInput
  upsert: GamerTagUpsertWithoutPcInput
  connect: GamerTagWhereUniqueInput
}

input GamerTagUpdateOneWithoutUserInput {
  create: GamerTagCreateWithoutUserInput
  update: GamerTagUpdateWithoutUserDataInput
  upsert: GamerTagUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: GamerTagWhereUniqueInput
}

input GamerTagUpdateWithoutPcDataInput {
  user: UserUpdateOneRequiredWithoutGamertagsInput
  psn: String
  xbl: String
  nso: String
}

input GamerTagUpdateWithoutUserDataInput {
  psn: String
  xbl: String
  nso: String
  pc: PCLauncherUpdateOneWithoutGamerTagInput
}

input GamerTagUpsertWithoutPcInput {
  update: GamerTagUpdateWithoutPcDataInput!
  create: GamerTagCreateWithoutPcInput!
}

input GamerTagUpsertWithoutUserInput {
  update: GamerTagUpdateWithoutUserDataInput!
  create: GamerTagCreateWithoutUserInput!
}

input GamerTagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  psn: String
  psn_not: String
  psn_in: [String!]
  psn_not_in: [String!]
  psn_lt: String
  psn_lte: String
  psn_gt: String
  psn_gte: String
  psn_contains: String
  psn_not_contains: String
  psn_starts_with: String
  psn_not_starts_with: String
  psn_ends_with: String
  psn_not_ends_with: String
  xbl: String
  xbl_not: String
  xbl_in: [String!]
  xbl_not_in: [String!]
  xbl_lt: String
  xbl_lte: String
  xbl_gt: String
  xbl_gte: String
  xbl_contains: String
  xbl_not_contains: String
  xbl_starts_with: String
  xbl_not_starts_with: String
  xbl_ends_with: String
  xbl_not_ends_with: String
  nso: String
  nso_not: String
  nso_in: [String!]
  nso_not_in: [String!]
  nso_lt: String
  nso_lte: String
  nso_gt: String
  nso_gte: String
  nso_contains: String
  nso_not_contains: String
  nso_starts_with: String
  nso_not_starts_with: String
  nso_ends_with: String
  nso_not_ends_with: String
  pc: PCLauncherWhereInput
  AND: [GamerTagWhereInput!]
  OR: [GamerTagWhereInput!]
  NOT: [GamerTagWhereInput!]
}

input GamerTagWhereUniqueInput {
  id: ID
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameWhereInput
  AND: [GameSubscriptionWhereInput!]
  OR: [GameSubscriptionWhereInput!]
  NOT: [GameSubscriptionWhereInput!]
}

input GameUpdateDataInput {
  name: String
  tags: GameUpdatetagsInput
  sessions: GamingSessionUpdateManyWithoutGameInput
  launcher: Launcher
  numSessions: Int
  picture: String
  banner: String
}

input GameUpdateInput {
  name: String
  tags: GameUpdatetagsInput
  sessions: GamingSessionUpdateManyWithoutGameInput
  launcher: Launcher
  numSessions: Int
  picture: String
  banner: String
}

input GameUpdateManyMutationInput {
  name: String
  tags: GameUpdatetagsInput
  launcher: Launcher
  numSessions: Int
  picture: String
  banner: String
}

input GameUpdateOneRequiredInput {
  create: GameCreateInput
  update: GameUpdateDataInput
  upsert: GameUpsertNestedInput
  connect: GameWhereUniqueInput
}

input GameUpdateOneRequiredWithoutSessionsInput {
  create: GameCreateWithoutSessionsInput
  update: GameUpdateWithoutSessionsDataInput
  upsert: GameUpsertWithoutSessionsInput
  connect: GameWhereUniqueInput
}

input GameUpdatetagsInput {
  set: [Tags!]
}

input GameUpdateWithoutSessionsDataInput {
  name: String
  tags: GameUpdatetagsInput
  launcher: Launcher
  numSessions: Int
  picture: String
  banner: String
}

input GameUpsertNestedInput {
  update: GameUpdateDataInput!
  create: GameCreateInput!
}

input GameUpsertWithoutSessionsInput {
  update: GameUpdateWithoutSessionsDataInput!
  create: GameCreateWithoutSessionsInput!
}

input GameWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  sessions_every: GamingSessionWhereInput
  sessions_some: GamingSessionWhereInput
  sessions_none: GamingSessionWhereInput
  launcher: Launcher
  launcher_not: Launcher
  launcher_in: [Launcher!]
  launcher_not_in: [Launcher!]
  numSessions: Int
  numSessions_not: Int
  numSessions_in: [Int!]
  numSessions_not_in: [Int!]
  numSessions_lt: Int
  numSessions_lte: Int
  numSessions_gt: Int
  numSessions_gte: Int
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  banner: String
  banner_not: String
  banner_in: [String!]
  banner_not_in: [String!]
  banner_lt: String
  banner_lte: String
  banner_gt: String
  banner_gte: String
  banner_contains: String
  banner_not_contains: String
  banner_starts_with: String
  banner_not_starts_with: String
  banner_ends_with: String
  banner_not_ends_with: String
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
}

input GameWhereUniqueInput {
  id: ID
  name: String
}

type GamingSession {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gamers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  creator: User!
  game: Game!
  title: String!
  length: Int!
  price: Float!
  launcher: Launcher
  reviews(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReview!]
  system: System!
  type: TypeOfGame!
  slots: Int!
  requirements(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Requirement!]
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount!]
  timeslots(where: GamingTimeSlotWhereInput, orderBy: GamingTimeSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingTimeSlot!]
  popularity: Int
  views: Int
  retired: Boolean!
}

type GamingSessionConnection {
  pageInfo: PageInfo!
  edges: [GamingSessionEdge]!
  aggregate: AggregateGamingSession!
}

input GamingSessionCreateInput {
  gamers: UserCreateManyWithoutSessionsInput
  creator: UserCreateOneInput!
  game: GameCreateOneWithoutSessionsInput!
  title: String!
  length: Int!
  price: Float!
  launcher: Launcher
  reviews: SessionReviewCreateManyWithoutSessionInput
  system: System!
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  timeslots: GamingTimeSlotCreateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionCreateManyWithoutGameInput {
  create: [GamingSessionCreateWithoutGameInput!]
  connect: [GamingSessionWhereUniqueInput!]
}

input GamingSessionCreateManyWithoutGamersInput {
  create: [GamingSessionCreateWithoutGamersInput!]
  connect: [GamingSessionWhereUniqueInput!]
}

input GamingSessionCreateOneInput {
  create: GamingSessionCreateInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreateOneWithoutReviewsInput {
  create: GamingSessionCreateWithoutReviewsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreateOneWithoutTimeslotsInput {
  create: GamingSessionCreateWithoutTimeslotsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreateWithoutGameInput {
  gamers: UserCreateManyWithoutSessionsInput
  creator: UserCreateOneInput!
  title: String!
  length: Int!
  price: Float!
  launcher: Launcher
  reviews: SessionReviewCreateManyWithoutSessionInput
  system: System!
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  timeslots: GamingTimeSlotCreateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionCreateWithoutGamersInput {
  creator: UserCreateOneInput!
  game: GameCreateOneWithoutSessionsInput!
  title: String!
  length: Int!
  price: Float!
  launcher: Launcher
  reviews: SessionReviewCreateManyWithoutSessionInput
  system: System!
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  timeslots: GamingTimeSlotCreateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionCreateWithoutReviewsInput {
  gamers: UserCreateManyWithoutSessionsInput
  creator: UserCreateOneInput!
  game: GameCreateOneWithoutSessionsInput!
  title: String!
  length: Int!
  price: Float!
  launcher: Launcher
  system: System!
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  timeslots: GamingTimeSlotCreateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionCreateWithoutTimeslotsInput {
  gamers: UserCreateManyWithoutSessionsInput
  creator: UserCreateOneInput!
  game: GameCreateOneWithoutSessionsInput!
  title: String!
  length: Int!
  price: Float!
  launcher: Launcher
  reviews: SessionReviewCreateManyWithoutSessionInput
  system: System!
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  popularity: Int
  views: Int
  retired: Boolean
}

type GamingSessionEdge {
  node: GamingSession!
  cursor: String!
}

type GamingSessionIndex {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  gamer: String!
  game: String
  launcher: Launcher
  gamingSession: GamingSession!
}

type GamingSessionIndexConnection {
  pageInfo: PageInfo!
  edges: [GamingSessionIndexEdge]!
  aggregate: AggregateGamingSessionIndex!
}

input GamingSessionIndexCreateInput {
  title: String!
  gamer: String!
  game: String
  launcher: Launcher
  gamingSession: GamingSessionCreateOneInput!
}

type GamingSessionIndexEdge {
  node: GamingSessionIndex!
  cursor: String!
}

enum GamingSessionIndexOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  gamer_ASC
  gamer_DESC
  game_ASC
  game_DESC
  launcher_ASC
  launcher_DESC
}

type GamingSessionIndexPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  gamer: String!
  game: String
  launcher: Launcher
}

type GamingSessionIndexSubscriptionPayload {
  mutation: MutationType!
  node: GamingSessionIndex
  updatedFields: [String!]
  previousValues: GamingSessionIndexPreviousValues
}

input GamingSessionIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamingSessionIndexWhereInput
  AND: [GamingSessionIndexSubscriptionWhereInput!]
  OR: [GamingSessionIndexSubscriptionWhereInput!]
  NOT: [GamingSessionIndexSubscriptionWhereInput!]
}

input GamingSessionIndexUpdateInput {
  title: String
  gamer: String
  game: String
  launcher: Launcher
  gamingSession: GamingSessionUpdateOneRequiredInput
}

input GamingSessionIndexUpdateManyMutationInput {
  title: String
  gamer: String
  game: String
  launcher: Launcher
}

input GamingSessionIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  gamer: String
  gamer_not: String
  gamer_in: [String!]
  gamer_not_in: [String!]
  gamer_lt: String
  gamer_lte: String
  gamer_gt: String
  gamer_gte: String
  gamer_contains: String
  gamer_not_contains: String
  gamer_starts_with: String
  gamer_not_starts_with: String
  gamer_ends_with: String
  gamer_not_ends_with: String
  game: String
  game_not: String
  game_in: [String!]
  game_not_in: [String!]
  game_lt: String
  game_lte: String
  game_gt: String
  game_gte: String
  game_contains: String
  game_not_contains: String
  game_starts_with: String
  game_not_starts_with: String
  game_ends_with: String
  game_not_ends_with: String
  launcher: Launcher
  launcher_not: Launcher
  launcher_in: [Launcher!]
  launcher_not_in: [Launcher!]
  gamingSession: GamingSessionWhereInput
  AND: [GamingSessionIndexWhereInput!]
  OR: [GamingSessionIndexWhereInput!]
  NOT: [GamingSessionIndexWhereInput!]
}

input GamingSessionIndexWhereUniqueInput {
  id: ID
}

enum GamingSessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  length_ASC
  length_DESC
  price_ASC
  price_DESC
  launcher_ASC
  launcher_DESC
  system_ASC
  system_DESC
  type_ASC
  type_DESC
  slots_ASC
  slots_DESC
  popularity_ASC
  popularity_DESC
  views_ASC
  views_DESC
  retired_ASC
  retired_DESC
}

type GamingSessionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  length: Int!
  price: Float!
  launcher: Launcher
  system: System!
  type: TypeOfGame!
  slots: Int!
  popularity: Int
  views: Int
  retired: Boolean!
}

input GamingSessionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  launcher: Launcher
  launcher_not: Launcher
  launcher_in: [Launcher!]
  launcher_not_in: [Launcher!]
  system: System
  system_not: System
  system_in: [System!]
  system_not_in: [System!]
  type: TypeOfGame
  type_not: TypeOfGame
  type_in: [TypeOfGame!]
  type_not_in: [TypeOfGame!]
  slots: Int
  slots_not: Int
  slots_in: [Int!]
  slots_not_in: [Int!]
  slots_lt: Int
  slots_lte: Int
  slots_gt: Int
  slots_gte: Int
  popularity: Int
  popularity_not: Int
  popularity_in: [Int!]
  popularity_not_in: [Int!]
  popularity_lt: Int
  popularity_lte: Int
  popularity_gt: Int
  popularity_gte: Int
  views: Int
  views_not: Int
  views_in: [Int!]
  views_not_in: [Int!]
  views_lt: Int
  views_lte: Int
  views_gt: Int
  views_gte: Int
  retired: Boolean
  retired_not: Boolean
  AND: [GamingSessionScalarWhereInput!]
  OR: [GamingSessionScalarWhereInput!]
  NOT: [GamingSessionScalarWhereInput!]
}

type GamingSessionSubscriptionPayload {
  mutation: MutationType!
  node: GamingSession
  updatedFields: [String!]
  previousValues: GamingSessionPreviousValues
}

input GamingSessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamingSessionWhereInput
  AND: [GamingSessionSubscriptionWhereInput!]
  OR: [GamingSessionSubscriptionWhereInput!]
  NOT: [GamingSessionSubscriptionWhereInput!]
}

input GamingSessionUpdateDataInput {
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  launcher: Launcher
  reviews: SessionReviewUpdateManyWithoutSessionInput
  system: System
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionUpdateInput {
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  launcher: Launcher
  reviews: SessionReviewUpdateManyWithoutSessionInput
  system: System
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionUpdateManyDataInput {
  title: String
  length: Int
  price: Float
  launcher: Launcher
  system: System
  type: TypeOfGame
  slots: Int
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionUpdateManyMutationInput {
  title: String
  length: Int
  price: Float
  launcher: Launcher
  system: System
  type: TypeOfGame
  slots: Int
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionUpdateManyWithoutGameInput {
  create: [GamingSessionCreateWithoutGameInput!]
  delete: [GamingSessionWhereUniqueInput!]
  connect: [GamingSessionWhereUniqueInput!]
  set: [GamingSessionWhereUniqueInput!]
  disconnect: [GamingSessionWhereUniqueInput!]
  update: [GamingSessionUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [GamingSessionUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [GamingSessionScalarWhereInput!]
  updateMany: [GamingSessionUpdateManyWithWhereNestedInput!]
}

input GamingSessionUpdateManyWithoutGamersInput {
  create: [GamingSessionCreateWithoutGamersInput!]
  delete: [GamingSessionWhereUniqueInput!]
  connect: [GamingSessionWhereUniqueInput!]
  set: [GamingSessionWhereUniqueInput!]
  disconnect: [GamingSessionWhereUniqueInput!]
  update: [GamingSessionUpdateWithWhereUniqueWithoutGamersInput!]
  upsert: [GamingSessionUpsertWithWhereUniqueWithoutGamersInput!]
  deleteMany: [GamingSessionScalarWhereInput!]
  updateMany: [GamingSessionUpdateManyWithWhereNestedInput!]
}

input GamingSessionUpdateManyWithWhereNestedInput {
  where: GamingSessionScalarWhereInput!
  data: GamingSessionUpdateManyDataInput!
}

input GamingSessionUpdateOneRequiredInput {
  create: GamingSessionCreateInput
  update: GamingSessionUpdateDataInput
  upsert: GamingSessionUpsertNestedInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionUpdateOneRequiredWithoutReviewsInput {
  create: GamingSessionCreateWithoutReviewsInput
  update: GamingSessionUpdateWithoutReviewsDataInput
  upsert: GamingSessionUpsertWithoutReviewsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionUpdateOneRequiredWithoutTimeslotsInput {
  create: GamingSessionCreateWithoutTimeslotsInput
  update: GamingSessionUpdateWithoutTimeslotsDataInput
  upsert: GamingSessionUpsertWithoutTimeslotsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionUpdateWithoutGameDataInput {
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  title: String
  length: Int
  price: Float
  launcher: Launcher
  reviews: SessionReviewUpdateManyWithoutSessionInput
  system: System
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionUpdateWithoutGamersDataInput {
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  launcher: Launcher
  reviews: SessionReviewUpdateManyWithoutSessionInput
  system: System
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionUpdateWithoutReviewsDataInput {
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  launcher: Launcher
  system: System
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionUpdateWithoutTimeslotsDataInput {
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  launcher: Launcher
  reviews: SessionReviewUpdateManyWithoutSessionInput
  system: System
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  popularity: Int
  views: Int
  retired: Boolean
}

input GamingSessionUpdateWithWhereUniqueWithoutGameInput {
  where: GamingSessionWhereUniqueInput!
  data: GamingSessionUpdateWithoutGameDataInput!
}

input GamingSessionUpdateWithWhereUniqueWithoutGamersInput {
  where: GamingSessionWhereUniqueInput!
  data: GamingSessionUpdateWithoutGamersDataInput!
}

input GamingSessionUpsertNestedInput {
  update: GamingSessionUpdateDataInput!
  create: GamingSessionCreateInput!
}

input GamingSessionUpsertWithoutReviewsInput {
  update: GamingSessionUpdateWithoutReviewsDataInput!
  create: GamingSessionCreateWithoutReviewsInput!
}

input GamingSessionUpsertWithoutTimeslotsInput {
  update: GamingSessionUpdateWithoutTimeslotsDataInput!
  create: GamingSessionCreateWithoutTimeslotsInput!
}

input GamingSessionUpsertWithWhereUniqueWithoutGameInput {
  where: GamingSessionWhereUniqueInput!
  update: GamingSessionUpdateWithoutGameDataInput!
  create: GamingSessionCreateWithoutGameInput!
}

input GamingSessionUpsertWithWhereUniqueWithoutGamersInput {
  where: GamingSessionWhereUniqueInput!
  update: GamingSessionUpdateWithoutGamersDataInput!
  create: GamingSessionCreateWithoutGamersInput!
}

input GamingSessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  gamers_every: UserWhereInput
  gamers_some: UserWhereInput
  gamers_none: UserWhereInput
  creator: UserWhereInput
  game: GameWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  launcher: Launcher
  launcher_not: Launcher
  launcher_in: [Launcher!]
  launcher_not_in: [Launcher!]
  reviews_every: SessionReviewWhereInput
  reviews_some: SessionReviewWhereInput
  reviews_none: SessionReviewWhereInput
  system: System
  system_not: System
  system_in: [System!]
  system_not_in: [System!]
  type: TypeOfGame
  type_not: TypeOfGame
  type_in: [TypeOfGame!]
  type_not_in: [TypeOfGame!]
  slots: Int
  slots_not: Int
  slots_in: [Int!]
  slots_not_in: [Int!]
  slots_lt: Int
  slots_lte: Int
  slots_gt: Int
  slots_gte: Int
  requirements_every: RequirementWhereInput
  requirements_some: RequirementWhereInput
  requirements_none: RequirementWhereInput
  discounts_every: DiscountWhereInput
  discounts_some: DiscountWhereInput
  discounts_none: DiscountWhereInput
  timeslots_every: GamingTimeSlotWhereInput
  timeslots_some: GamingTimeSlotWhereInput
  timeslots_none: GamingTimeSlotWhereInput
  popularity: Int
  popularity_not: Int
  popularity_in: [Int!]
  popularity_not_in: [Int!]
  popularity_lt: Int
  popularity_lte: Int
  popularity_gt: Int
  popularity_gte: Int
  views: Int
  views_not: Int
  views_in: [Int!]
  views_not_in: [Int!]
  views_lt: Int
  views_lte: Int
  views_gt: Int
  views_gte: Int
  retired: Boolean
  retired_not: Boolean
  AND: [GamingSessionWhereInput!]
  OR: [GamingSessionWhereInput!]
  NOT: [GamingSessionWhereInput!]
}

input GamingSessionWhereUniqueInput {
  id: ID
}

type GamingTimeSlot {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSession!
  gamers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  players(where: BookedPlayerWhereInput, orderBy: BookedPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookedPlayer!]
  length: Int!
  slots: Int!
}

type GamingTimeSlotConnection {
  pageInfo: PageInfo!
  edges: [GamingTimeSlotEdge]!
  aggregate: AggregateGamingTimeSlot!
}

input GamingTimeSlotCreateInput {
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSessionCreateOneWithoutTimeslotsInput!
  gamers: UserCreateManyWithoutTimeSlotsInput
  bookings: BookingCreateManyWithoutTimeslotInput
  players: BookedPlayerCreateManyWithoutTimeslotInput
  length: Int!
  slots: Int!
}

input GamingTimeSlotCreateManyWithoutGamersInput {
  create: [GamingTimeSlotCreateWithoutGamersInput!]
  connect: [GamingTimeSlotWhereUniqueInput!]
}

input GamingTimeSlotCreateManyWithoutGamingSessionInput {
  create: [GamingTimeSlotCreateWithoutGamingSessionInput!]
  connect: [GamingTimeSlotWhereUniqueInput!]
}

input GamingTimeSlotCreateOneWithoutBookingsInput {
  create: GamingTimeSlotCreateWithoutBookingsInput
  connect: GamingTimeSlotWhereUniqueInput
}

input GamingTimeSlotCreateOneWithoutPlayersInput {
  create: GamingTimeSlotCreateWithoutPlayersInput
  connect: GamingTimeSlotWhereUniqueInput
}

input GamingTimeSlotCreateWithoutBookingsInput {
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSessionCreateOneWithoutTimeslotsInput!
  gamers: UserCreateManyWithoutTimeSlotsInput
  players: BookedPlayerCreateManyWithoutTimeslotInput
  length: Int!
  slots: Int!
}

input GamingTimeSlotCreateWithoutGamersInput {
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSessionCreateOneWithoutTimeslotsInput!
  bookings: BookingCreateManyWithoutTimeslotInput
  players: BookedPlayerCreateManyWithoutTimeslotInput
  length: Int!
  slots: Int!
}

input GamingTimeSlotCreateWithoutGamingSessionInput {
  startTime: DateTime!
  endTime: DateTime!
  gamers: UserCreateManyWithoutTimeSlotsInput
  bookings: BookingCreateManyWithoutTimeslotInput
  players: BookedPlayerCreateManyWithoutTimeslotInput
  length: Int!
  slots: Int!
}

input GamingTimeSlotCreateWithoutPlayersInput {
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSessionCreateOneWithoutTimeslotsInput!
  gamers: UserCreateManyWithoutTimeSlotsInput
  bookings: BookingCreateManyWithoutTimeslotInput
  length: Int!
  slots: Int!
}

type GamingTimeSlotEdge {
  node: GamingTimeSlot!
  cursor: String!
}

enum GamingTimeSlotOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  length_ASC
  length_DESC
  slots_ASC
  slots_DESC
}

type GamingTimeSlotPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  length: Int!
  slots: Int!
}

input GamingTimeSlotScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  slots: Int
  slots_not: Int
  slots_in: [Int!]
  slots_not_in: [Int!]
  slots_lt: Int
  slots_lte: Int
  slots_gt: Int
  slots_gte: Int
  AND: [GamingTimeSlotScalarWhereInput!]
  OR: [GamingTimeSlotScalarWhereInput!]
  NOT: [GamingTimeSlotScalarWhereInput!]
}

type GamingTimeSlotSubscriptionPayload {
  mutation: MutationType!
  node: GamingTimeSlot
  updatedFields: [String!]
  previousValues: GamingTimeSlotPreviousValues
}

input GamingTimeSlotSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamingTimeSlotWhereInput
  AND: [GamingTimeSlotSubscriptionWhereInput!]
  OR: [GamingTimeSlotSubscriptionWhereInput!]
  NOT: [GamingTimeSlotSubscriptionWhereInput!]
}

input GamingTimeSlotUpdateInput {
  startTime: DateTime
  endTime: DateTime
  gamingSession: GamingSessionUpdateOneRequiredWithoutTimeslotsInput
  gamers: UserUpdateManyWithoutTimeSlotsInput
  bookings: BookingUpdateManyWithoutTimeslotInput
  players: BookedPlayerUpdateManyWithoutTimeslotInput
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateManyDataInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateManyMutationInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateManyWithoutGamersInput {
  create: [GamingTimeSlotCreateWithoutGamersInput!]
  delete: [GamingTimeSlotWhereUniqueInput!]
  connect: [GamingTimeSlotWhereUniqueInput!]
  set: [GamingTimeSlotWhereUniqueInput!]
  disconnect: [GamingTimeSlotWhereUniqueInput!]
  update: [GamingTimeSlotUpdateWithWhereUniqueWithoutGamersInput!]
  upsert: [GamingTimeSlotUpsertWithWhereUniqueWithoutGamersInput!]
  deleteMany: [GamingTimeSlotScalarWhereInput!]
  updateMany: [GamingTimeSlotUpdateManyWithWhereNestedInput!]
}

input GamingTimeSlotUpdateManyWithoutGamingSessionInput {
  create: [GamingTimeSlotCreateWithoutGamingSessionInput!]
  delete: [GamingTimeSlotWhereUniqueInput!]
  connect: [GamingTimeSlotWhereUniqueInput!]
  set: [GamingTimeSlotWhereUniqueInput!]
  disconnect: [GamingTimeSlotWhereUniqueInput!]
  update: [GamingTimeSlotUpdateWithWhereUniqueWithoutGamingSessionInput!]
  upsert: [GamingTimeSlotUpsertWithWhereUniqueWithoutGamingSessionInput!]
  deleteMany: [GamingTimeSlotScalarWhereInput!]
  updateMany: [GamingTimeSlotUpdateManyWithWhereNestedInput!]
}

input GamingTimeSlotUpdateManyWithWhereNestedInput {
  where: GamingTimeSlotScalarWhereInput!
  data: GamingTimeSlotUpdateManyDataInput!
}

input GamingTimeSlotUpdateOneRequiredWithoutBookingsInput {
  create: GamingTimeSlotCreateWithoutBookingsInput
  update: GamingTimeSlotUpdateWithoutBookingsDataInput
  upsert: GamingTimeSlotUpsertWithoutBookingsInput
  connect: GamingTimeSlotWhereUniqueInput
}

input GamingTimeSlotUpdateOneRequiredWithoutPlayersInput {
  create: GamingTimeSlotCreateWithoutPlayersInput
  update: GamingTimeSlotUpdateWithoutPlayersDataInput
  upsert: GamingTimeSlotUpsertWithoutPlayersInput
  connect: GamingTimeSlotWhereUniqueInput
}

input GamingTimeSlotUpdateWithoutBookingsDataInput {
  startTime: DateTime
  endTime: DateTime
  gamingSession: GamingSessionUpdateOneRequiredWithoutTimeslotsInput
  gamers: UserUpdateManyWithoutTimeSlotsInput
  players: BookedPlayerUpdateManyWithoutTimeslotInput
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateWithoutGamersDataInput {
  startTime: DateTime
  endTime: DateTime
  gamingSession: GamingSessionUpdateOneRequiredWithoutTimeslotsInput
  bookings: BookingUpdateManyWithoutTimeslotInput
  players: BookedPlayerUpdateManyWithoutTimeslotInput
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateWithoutGamingSessionDataInput {
  startTime: DateTime
  endTime: DateTime
  gamers: UserUpdateManyWithoutTimeSlotsInput
  bookings: BookingUpdateManyWithoutTimeslotInput
  players: BookedPlayerUpdateManyWithoutTimeslotInput
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateWithoutPlayersDataInput {
  startTime: DateTime
  endTime: DateTime
  gamingSession: GamingSessionUpdateOneRequiredWithoutTimeslotsInput
  gamers: UserUpdateManyWithoutTimeSlotsInput
  bookings: BookingUpdateManyWithoutTimeslotInput
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateWithWhereUniqueWithoutGamersInput {
  where: GamingTimeSlotWhereUniqueInput!
  data: GamingTimeSlotUpdateWithoutGamersDataInput!
}

input GamingTimeSlotUpdateWithWhereUniqueWithoutGamingSessionInput {
  where: GamingTimeSlotWhereUniqueInput!
  data: GamingTimeSlotUpdateWithoutGamingSessionDataInput!
}

input GamingTimeSlotUpsertWithoutBookingsInput {
  update: GamingTimeSlotUpdateWithoutBookingsDataInput!
  create: GamingTimeSlotCreateWithoutBookingsInput!
}

input GamingTimeSlotUpsertWithoutPlayersInput {
  update: GamingTimeSlotUpdateWithoutPlayersDataInput!
  create: GamingTimeSlotCreateWithoutPlayersInput!
}

input GamingTimeSlotUpsertWithWhereUniqueWithoutGamersInput {
  where: GamingTimeSlotWhereUniqueInput!
  update: GamingTimeSlotUpdateWithoutGamersDataInput!
  create: GamingTimeSlotCreateWithoutGamersInput!
}

input GamingTimeSlotUpsertWithWhereUniqueWithoutGamingSessionInput {
  where: GamingTimeSlotWhereUniqueInput!
  update: GamingTimeSlotUpdateWithoutGamingSessionDataInput!
  create: GamingTimeSlotCreateWithoutGamingSessionInput!
}

input GamingTimeSlotWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  gamingSession: GamingSessionWhereInput
  gamers_every: UserWhereInput
  gamers_some: UserWhereInput
  gamers_none: UserWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  players_every: BookedPlayerWhereInput
  players_some: BookedPlayerWhereInput
  players_none: BookedPlayerWhereInput
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  slots: Int
  slots_not: Int
  slots_in: [Int!]
  slots_not_in: [Int!]
  slots_lt: Int
  slots_lte: Int
  slots_gt: Int
  slots_gte: Int
  AND: [GamingTimeSlotWhereInput!]
  OR: [GamingTimeSlotWhereInput!]
  NOT: [GamingTimeSlotWhereInput!]
}

input GamingTimeSlotWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Launcher {
  EPIC
  STEAM
  ORIGIN
  BATTLENET
  GOG
  UPLAY
  BETHESDA
  ITCH
  WINDOWS
  RIOT
}

scalar Long

type Mutation {
  createBookedPlayer(data: BookedPlayerCreateInput!): BookedPlayer!
  updateBookedPlayer(data: BookedPlayerUpdateInput!, where: BookedPlayerWhereUniqueInput!): BookedPlayer
  upsertBookedPlayer(where: BookedPlayerWhereUniqueInput!, create: BookedPlayerCreateInput!, update: BookedPlayerUpdateInput!): BookedPlayer!
  deleteBookedPlayer(where: BookedPlayerWhereUniqueInput!): BookedPlayer
  deleteManyBookedPlayers(where: BookedPlayerWhereInput): BatchPayload!
  createBooking(data: BookingCreateInput!): Booking!
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  createBookingInvite(data: BookingInviteCreateInput!): BookingInvite!
  updateBookingInvite(data: BookingInviteUpdateInput!, where: BookingInviteWhereUniqueInput!): BookingInvite
  updateManyBookingInvites(data: BookingInviteUpdateManyMutationInput!, where: BookingInviteWhereInput): BatchPayload!
  upsertBookingInvite(where: BookingInviteWhereUniqueInput!, create: BookingInviteCreateInput!, update: BookingInviteUpdateInput!): BookingInvite!
  deleteBookingInvite(where: BookingInviteWhereUniqueInput!): BookingInvite
  deleteManyBookingInvites(where: BookingInviteWhereInput): BatchPayload!
  createDiscount(data: DiscountCreateInput!): Discount!
  updateDiscount(data: DiscountUpdateInput!, where: DiscountWhereUniqueInput!): Discount
  updateManyDiscounts(data: DiscountUpdateManyMutationInput!, where: DiscountWhereInput): BatchPayload!
  upsertDiscount(where: DiscountWhereUniqueInput!, create: DiscountCreateInput!, update: DiscountUpdateInput!): Discount!
  deleteDiscount(where: DiscountWhereUniqueInput!): Discount
  deleteManyDiscounts(where: DiscountWhereInput): BatchPayload!
  createFriendRequest(data: FriendRequestCreateInput!): FriendRequest!
  updateFriendRequest(data: FriendRequestUpdateInput!, where: FriendRequestWhereUniqueInput!): FriendRequest
  upsertFriendRequest(where: FriendRequestWhereUniqueInput!, create: FriendRequestCreateInput!, update: FriendRequestUpdateInput!): FriendRequest!
  deleteFriendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  deleteManyFriendRequests(where: FriendRequestWhereInput): BatchPayload!
  createGame(data: GameCreateInput!): Game!
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteManyGames(where: GameWhereInput): BatchPayload!
  createGameIndex(data: GameIndexCreateInput!): GameIndex!
  updateGameIndex(data: GameIndexUpdateInput!, where: GameIndexWhereUniqueInput!): GameIndex
  updateManyGameIndexes(data: GameIndexUpdateManyMutationInput!, where: GameIndexWhereInput): BatchPayload!
  upsertGameIndex(where: GameIndexWhereUniqueInput!, create: GameIndexCreateInput!, update: GameIndexUpdateInput!): GameIndex!
  deleteGameIndex(where: GameIndexWhereUniqueInput!): GameIndex
  deleteManyGameIndexes(where: GameIndexWhereInput): BatchPayload!
  createGamerRequest(data: GamerRequestCreateInput!): GamerRequest!
  updateGamerRequest(data: GamerRequestUpdateInput!, where: GamerRequestWhereUniqueInput!): GamerRequest
  updateManyGamerRequests(data: GamerRequestUpdateManyMutationInput!, where: GamerRequestWhereInput): BatchPayload!
  upsertGamerRequest(where: GamerRequestWhereUniqueInput!, create: GamerRequestCreateInput!, update: GamerRequestUpdateInput!): GamerRequest!
  deleteGamerRequest(where: GamerRequestWhereUniqueInput!): GamerRequest
  deleteManyGamerRequests(where: GamerRequestWhereInput): BatchPayload!
  createGamerTag(data: GamerTagCreateInput!): GamerTag!
  updateGamerTag(data: GamerTagUpdateInput!, where: GamerTagWhereUniqueInput!): GamerTag
  updateManyGamerTags(data: GamerTagUpdateManyMutationInput!, where: GamerTagWhereInput): BatchPayload!
  upsertGamerTag(where: GamerTagWhereUniqueInput!, create: GamerTagCreateInput!, update: GamerTagUpdateInput!): GamerTag!
  deleteGamerTag(where: GamerTagWhereUniqueInput!): GamerTag
  deleteManyGamerTags(where: GamerTagWhereInput): BatchPayload!
  createGamingSession(data: GamingSessionCreateInput!): GamingSession!
  updateGamingSession(data: GamingSessionUpdateInput!, where: GamingSessionWhereUniqueInput!): GamingSession
  updateManyGamingSessions(data: GamingSessionUpdateManyMutationInput!, where: GamingSessionWhereInput): BatchPayload!
  upsertGamingSession(where: GamingSessionWhereUniqueInput!, create: GamingSessionCreateInput!, update: GamingSessionUpdateInput!): GamingSession!
  deleteGamingSession(where: GamingSessionWhereUniqueInput!): GamingSession
  deleteManyGamingSessions(where: GamingSessionWhereInput): BatchPayload!
  createGamingSessionIndex(data: GamingSessionIndexCreateInput!): GamingSessionIndex!
  updateGamingSessionIndex(data: GamingSessionIndexUpdateInput!, where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  updateManyGamingSessionIndexes(data: GamingSessionIndexUpdateManyMutationInput!, where: GamingSessionIndexWhereInput): BatchPayload!
  upsertGamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!, create: GamingSessionIndexCreateInput!, update: GamingSessionIndexUpdateInput!): GamingSessionIndex!
  deleteGamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  deleteManyGamingSessionIndexes(where: GamingSessionIndexWhereInput): BatchPayload!
  createGamingTimeSlot(data: GamingTimeSlotCreateInput!): GamingTimeSlot!
  updateGamingTimeSlot(data: GamingTimeSlotUpdateInput!, where: GamingTimeSlotWhereUniqueInput!): GamingTimeSlot
  updateManyGamingTimeSlots(data: GamingTimeSlotUpdateManyMutationInput!, where: GamingTimeSlotWhereInput): BatchPayload!
  upsertGamingTimeSlot(where: GamingTimeSlotWhereUniqueInput!, create: GamingTimeSlotCreateInput!, update: GamingTimeSlotUpdateInput!): GamingTimeSlot!
  deleteGamingTimeSlot(where: GamingTimeSlotWhereUniqueInput!): GamingTimeSlot
  deleteManyGamingTimeSlots(where: GamingTimeSlotWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createPCLauncher(data: PCLauncherCreateInput!): PCLauncher!
  updatePCLauncher(data: PCLauncherUpdateInput!, where: PCLauncherWhereUniqueInput!): PCLauncher
  updateManyPCLaunchers(data: PCLauncherUpdateManyMutationInput!, where: PCLauncherWhereInput): BatchPayload!
  upsertPCLauncher(where: PCLauncherWhereUniqueInput!, create: PCLauncherCreateInput!, update: PCLauncherUpdateInput!): PCLauncher!
  deletePCLauncher(where: PCLauncherWhereUniqueInput!): PCLauncher
  deleteManyPCLaunchers(where: PCLauncherWhereInput): BatchPayload!
  createRequirement(data: RequirementCreateInput!): Requirement!
  updateRequirement(data: RequirementUpdateInput!, where: RequirementWhereUniqueInput!): Requirement
  updateManyRequirements(data: RequirementUpdateManyMutationInput!, where: RequirementWhereInput): BatchPayload!
  upsertRequirement(where: RequirementWhereUniqueInput!, create: RequirementCreateInput!, update: RequirementUpdateInput!): Requirement!
  deleteRequirement(where: RequirementWhereUniqueInput!): Requirement
  deleteManyRequirements(where: RequirementWhereInput): BatchPayload!
  createSavedCard(data: SavedCardCreateInput!): SavedCard!
  updateSavedCard(data: SavedCardUpdateInput!, where: SavedCardWhereUniqueInput!): SavedCard
  updateManySavedCards(data: SavedCardUpdateManyMutationInput!, where: SavedCardWhereInput): BatchPayload!
  upsertSavedCard(where: SavedCardWhereUniqueInput!, create: SavedCardCreateInput!, update: SavedCardUpdateInput!): SavedCard!
  deleteSavedCard(where: SavedCardWhereUniqueInput!): SavedCard
  deleteManySavedCards(where: SavedCardWhereInput): BatchPayload!
  createSessionReview(data: SessionReviewCreateInput!): SessionReview!
  updateSessionReview(data: SessionReviewUpdateInput!, where: SessionReviewWhereUniqueInput!): SessionReview
  updateManySessionReviews(data: SessionReviewUpdateManyMutationInput!, where: SessionReviewWhereInput): BatchPayload!
  upsertSessionReview(where: SessionReviewWhereUniqueInput!, create: SessionReviewCreateInput!, update: SessionReviewUpdateInput!): SessionReview!
  deleteSessionReview(where: SessionReviewWhereUniqueInput!): SessionReview
  deleteManySessionReviews(where: SessionReviewWhereInput): BatchPayload!
  createSessionReviewIndex(data: SessionReviewIndexCreateInput!): SessionReviewIndex!
  updateSessionReviewIndex(data: SessionReviewIndexUpdateInput!, where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  updateManySessionReviewIndexes(data: SessionReviewIndexUpdateManyMutationInput!, where: SessionReviewIndexWhereInput): BatchPayload!
  upsertSessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!, create: SessionReviewIndexCreateInput!, update: SessionReviewIndexUpdateInput!): SessionReviewIndex!
  deleteSessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  deleteManySessionReviewIndexes(where: SessionReviewIndexWhereInput): BatchPayload!
  createSocialMedia(data: SocialMediaCreateInput!): SocialMedia!
  updateSocialMedia(data: SocialMediaUpdateInput!, where: SocialMediaWhereUniqueInput!): SocialMedia
  updateManySocialMedias(data: SocialMediaUpdateManyMutationInput!, where: SocialMediaWhereInput): BatchPayload!
  upsertSocialMedia(where: SocialMediaWhereUniqueInput!, create: SocialMediaCreateInput!, update: SocialMediaUpdateInput!): SocialMedia!
  deleteSocialMedia(where: SocialMediaWhereUniqueInput!): SocialMedia
  deleteManySocialMedias(where: SocialMediaWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserIndex(data: UserIndexCreateInput!): UserIndex!
  updateUserIndex(data: UserIndexUpdateInput!, where: UserIndexWhereUniqueInput!): UserIndex
  updateManyUserIndexes(data: UserIndexUpdateManyMutationInput!, where: UserIndexWhereInput): BatchPayload!
  upsertUserIndex(where: UserIndexWhereUniqueInput!, create: UserIndexCreateInput!, update: UserIndexUpdateInput!): UserIndex!
  deleteUserIndex(where: UserIndexWhereUniqueInput!): UserIndex
  deleteManyUserIndexes(where: UserIndexWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: NotificationType!
  text: String!
  for: User!
  friendRequest: FriendRequest
  bookingInvite: BookingInvite
  booking: Booking
  friend: User
  viewed: Boolean!
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  type: NotificationType!
  text: String!
  for: UserCreateOneInput!
  friendRequest: FriendRequestCreateOneWithoutNotificationInput
  bookingInvite: BookingInviteCreateOneWithoutNotificationInput
  booking: BookingCreateOneWithoutNotificationsInput
  friend: UserCreateOneInput
  viewed: Boolean
}

input NotificationCreateManyWithoutBookingInput {
  create: [NotificationCreateWithoutBookingInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateOneWithoutBookingInviteInput {
  create: NotificationCreateWithoutBookingInviteInput
  connect: NotificationWhereUniqueInput
}

input NotificationCreateOneWithoutFriendRequestInput {
  create: NotificationCreateWithoutFriendRequestInput
  connect: NotificationWhereUniqueInput
}

input NotificationCreateWithoutBookingInput {
  type: NotificationType!
  text: String!
  for: UserCreateOneInput!
  friendRequest: FriendRequestCreateOneWithoutNotificationInput
  bookingInvite: BookingInviteCreateOneWithoutNotificationInput
  friend: UserCreateOneInput
  viewed: Boolean
}

input NotificationCreateWithoutBookingInviteInput {
  type: NotificationType!
  text: String!
  for: UserCreateOneInput!
  friendRequest: FriendRequestCreateOneWithoutNotificationInput
  booking: BookingCreateOneWithoutNotificationsInput
  friend: UserCreateOneInput
  viewed: Boolean
}

input NotificationCreateWithoutFriendRequestInput {
  type: NotificationType!
  text: String!
  for: UserCreateOneInput!
  bookingInvite: BookingInviteCreateOneWithoutNotificationInput
  booking: BookingCreateOneWithoutNotificationsInput
  friend: UserCreateOneInput
  viewed: Boolean
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  text_ASC
  text_DESC
  viewed_ASC
  viewed_DESC
}

type NotificationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: NotificationType!
  text: String!
  viewed: Boolean!
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  type: NotificationType
  type_not: NotificationType
  type_in: [NotificationType!]
  type_not_in: [NotificationType!]
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  viewed: Boolean
  viewed_not: Boolean
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

enum NotificationType {
  CANCELLED_BOOKING
  CANCELLED_TIMESLOT
  GAMER_PUSHED_BACK_SLOT
  ACCEPTED_GAMER_REQUEST
  DENIED_GAMER_REQUEST
  FRIEND_REQUEST
  ACCEPTED_TIMESLOT_REQUEST
  TIMESLOT_REQUEST
  BOOKED_TIMESLOT
  TIMESLOT_INVITE
  FRIEND_CANCELLED_BOOKING
  FRIEND_CANCELLED_THEIR_SLOT
  ACCEPTED_TIMESLOT_INVITE
  ACCEPTED_FRIEND_REQUEST
}

input NotificationUpdateInput {
  type: NotificationType
  text: String
  for: UserUpdateOneRequiredInput
  friendRequest: FriendRequestUpdateOneWithoutNotificationInput
  bookingInvite: BookingInviteUpdateOneWithoutNotificationInput
  booking: BookingUpdateOneWithoutNotificationsInput
  friend: UserUpdateOneInput
  viewed: Boolean
}

input NotificationUpdateManyDataInput {
  type: NotificationType
  text: String
  viewed: Boolean
}

input NotificationUpdateManyMutationInput {
  type: NotificationType
  text: String
  viewed: Boolean
}

input NotificationUpdateManyWithoutBookingInput {
  create: [NotificationCreateWithoutBookingInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutBookingInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutBookingInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateOneRequiredWithoutFriendRequestInput {
  create: NotificationCreateWithoutFriendRequestInput
  update: NotificationUpdateWithoutFriendRequestDataInput
  upsert: NotificationUpsertWithoutFriendRequestInput
  connect: NotificationWhereUniqueInput
}

input NotificationUpdateOneWithoutBookingInviteInput {
  create: NotificationCreateWithoutBookingInviteInput
  update: NotificationUpdateWithoutBookingInviteDataInput
  upsert: NotificationUpsertWithoutBookingInviteInput
  delete: Boolean
  disconnect: Boolean
  connect: NotificationWhereUniqueInput
}

input NotificationUpdateWithoutBookingDataInput {
  type: NotificationType
  text: String
  for: UserUpdateOneRequiredInput
  friendRequest: FriendRequestUpdateOneWithoutNotificationInput
  bookingInvite: BookingInviteUpdateOneWithoutNotificationInput
  friend: UserUpdateOneInput
  viewed: Boolean
}

input NotificationUpdateWithoutBookingInviteDataInput {
  type: NotificationType
  text: String
  for: UserUpdateOneRequiredInput
  friendRequest: FriendRequestUpdateOneWithoutNotificationInput
  booking: BookingUpdateOneWithoutNotificationsInput
  friend: UserUpdateOneInput
  viewed: Boolean
}

input NotificationUpdateWithoutFriendRequestDataInput {
  type: NotificationType
  text: String
  for: UserUpdateOneRequiredInput
  bookingInvite: BookingInviteUpdateOneWithoutNotificationInput
  booking: BookingUpdateOneWithoutNotificationsInput
  friend: UserUpdateOneInput
  viewed: Boolean
}

input NotificationUpdateWithWhereUniqueWithoutBookingInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutBookingDataInput!
}

input NotificationUpsertWithoutBookingInviteInput {
  update: NotificationUpdateWithoutBookingInviteDataInput!
  create: NotificationCreateWithoutBookingInviteInput!
}

input NotificationUpsertWithoutFriendRequestInput {
  update: NotificationUpdateWithoutFriendRequestDataInput!
  create: NotificationCreateWithoutFriendRequestInput!
}

input NotificationUpsertWithWhereUniqueWithoutBookingInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutBookingDataInput!
  create: NotificationCreateWithoutBookingInput!
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  type: NotificationType
  type_not: NotificationType
  type_in: [NotificationType!]
  type_not_in: [NotificationType!]
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  for: UserWhereInput
  friendRequest: FriendRequestWhereInput
  bookingInvite: BookingInviteWhereInput
  booking: BookingWhereInput
  friend: UserWhereInput
  viewed: Boolean
  viewed_not: Boolean
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

enum Occupations {
  CELEBRITY
  INFLUENCER
  ENTERTAINER
  STREAMER
  YOUTUBER
  MEDIA
  SPORTS_PERSONALITY
  INTERNET_PERSONALITY
  ATHLETE
  PROFESIONAL_GAMER
  ACTOR
  COMEDIAN
  ROCK_STAR
  RAPPER
  SINGER
  MUSICIAN
  POLITICIAN
  DJ
  MUSIC_PRODUCER
  ENTREPRENEUR
  ARTIST
  ACTRESS
  MODEL
  ADULT_PERFORMER
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PCLauncher {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gamerTag: GamerTag!
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  riot: String
}

type PCLauncherConnection {
  pageInfo: PageInfo!
  edges: [PCLauncherEdge]!
  aggregate: AggregatePCLauncher!
}

input PCLauncherCreateInput {
  gamerTag: GamerTagCreateOneWithoutPcInput!
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  riot: String
}

input PCLauncherCreateOneWithoutGamerTagInput {
  create: PCLauncherCreateWithoutGamerTagInput
  connect: PCLauncherWhereUniqueInput
}

input PCLauncherCreateWithoutGamerTagInput {
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  riot: String
}

type PCLauncherEdge {
  node: PCLauncher!
  cursor: String!
}

enum PCLauncherOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  epic_ASC
  epic_DESC
  steam_ASC
  steam_DESC
  origin_ASC
  origin_DESC
  gog_ASC
  gog_DESC
  battlenet_ASC
  battlenet_DESC
  uplay_ASC
  uplay_DESC
  bethesda_ASC
  bethesda_DESC
  itch_ASC
  itch_DESC
  windows_ASC
  windows_DESC
  riot_ASC
  riot_DESC
}

type PCLauncherPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  riot: String
}

type PCLauncherSubscriptionPayload {
  mutation: MutationType!
  node: PCLauncher
  updatedFields: [String!]
  previousValues: PCLauncherPreviousValues
}

input PCLauncherSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PCLauncherWhereInput
  AND: [PCLauncherSubscriptionWhereInput!]
  OR: [PCLauncherSubscriptionWhereInput!]
  NOT: [PCLauncherSubscriptionWhereInput!]
}

input PCLauncherUpdateInput {
  gamerTag: GamerTagUpdateOneRequiredWithoutPcInput
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  riot: String
}

input PCLauncherUpdateManyMutationInput {
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  riot: String
}

input PCLauncherUpdateOneWithoutGamerTagInput {
  create: PCLauncherCreateWithoutGamerTagInput
  update: PCLauncherUpdateWithoutGamerTagDataInput
  upsert: PCLauncherUpsertWithoutGamerTagInput
  delete: Boolean
  disconnect: Boolean
  connect: PCLauncherWhereUniqueInput
}

input PCLauncherUpdateWithoutGamerTagDataInput {
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  riot: String
}

input PCLauncherUpsertWithoutGamerTagInput {
  update: PCLauncherUpdateWithoutGamerTagDataInput!
  create: PCLauncherCreateWithoutGamerTagInput!
}

input PCLauncherWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  gamerTag: GamerTagWhereInput
  epic: String
  epic_not: String
  epic_in: [String!]
  epic_not_in: [String!]
  epic_lt: String
  epic_lte: String
  epic_gt: String
  epic_gte: String
  epic_contains: String
  epic_not_contains: String
  epic_starts_with: String
  epic_not_starts_with: String
  epic_ends_with: String
  epic_not_ends_with: String
  steam: String
  steam_not: String
  steam_in: [String!]
  steam_not_in: [String!]
  steam_lt: String
  steam_lte: String
  steam_gt: String
  steam_gte: String
  steam_contains: String
  steam_not_contains: String
  steam_starts_with: String
  steam_not_starts_with: String
  steam_ends_with: String
  steam_not_ends_with: String
  origin: String
  origin_not: String
  origin_in: [String!]
  origin_not_in: [String!]
  origin_lt: String
  origin_lte: String
  origin_gt: String
  origin_gte: String
  origin_contains: String
  origin_not_contains: String
  origin_starts_with: String
  origin_not_starts_with: String
  origin_ends_with: String
  origin_not_ends_with: String
  gog: String
  gog_not: String
  gog_in: [String!]
  gog_not_in: [String!]
  gog_lt: String
  gog_lte: String
  gog_gt: String
  gog_gte: String
  gog_contains: String
  gog_not_contains: String
  gog_starts_with: String
  gog_not_starts_with: String
  gog_ends_with: String
  gog_not_ends_with: String
  battlenet: String
  battlenet_not: String
  battlenet_in: [String!]
  battlenet_not_in: [String!]
  battlenet_lt: String
  battlenet_lte: String
  battlenet_gt: String
  battlenet_gte: String
  battlenet_contains: String
  battlenet_not_contains: String
  battlenet_starts_with: String
  battlenet_not_starts_with: String
  battlenet_ends_with: String
  battlenet_not_ends_with: String
  uplay: String
  uplay_not: String
  uplay_in: [String!]
  uplay_not_in: [String!]
  uplay_lt: String
  uplay_lte: String
  uplay_gt: String
  uplay_gte: String
  uplay_contains: String
  uplay_not_contains: String
  uplay_starts_with: String
  uplay_not_starts_with: String
  uplay_ends_with: String
  uplay_not_ends_with: String
  bethesda: String
  bethesda_not: String
  bethesda_in: [String!]
  bethesda_not_in: [String!]
  bethesda_lt: String
  bethesda_lte: String
  bethesda_gt: String
  bethesda_gte: String
  bethesda_contains: String
  bethesda_not_contains: String
  bethesda_starts_with: String
  bethesda_not_starts_with: String
  bethesda_ends_with: String
  bethesda_not_ends_with: String
  itch: String
  itch_not: String
  itch_in: [String!]
  itch_not_in: [String!]
  itch_lt: String
  itch_lte: String
  itch_gt: String
  itch_gte: String
  itch_contains: String
  itch_not_contains: String
  itch_starts_with: String
  itch_not_starts_with: String
  itch_ends_with: String
  itch_not_ends_with: String
  windows: String
  windows_not: String
  windows_in: [String!]
  windows_not_in: [String!]
  windows_lt: String
  windows_lte: String
  windows_gt: String
  windows_gte: String
  windows_contains: String
  windows_not_contains: String
  windows_starts_with: String
  windows_not_starts_with: String
  windows_ends_with: String
  windows_not_ends_with: String
  riot: String
  riot_not: String
  riot_in: [String!]
  riot_not_in: [String!]
  riot_lt: String
  riot_lte: String
  riot_gt: String
  riot_gte: String
  riot_contains: String
  riot_not_contains: String
  riot_starts_with: String
  riot_not_starts_with: String
  riot_ends_with: String
  riot_not_ends_with: String
  AND: [PCLauncherWhereInput!]
  OR: [PCLauncherWhereInput!]
  NOT: [PCLauncherWhereInput!]
}

input PCLauncherWhereUniqueInput {
  id: ID
}

enum PlayerOrSession {
  PLAYER
  SESSION
}

type Query {
  bookedPlayer(where: BookedPlayerWhereUniqueInput!): BookedPlayer
  bookedPlayers(where: BookedPlayerWhereInput, orderBy: BookedPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookedPlayer]!
  bookedPlayersConnection(where: BookedPlayerWhereInput, orderBy: BookedPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookedPlayerConnection!
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  bookingInvite(where: BookingInviteWhereUniqueInput!): BookingInvite
  bookingInvites(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookingInvite]!
  bookingInvitesConnection(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingInviteConnection!
  discount(where: DiscountWhereUniqueInput!): Discount
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount]!
  discountsConnection(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscountConnection!
  friendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  friendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest]!
  friendRequestsConnection(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection!
  game(where: GameWhereUniqueInput!): Game
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  gameIndex(where: GameIndexWhereUniqueInput!): GameIndex
  gameIndexes(where: GameIndexWhereInput, orderBy: GameIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameIndex]!
  gameIndexesConnection(where: GameIndexWhereInput, orderBy: GameIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameIndexConnection!
  gamerRequest(where: GamerRequestWhereUniqueInput!): GamerRequest
  gamerRequests(where: GamerRequestWhereInput, orderBy: GamerRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamerRequest]!
  gamerRequestsConnection(where: GamerRequestWhereInput, orderBy: GamerRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamerRequestConnection!
  gamerTag(where: GamerTagWhereUniqueInput!): GamerTag
  gamerTags(where: GamerTagWhereInput, orderBy: GamerTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamerTag]!
  gamerTagsConnection(where: GamerTagWhereInput, orderBy: GamerTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamerTagConnection!
  gamingSession(where: GamingSessionWhereUniqueInput!): GamingSession
  gamingSessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession]!
  gamingSessionsConnection(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamingSessionConnection!
  gamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  gamingSessionIndexes(where: GamingSessionIndexWhereInput, orderBy: GamingSessionIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSessionIndex]!
  gamingSessionIndexesConnection(where: GamingSessionIndexWhereInput, orderBy: GamingSessionIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamingSessionIndexConnection!
  gamingTimeSlot(where: GamingTimeSlotWhereUniqueInput!): GamingTimeSlot
  gamingTimeSlots(where: GamingTimeSlotWhereInput, orderBy: GamingTimeSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingTimeSlot]!
  gamingTimeSlotsConnection(where: GamingTimeSlotWhereInput, orderBy: GamingTimeSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamingTimeSlotConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  pCLauncher(where: PCLauncherWhereUniqueInput!): PCLauncher
  pCLaunchers(where: PCLauncherWhereInput, orderBy: PCLauncherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PCLauncher]!
  pCLaunchersConnection(where: PCLauncherWhereInput, orderBy: PCLauncherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PCLauncherConnection!
  requirement(where: RequirementWhereUniqueInput!): Requirement
  requirements(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Requirement]!
  requirementsConnection(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequirementConnection!
  savedCard(where: SavedCardWhereUniqueInput!): SavedCard
  savedCards(where: SavedCardWhereInput, orderBy: SavedCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SavedCard]!
  savedCardsConnection(where: SavedCardWhereInput, orderBy: SavedCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SavedCardConnection!
  sessionReview(where: SessionReviewWhereUniqueInput!): SessionReview
  sessionReviews(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReview]!
  sessionReviewsConnection(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionReviewConnection!
  sessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  sessionReviewIndexes(where: SessionReviewIndexWhereInput, orderBy: SessionReviewIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReviewIndex]!
  sessionReviewIndexesConnection(where: SessionReviewIndexWhereInput, orderBy: SessionReviewIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionReviewIndexConnection!
  socialMedia(where: SocialMediaWhereUniqueInput!): SocialMedia
  socialMedias(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialMedia]!
  socialMediasConnection(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialMediaConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userIndex(where: UserIndexWhereUniqueInput!): UserIndex
  userIndexes(where: UserIndexWhereInput, orderBy: UserIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserIndex]!
  userIndexesConnection(where: UserIndexWhereInput, orderBy: UserIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserIndexConnection!
  node(id: ID!): Node
}

type Requirement {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  msg: String!
}

type RequirementConnection {
  pageInfo: PageInfo!
  edges: [RequirementEdge]!
  aggregate: AggregateRequirement!
}

input RequirementCreateInput {
  msg: String!
}

input RequirementCreateManyInput {
  create: [RequirementCreateInput!]
  connect: [RequirementWhereUniqueInput!]
}

type RequirementEdge {
  node: Requirement!
  cursor: String!
}

enum RequirementOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  msg_ASC
  msg_DESC
}

type RequirementPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  msg: String!
}

input RequirementScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  msg: String
  msg_not: String
  msg_in: [String!]
  msg_not_in: [String!]
  msg_lt: String
  msg_lte: String
  msg_gt: String
  msg_gte: String
  msg_contains: String
  msg_not_contains: String
  msg_starts_with: String
  msg_not_starts_with: String
  msg_ends_with: String
  msg_not_ends_with: String
  AND: [RequirementScalarWhereInput!]
  OR: [RequirementScalarWhereInput!]
  NOT: [RequirementScalarWhereInput!]
}

type RequirementSubscriptionPayload {
  mutation: MutationType!
  node: Requirement
  updatedFields: [String!]
  previousValues: RequirementPreviousValues
}

input RequirementSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RequirementWhereInput
  AND: [RequirementSubscriptionWhereInput!]
  OR: [RequirementSubscriptionWhereInput!]
  NOT: [RequirementSubscriptionWhereInput!]
}

input RequirementUpdateDataInput {
  msg: String
}

input RequirementUpdateInput {
  msg: String
}

input RequirementUpdateManyDataInput {
  msg: String
}

input RequirementUpdateManyInput {
  create: [RequirementCreateInput!]
  update: [RequirementUpdateWithWhereUniqueNestedInput!]
  upsert: [RequirementUpsertWithWhereUniqueNestedInput!]
  delete: [RequirementWhereUniqueInput!]
  connect: [RequirementWhereUniqueInput!]
  set: [RequirementWhereUniqueInput!]
  disconnect: [RequirementWhereUniqueInput!]
  deleteMany: [RequirementScalarWhereInput!]
  updateMany: [RequirementUpdateManyWithWhereNestedInput!]
}

input RequirementUpdateManyMutationInput {
  msg: String
}

input RequirementUpdateManyWithWhereNestedInput {
  where: RequirementScalarWhereInput!
  data: RequirementUpdateManyDataInput!
}

input RequirementUpdateWithWhereUniqueNestedInput {
  where: RequirementWhereUniqueInput!
  data: RequirementUpdateDataInput!
}

input RequirementUpsertWithWhereUniqueNestedInput {
  where: RequirementWhereUniqueInput!
  update: RequirementUpdateDataInput!
  create: RequirementCreateInput!
}

input RequirementWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  msg: String
  msg_not: String
  msg_in: [String!]
  msg_not_in: [String!]
  msg_lt: String
  msg_lte: String
  msg_gt: String
  msg_gte: String
  msg_contains: String
  msg_not_contains: String
  msg_starts_with: String
  msg_not_starts_with: String
  msg_ends_with: String
  msg_not_ends_with: String
  AND: [RequirementWhereInput!]
  OR: [RequirementWhereInput!]
  NOT: [RequirementWhereInput!]
}

input RequirementWhereUniqueInput {
  id: ID
}

enum Role {
  USER
  GAMER
  ADMIN
}

type SavedCard {
  id: ID!
  user: User!
  cardId: String!
  default: Boolean!
  lastFour: String!
  brand: String!
}

type SavedCardConnection {
  pageInfo: PageInfo!
  edges: [SavedCardEdge]!
  aggregate: AggregateSavedCard!
}

input SavedCardCreateInput {
  user: UserCreateOneWithoutSavedCardsInput!
  cardId: String!
  default: Boolean!
  lastFour: String!
  brand: String!
}

input SavedCardCreateManyWithoutUserInput {
  create: [SavedCardCreateWithoutUserInput!]
  connect: [SavedCardWhereUniqueInput!]
}

input SavedCardCreateWithoutUserInput {
  cardId: String!
  default: Boolean!
  lastFour: String!
  brand: String!
}

type SavedCardEdge {
  node: SavedCard!
  cursor: String!
}

enum SavedCardOrderByInput {
  id_ASC
  id_DESC
  cardId_ASC
  cardId_DESC
  default_ASC
  default_DESC
  lastFour_ASC
  lastFour_DESC
  brand_ASC
  brand_DESC
}

type SavedCardPreviousValues {
  id: ID!
  cardId: String!
  default: Boolean!
  lastFour: String!
  brand: String!
}

input SavedCardScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  cardId: String
  cardId_not: String
  cardId_in: [String!]
  cardId_not_in: [String!]
  cardId_lt: String
  cardId_lte: String
  cardId_gt: String
  cardId_gte: String
  cardId_contains: String
  cardId_not_contains: String
  cardId_starts_with: String
  cardId_not_starts_with: String
  cardId_ends_with: String
  cardId_not_ends_with: String
  default: Boolean
  default_not: Boolean
  lastFour: String
  lastFour_not: String
  lastFour_in: [String!]
  lastFour_not_in: [String!]
  lastFour_lt: String
  lastFour_lte: String
  lastFour_gt: String
  lastFour_gte: String
  lastFour_contains: String
  lastFour_not_contains: String
  lastFour_starts_with: String
  lastFour_not_starts_with: String
  lastFour_ends_with: String
  lastFour_not_ends_with: String
  brand: String
  brand_not: String
  brand_in: [String!]
  brand_not_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_gt: String
  brand_gte: String
  brand_contains: String
  brand_not_contains: String
  brand_starts_with: String
  brand_not_starts_with: String
  brand_ends_with: String
  brand_not_ends_with: String
  AND: [SavedCardScalarWhereInput!]
  OR: [SavedCardScalarWhereInput!]
  NOT: [SavedCardScalarWhereInput!]
}

type SavedCardSubscriptionPayload {
  mutation: MutationType!
  node: SavedCard
  updatedFields: [String!]
  previousValues: SavedCardPreviousValues
}

input SavedCardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SavedCardWhereInput
  AND: [SavedCardSubscriptionWhereInput!]
  OR: [SavedCardSubscriptionWhereInput!]
  NOT: [SavedCardSubscriptionWhereInput!]
}

input SavedCardUpdateInput {
  user: UserUpdateOneRequiredWithoutSavedCardsInput
  cardId: String
  default: Boolean
  lastFour: String
  brand: String
}

input SavedCardUpdateManyDataInput {
  cardId: String
  default: Boolean
  lastFour: String
  brand: String
}

input SavedCardUpdateManyMutationInput {
  cardId: String
  default: Boolean
  lastFour: String
  brand: String
}

input SavedCardUpdateManyWithoutUserInput {
  create: [SavedCardCreateWithoutUserInput!]
  delete: [SavedCardWhereUniqueInput!]
  connect: [SavedCardWhereUniqueInput!]
  set: [SavedCardWhereUniqueInput!]
  disconnect: [SavedCardWhereUniqueInput!]
  update: [SavedCardUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SavedCardUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SavedCardScalarWhereInput!]
  updateMany: [SavedCardUpdateManyWithWhereNestedInput!]
}

input SavedCardUpdateManyWithWhereNestedInput {
  where: SavedCardScalarWhereInput!
  data: SavedCardUpdateManyDataInput!
}

input SavedCardUpdateWithoutUserDataInput {
  cardId: String
  default: Boolean
  lastFour: String
  brand: String
}

input SavedCardUpdateWithWhereUniqueWithoutUserInput {
  where: SavedCardWhereUniqueInput!
  data: SavedCardUpdateWithoutUserDataInput!
}

input SavedCardUpsertWithWhereUniqueWithoutUserInput {
  where: SavedCardWhereUniqueInput!
  update: SavedCardUpdateWithoutUserDataInput!
  create: SavedCardCreateWithoutUserInput!
}

input SavedCardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  cardId: String
  cardId_not: String
  cardId_in: [String!]
  cardId_not_in: [String!]
  cardId_lt: String
  cardId_lte: String
  cardId_gt: String
  cardId_gte: String
  cardId_contains: String
  cardId_not_contains: String
  cardId_starts_with: String
  cardId_not_starts_with: String
  cardId_ends_with: String
  cardId_not_ends_with: String
  default: Boolean
  default_not: Boolean
  lastFour: String
  lastFour_not: String
  lastFour_in: [String!]
  lastFour_not_in: [String!]
  lastFour_lt: String
  lastFour_lte: String
  lastFour_gt: String
  lastFour_gte: String
  lastFour_contains: String
  lastFour_not_contains: String
  lastFour_starts_with: String
  lastFour_not_starts_with: String
  lastFour_ends_with: String
  lastFour_not_ends_with: String
  brand: String
  brand_not: String
  brand_in: [String!]
  brand_not_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_gt: String
  brand_gte: String
  brand_contains: String
  brand_not_contains: String
  brand_starts_with: String
  brand_not_starts_with: String
  brand_ends_with: String
  brand_not_ends_with: String
  AND: [SavedCardWhereInput!]
  OR: [SavedCardWhereInput!]
  NOT: [SavedCardWhereInput!]
}

input SavedCardWhereUniqueInput {
  id: ID
}

type SessionReview {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  session: GamingSession!
  text: String!
  rating: Int!
}

type SessionReviewConnection {
  pageInfo: PageInfo!
  edges: [SessionReviewEdge]!
  aggregate: AggregateSessionReview!
}

input SessionReviewCreateInput {
  user: UserCreateOneWithoutReviewsInput!
  session: GamingSessionCreateOneWithoutReviewsInput!
  text: String!
  rating: Int!
}

input SessionReviewCreateManyWithoutSessionInput {
  create: [SessionReviewCreateWithoutSessionInput!]
  connect: [SessionReviewWhereUniqueInput!]
}

input SessionReviewCreateManyWithoutUserInput {
  create: [SessionReviewCreateWithoutUserInput!]
  connect: [SessionReviewWhereUniqueInput!]
}

input SessionReviewCreateOneInput {
  create: SessionReviewCreateInput
  connect: SessionReviewWhereUniqueInput
}

input SessionReviewCreateWithoutSessionInput {
  user: UserCreateOneWithoutReviewsInput!
  text: String!
  rating: Int!
}

input SessionReviewCreateWithoutUserInput {
  session: GamingSessionCreateOneWithoutReviewsInput!
  text: String!
  rating: Int!
}

type SessionReviewEdge {
  node: SessionReview!
  cursor: String!
}

type SessionReviewIndex {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  sessionReview: SessionReview!
}

type SessionReviewIndexConnection {
  pageInfo: PageInfo!
  edges: [SessionReviewIndexEdge]!
  aggregate: AggregateSessionReviewIndex!
}

input SessionReviewIndexCreateInput {
  text: String!
  sessionReview: SessionReviewCreateOneInput!
}

type SessionReviewIndexEdge {
  node: SessionReviewIndex!
  cursor: String!
}

enum SessionReviewIndexOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
}

type SessionReviewIndexPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
}

type SessionReviewIndexSubscriptionPayload {
  mutation: MutationType!
  node: SessionReviewIndex
  updatedFields: [String!]
  previousValues: SessionReviewIndexPreviousValues
}

input SessionReviewIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionReviewIndexWhereInput
  AND: [SessionReviewIndexSubscriptionWhereInput!]
  OR: [SessionReviewIndexSubscriptionWhereInput!]
  NOT: [SessionReviewIndexSubscriptionWhereInput!]
}

input SessionReviewIndexUpdateInput {
  text: String
  sessionReview: SessionReviewUpdateOneRequiredInput
}

input SessionReviewIndexUpdateManyMutationInput {
  text: String
}

input SessionReviewIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  sessionReview: SessionReviewWhereInput
  AND: [SessionReviewIndexWhereInput!]
  OR: [SessionReviewIndexWhereInput!]
  NOT: [SessionReviewIndexWhereInput!]
}

input SessionReviewIndexWhereUniqueInput {
  id: ID
}

enum SessionReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
  rating_ASC
  rating_DESC
}

type SessionReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  rating: Int!
}

input SessionReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  AND: [SessionReviewScalarWhereInput!]
  OR: [SessionReviewScalarWhereInput!]
  NOT: [SessionReviewScalarWhereInput!]
}

type SessionReviewSubscriptionPayload {
  mutation: MutationType!
  node: SessionReview
  updatedFields: [String!]
  previousValues: SessionReviewPreviousValues
}

input SessionReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionReviewWhereInput
  AND: [SessionReviewSubscriptionWhereInput!]
  OR: [SessionReviewSubscriptionWhereInput!]
  NOT: [SessionReviewSubscriptionWhereInput!]
}

input SessionReviewUpdateDataInput {
  user: UserUpdateOneRequiredWithoutReviewsInput
  session: GamingSessionUpdateOneRequiredWithoutReviewsInput
  text: String
  rating: Int
}

input SessionReviewUpdateInput {
  user: UserUpdateOneRequiredWithoutReviewsInput
  session: GamingSessionUpdateOneRequiredWithoutReviewsInput
  text: String
  rating: Int
}

input SessionReviewUpdateManyDataInput {
  text: String
  rating: Int
}

input SessionReviewUpdateManyMutationInput {
  text: String
  rating: Int
}

input SessionReviewUpdateManyWithoutSessionInput {
  create: [SessionReviewCreateWithoutSessionInput!]
  delete: [SessionReviewWhereUniqueInput!]
  connect: [SessionReviewWhereUniqueInput!]
  set: [SessionReviewWhereUniqueInput!]
  disconnect: [SessionReviewWhereUniqueInput!]
  update: [SessionReviewUpdateWithWhereUniqueWithoutSessionInput!]
  upsert: [SessionReviewUpsertWithWhereUniqueWithoutSessionInput!]
  deleteMany: [SessionReviewScalarWhereInput!]
  updateMany: [SessionReviewUpdateManyWithWhereNestedInput!]
}

input SessionReviewUpdateManyWithoutUserInput {
  create: [SessionReviewCreateWithoutUserInput!]
  delete: [SessionReviewWhereUniqueInput!]
  connect: [SessionReviewWhereUniqueInput!]
  set: [SessionReviewWhereUniqueInput!]
  disconnect: [SessionReviewWhereUniqueInput!]
  update: [SessionReviewUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SessionReviewUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SessionReviewScalarWhereInput!]
  updateMany: [SessionReviewUpdateManyWithWhereNestedInput!]
}

input SessionReviewUpdateManyWithWhereNestedInput {
  where: SessionReviewScalarWhereInput!
  data: SessionReviewUpdateManyDataInput!
}

input SessionReviewUpdateOneRequiredInput {
  create: SessionReviewCreateInput
  update: SessionReviewUpdateDataInput
  upsert: SessionReviewUpsertNestedInput
  connect: SessionReviewWhereUniqueInput
}

input SessionReviewUpdateWithoutSessionDataInput {
  user: UserUpdateOneRequiredWithoutReviewsInput
  text: String
  rating: Int
}

input SessionReviewUpdateWithoutUserDataInput {
  session: GamingSessionUpdateOneRequiredWithoutReviewsInput
  text: String
  rating: Int
}

input SessionReviewUpdateWithWhereUniqueWithoutSessionInput {
  where: SessionReviewWhereUniqueInput!
  data: SessionReviewUpdateWithoutSessionDataInput!
}

input SessionReviewUpdateWithWhereUniqueWithoutUserInput {
  where: SessionReviewWhereUniqueInput!
  data: SessionReviewUpdateWithoutUserDataInput!
}

input SessionReviewUpsertNestedInput {
  update: SessionReviewUpdateDataInput!
  create: SessionReviewCreateInput!
}

input SessionReviewUpsertWithWhereUniqueWithoutSessionInput {
  where: SessionReviewWhereUniqueInput!
  update: SessionReviewUpdateWithoutSessionDataInput!
  create: SessionReviewCreateWithoutSessionInput!
}

input SessionReviewUpsertWithWhereUniqueWithoutUserInput {
  where: SessionReviewWhereUniqueInput!
  update: SessionReviewUpdateWithoutUserDataInput!
  create: SessionReviewCreateWithoutUserInput!
}

input SessionReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  session: GamingSessionWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  AND: [SessionReviewWhereInput!]
  OR: [SessionReviewWhereInput!]
  NOT: [SessionReviewWhereInput!]
}

input SessionReviewWhereUniqueInput {
  id: ID
}

type SocialMedia {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

type SocialMediaConnection {
  pageInfo: PageInfo!
  edges: [SocialMediaEdge]!
  aggregate: AggregateSocialMedia!
}

input SocialMediaCreateInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaCreateOneInput {
  create: SocialMediaCreateInput
  connect: SocialMediaWhereUniqueInput
}

type SocialMediaEdge {
  node: SocialMedia!
  cursor: String!
}

enum SocialMediaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  twitter_ASC
  twitter_DESC
  facebook_ASC
  facebook_DESC
  youtube_ASC
  youtube_DESC
  instagram_ASC
  instagram_DESC
  twitch_ASC
  twitch_DESC
  snapchat_ASC
  snapchat_DESC
}

type SocialMediaPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

type SocialMediaSubscriptionPayload {
  mutation: MutationType!
  node: SocialMedia
  updatedFields: [String!]
  previousValues: SocialMediaPreviousValues
}

input SocialMediaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocialMediaWhereInput
  AND: [SocialMediaSubscriptionWhereInput!]
  OR: [SocialMediaSubscriptionWhereInput!]
  NOT: [SocialMediaSubscriptionWhereInput!]
}

input SocialMediaUpdateDataInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateManyMutationInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateOneRequiredInput {
  create: SocialMediaCreateInput
  update: SocialMediaUpdateDataInput
  upsert: SocialMediaUpsertNestedInput
  connect: SocialMediaWhereUniqueInput
}

input SocialMediaUpsertNestedInput {
  update: SocialMediaUpdateDataInput!
  create: SocialMediaCreateInput!
}

input SocialMediaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  twitter: String
  twitter_not: String
  twitter_in: [String!]
  twitter_not_in: [String!]
  twitter_lt: String
  twitter_lte: String
  twitter_gt: String
  twitter_gte: String
  twitter_contains: String
  twitter_not_contains: String
  twitter_starts_with: String
  twitter_not_starts_with: String
  twitter_ends_with: String
  twitter_not_ends_with: String
  facebook: String
  facebook_not: String
  facebook_in: [String!]
  facebook_not_in: [String!]
  facebook_lt: String
  facebook_lte: String
  facebook_gt: String
  facebook_gte: String
  facebook_contains: String
  facebook_not_contains: String
  facebook_starts_with: String
  facebook_not_starts_with: String
  facebook_ends_with: String
  facebook_not_ends_with: String
  youtube: String
  youtube_not: String
  youtube_in: [String!]
  youtube_not_in: [String!]
  youtube_lt: String
  youtube_lte: String
  youtube_gt: String
  youtube_gte: String
  youtube_contains: String
  youtube_not_contains: String
  youtube_starts_with: String
  youtube_not_starts_with: String
  youtube_ends_with: String
  youtube_not_ends_with: String
  instagram: String
  instagram_not: String
  instagram_in: [String!]
  instagram_not_in: [String!]
  instagram_lt: String
  instagram_lte: String
  instagram_gt: String
  instagram_gte: String
  instagram_contains: String
  instagram_not_contains: String
  instagram_starts_with: String
  instagram_not_starts_with: String
  instagram_ends_with: String
  instagram_not_ends_with: String
  twitch: String
  twitch_not: String
  twitch_in: [String!]
  twitch_not_in: [String!]
  twitch_lt: String
  twitch_lte: String
  twitch_gt: String
  twitch_gte: String
  twitch_contains: String
  twitch_not_contains: String
  twitch_starts_with: String
  twitch_not_starts_with: String
  twitch_ends_with: String
  twitch_not_ends_with: String
  snapchat: String
  snapchat_not: String
  snapchat_in: [String!]
  snapchat_not_in: [String!]
  snapchat_lt: String
  snapchat_lte: String
  snapchat_gt: String
  snapchat_gte: String
  snapchat_contains: String
  snapchat_not_contains: String
  snapchat_starts_with: String
  snapchat_not_starts_with: String
  snapchat_ends_with: String
  snapchat_not_ends_with: String
  AND: [SocialMediaWhereInput!]
  OR: [SocialMediaWhereInput!]
  NOT: [SocialMediaWhereInput!]
}

input SocialMediaWhereUniqueInput {
  id: ID
}

type Subscription {
  bookedPlayer(where: BookedPlayerSubscriptionWhereInput): BookedPlayerSubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  bookingInvite(where: BookingInviteSubscriptionWhereInput): BookingInviteSubscriptionPayload
  discount(where: DiscountSubscriptionWhereInput): DiscountSubscriptionPayload
  friendRequest(where: FriendRequestSubscriptionWhereInput): FriendRequestSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  gameIndex(where: GameIndexSubscriptionWhereInput): GameIndexSubscriptionPayload
  gamerRequest(where: GamerRequestSubscriptionWhereInput): GamerRequestSubscriptionPayload
  gamerTag(where: GamerTagSubscriptionWhereInput): GamerTagSubscriptionPayload
  gamingSession(where: GamingSessionSubscriptionWhereInput): GamingSessionSubscriptionPayload
  gamingSessionIndex(where: GamingSessionIndexSubscriptionWhereInput): GamingSessionIndexSubscriptionPayload
  gamingTimeSlot(where: GamingTimeSlotSubscriptionWhereInput): GamingTimeSlotSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  pCLauncher(where: PCLauncherSubscriptionWhereInput): PCLauncherSubscriptionPayload
  requirement(where: RequirementSubscriptionWhereInput): RequirementSubscriptionPayload
  savedCard(where: SavedCardSubscriptionWhereInput): SavedCardSubscriptionPayload
  sessionReview(where: SessionReviewSubscriptionWhereInput): SessionReviewSubscriptionPayload
  sessionReviewIndex(where: SessionReviewIndexSubscriptionWhereInput): SessionReviewIndexSubscriptionPayload
  socialMedia(where: SocialMediaSubscriptionWhereInput): SocialMediaSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userIndex(where: UserIndexSubscriptionWhereInput): UserIndexSubscriptionPayload
}

enum System {
  PS4
  PC
  XBOX_ONE
  NINTENDO_SWITCH
}

enum Tags {
  ACTION
  ADVENTURE_GAME
  CARD_AND_BOARD_GAME
  COMPILATION
  DRIVING_SLASH_RACING_GAME
  EDUCATIONAL_GAME
  FIGHTING
  FLIGHT_SIMULATOR
  FPS
  GAMBLING_GAME
  HIDDEN_OBJECTS
  HORROR
  INDIE_GAME
  METROIDVANIA
  MMORPG
  MOBA
  OPEN_WORLD
  PINBALL
  PLATFORMER
  POINT_AND_CLICK
  PUZZLE
  RHYTHM_AND_MUSIC_GAME
  ROGUELIKE
  RPG
  RTS
  SERIES_COLON_SOULS
  SHOOT_HYPHEN_EM_UP
  SHOOTER
  SIMULATION
  SPORTS_GAME
  STEALTH
  STRATEGY
  SURVIVAL
  VISUAL_NOVEL
}

enum TypeOfGame {
  CUSTOM
  CASUAL
  COMPETITIVE
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gender: Gender!
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean!
  occupations: [Occupations!]!
  name: String!
  aboutMe: String
  sessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession!]
  timeSlots(where: GamingTimeSlotWhereInput, orderBy: GamingTimeSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingTimeSlot!]
  invites(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookingInvite!]
  savedCards(where: SavedCardWhereInput, orderBy: SavedCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SavedCard!]
  invitesReceived(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookingInvite!]
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReview!]
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  gamertags: GamerTag
  role: Role!
  index: UserIndex!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  invites: BookingInviteCreateManyWithoutFromInput
  savedCards: SavedCardCreateManyWithoutUserInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
  role: Role
  index: UserIndexCreateOneWithoutUserInput!
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSessionsInput {
  create: [UserCreateWithoutSessionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTimeSlotsInput {
  create: [UserCreateWithoutTimeSlotsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateoccupationsInput {
  set: [Occupations!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGamertagsInput {
  create: UserCreateWithoutGamertagsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutIndexInput {
  create: UserCreateWithoutIndexInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInvitesInput {
  create: UserCreateWithoutInvitesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInvitesReceivedInput {
  create: UserCreateWithoutInvitesReceivedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSavedCardsInput {
  create: UserCreateWithoutSavedCardsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGamertagsInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  invites: BookingInviteCreateManyWithoutFromInput
  savedCards: SavedCardCreateManyWithoutUserInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  role: Role
  index: UserIndexCreateOneWithoutUserInput!
}

input UserCreateWithoutIndexInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  invites: BookingInviteCreateManyWithoutFromInput
  savedCards: SavedCardCreateManyWithoutUserInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
  role: Role
}

input UserCreateWithoutInvitesInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  savedCards: SavedCardCreateManyWithoutUserInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
  role: Role
  index: UserIndexCreateOneWithoutUserInput!
}

input UserCreateWithoutInvitesReceivedInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  invites: BookingInviteCreateManyWithoutFromInput
  savedCards: SavedCardCreateManyWithoutUserInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
  role: Role
  index: UserIndexCreateOneWithoutUserInput!
}

input UserCreateWithoutReviewsInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  invites: BookingInviteCreateManyWithoutFromInput
  savedCards: SavedCardCreateManyWithoutUserInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
  role: Role
  index: UserIndexCreateOneWithoutUserInput!
}

input UserCreateWithoutSavedCardsInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  invites: BookingInviteCreateManyWithoutFromInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
  role: Role
  index: UserIndexCreateOneWithoutUserInput!
}

input UserCreateWithoutSessionsInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  invites: BookingInviteCreateManyWithoutFromInput
  savedCards: SavedCardCreateManyWithoutUserInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
  role: Role
  index: UserIndexCreateOneWithoutUserInput!
}

input UserCreateWithoutTimeSlotsInput {
  gender: Gender
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  invites: BookingInviteCreateManyWithoutFromInput
  savedCards: SavedCardCreateManyWithoutUserInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
  role: Role
  index: UserIndexCreateOneWithoutUserInput!
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserIndex {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String!
  displayName: String
  name: String!
  user: User!
}

type UserIndexConnection {
  pageInfo: PageInfo!
  edges: [UserIndexEdge]!
  aggregate: AggregateUserIndex!
}

input UserIndexCreateInput {
  email: String!
  username: String!
  displayName: String
  name: String!
  user: UserCreateOneWithoutIndexInput!
}

input UserIndexCreateOneWithoutUserInput {
  create: UserIndexCreateWithoutUserInput
  connect: UserIndexWhereUniqueInput
}

input UserIndexCreateWithoutUserInput {
  email: String!
  username: String!
  displayName: String
  name: String!
}

type UserIndexEdge {
  node: UserIndex!
  cursor: String!
}

enum UserIndexOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  displayName_ASC
  displayName_DESC
  name_ASC
  name_DESC
}

type UserIndexPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String!
  displayName: String
  name: String!
}

type UserIndexSubscriptionPayload {
  mutation: MutationType!
  node: UserIndex
  updatedFields: [String!]
  previousValues: UserIndexPreviousValues
}

input UserIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserIndexWhereInput
  AND: [UserIndexSubscriptionWhereInput!]
  OR: [UserIndexSubscriptionWhereInput!]
  NOT: [UserIndexSubscriptionWhereInput!]
}

input UserIndexUpdateInput {
  email: String
  username: String
  displayName: String
  name: String
  user: UserUpdateOneRequiredWithoutIndexInput
}

input UserIndexUpdateManyMutationInput {
  email: String
  username: String
  displayName: String
  name: String
}

input UserIndexUpdateOneRequiredWithoutUserInput {
  create: UserIndexCreateWithoutUserInput
  update: UserIndexUpdateWithoutUserDataInput
  upsert: UserIndexUpsertWithoutUserInput
  connect: UserIndexWhereUniqueInput
}

input UserIndexUpdateWithoutUserDataInput {
  email: String
  username: String
  displayName: String
  name: String
}

input UserIndexUpsertWithoutUserInput {
  update: UserIndexUpdateWithoutUserDataInput!
  create: UserIndexCreateWithoutUserInput!
}

input UserIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  user: UserWhereInput
  AND: [UserIndexWhereInput!]
  OR: [UserIndexWhereInput!]
  NOT: [UserIndexWhereInput!]
}

input UserIndexWhereUniqueInput {
  id: ID
  email: String
  username: String
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  gender_ASC
  gender_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  displayName_ASC
  displayName_DESC
  password_ASC
  password_DESC
  profilePicture_ASC
  profilePicture_DESC
  banner_ASC
  banner_DESC
  connectedStripeId_ASC
  connectedStripeId_DESC
  customerStripeId_ASC
  customerStripeId_DESC
  gamerIsSetup_ASC
  gamerIsSetup_DESC
  name_ASC
  name_DESC
  aboutMe_ASC
  aboutMe_DESC
  setup_ASC
  setup_DESC
  resetPasswordToken_ASC
  resetPasswordToken_DESC
  resetPasswordExpires_ASC
  resetPasswordExpires_DESC
  views_ASC
  views_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gender: Gender!
  email: String!
  username: String!
  displayName: String!
  password: String!
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean!
  occupations: [Occupations!]!
  name: String!
  aboutMe: String
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  role: Role!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  profilePicture: String
  profilePicture_not: String
  profilePicture_in: [String!]
  profilePicture_not_in: [String!]
  profilePicture_lt: String
  profilePicture_lte: String
  profilePicture_gt: String
  profilePicture_gte: String
  profilePicture_contains: String
  profilePicture_not_contains: String
  profilePicture_starts_with: String
  profilePicture_not_starts_with: String
  profilePicture_ends_with: String
  profilePicture_not_ends_with: String
  banner: String
  banner_not: String
  banner_in: [String!]
  banner_not_in: [String!]
  banner_lt: String
  banner_lte: String
  banner_gt: String
  banner_gte: String
  banner_contains: String
  banner_not_contains: String
  banner_starts_with: String
  banner_not_starts_with: String
  banner_ends_with: String
  banner_not_ends_with: String
  connectedStripeId: String
  connectedStripeId_not: String
  connectedStripeId_in: [String!]
  connectedStripeId_not_in: [String!]
  connectedStripeId_lt: String
  connectedStripeId_lte: String
  connectedStripeId_gt: String
  connectedStripeId_gte: String
  connectedStripeId_contains: String
  connectedStripeId_not_contains: String
  connectedStripeId_starts_with: String
  connectedStripeId_not_starts_with: String
  connectedStripeId_ends_with: String
  connectedStripeId_not_ends_with: String
  customerStripeId: String
  customerStripeId_not: String
  customerStripeId_in: [String!]
  customerStripeId_not_in: [String!]
  customerStripeId_lt: String
  customerStripeId_lte: String
  customerStripeId_gt: String
  customerStripeId_gte: String
  customerStripeId_contains: String
  customerStripeId_not_contains: String
  customerStripeId_starts_with: String
  customerStripeId_not_starts_with: String
  customerStripeId_ends_with: String
  customerStripeId_not_ends_with: String
  gamerIsSetup: Boolean
  gamerIsSetup_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  aboutMe: String
  aboutMe_not: String
  aboutMe_in: [String!]
  aboutMe_not_in: [String!]
  aboutMe_lt: String
  aboutMe_lte: String
  aboutMe_gt: String
  aboutMe_gte: String
  aboutMe_contains: String
  aboutMe_not_contains: String
  aboutMe_starts_with: String
  aboutMe_not_starts_with: String
  aboutMe_ends_with: String
  aboutMe_not_ends_with: String
  setup: Int
  setup_not: Int
  setup_in: [Int!]
  setup_not_in: [Int!]
  setup_lt: Int
  setup_lte: Int
  setup_gt: Int
  setup_gte: Int
  resetPasswordToken: String
  resetPasswordToken_not: String
  resetPasswordToken_in: [String!]
  resetPasswordToken_not_in: [String!]
  resetPasswordToken_lt: String
  resetPasswordToken_lte: String
  resetPasswordToken_gt: String
  resetPasswordToken_gte: String
  resetPasswordToken_contains: String
  resetPasswordToken_not_contains: String
  resetPasswordToken_starts_with: String
  resetPasswordToken_not_starts_with: String
  resetPasswordToken_ends_with: String
  resetPasswordToken_not_ends_with: String
  resetPasswordExpires: DateTime
  resetPasswordExpires_not: DateTime
  resetPasswordExpires_in: [DateTime!]
  resetPasswordExpires_not_in: [DateTime!]
  resetPasswordExpires_lt: DateTime
  resetPasswordExpires_lte: DateTime
  resetPasswordExpires_gt: DateTime
  resetPasswordExpires_gte: DateTime
  views: Int
  views_not: Int
  views_in: [Int!]
  views_not_in: [Int!]
  views_lt: Int
  views_lte: Int
  views_gt: Int
  views_gte: Int
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateManyDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  role: Role
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  role: Role
}

input UserUpdateManyWithoutSessionsInput {
  create: [UserCreateWithoutSessionsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSessionsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSessionsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutTimeSlotsInput {
  create: [UserCreateWithoutTimeSlotsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTimeSlotsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTimeSlotsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateoccupationsInput {
  set: [Occupations!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutGamertagsInput {
  create: UserCreateWithoutGamertagsInput
  update: UserUpdateWithoutGamertagsDataInput
  upsert: UserUpsertWithoutGamertagsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutIndexInput {
  create: UserCreateWithoutIndexInput
  update: UserUpdateWithoutIndexDataInput
  upsert: UserUpsertWithoutIndexInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutInvitesInput {
  create: UserCreateWithoutInvitesInput
  update: UserUpdateWithoutInvitesDataInput
  upsert: UserUpsertWithoutInvitesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSavedCardsInput {
  create: UserCreateWithoutSavedCardsInput
  update: UserUpdateWithoutSavedCardsDataInput
  upsert: UserUpsertWithoutSavedCardsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutInvitesReceivedInput {
  create: UserCreateWithoutInvitesReceivedInput
  update: UserUpdateWithoutInvitesReceivedDataInput
  upsert: UserUpsertWithoutInvitesReceivedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGamertagsDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithoutIndexDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
}

input UserUpdateWithoutInvitesDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithoutInvitesReceivedDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithoutReviewsDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithoutSavedCardsDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithoutSessionsDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithoutTimeSlotsDataInput {
  gender: Gender
  email: String
  username: String
  displayName: String
  password: String
  profilePicture: String
  banner: String
  connectedStripeId: String
  customerStripeId: String
  gamerIsSetup: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  savedCards: SavedCardUpdateManyWithoutUserInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  setup: Int
  resetPasswordToken: String
  resetPasswordExpires: DateTime
  views: Int
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
  role: Role
  index: UserIndexUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutSessionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSessionsDataInput!
}

input UserUpdateWithWhereUniqueWithoutTimeSlotsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTimeSlotsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutGamertagsInput {
  update: UserUpdateWithoutGamertagsDataInput!
  create: UserCreateWithoutGamertagsInput!
}

input UserUpsertWithoutIndexInput {
  update: UserUpdateWithoutIndexDataInput!
  create: UserCreateWithoutIndexInput!
}

input UserUpsertWithoutInvitesInput {
  update: UserUpdateWithoutInvitesDataInput!
  create: UserCreateWithoutInvitesInput!
}

input UserUpsertWithoutInvitesReceivedInput {
  update: UserUpdateWithoutInvitesReceivedDataInput!
  create: UserCreateWithoutInvitesReceivedInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithoutSavedCardsInput {
  update: UserUpdateWithoutSavedCardsDataInput!
  create: UserCreateWithoutSavedCardsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutSessionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSessionsDataInput!
  create: UserCreateWithoutSessionsInput!
}

input UserUpsertWithWhereUniqueWithoutTimeSlotsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTimeSlotsDataInput!
  create: UserCreateWithoutTimeSlotsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  profilePicture: String
  profilePicture_not: String
  profilePicture_in: [String!]
  profilePicture_not_in: [String!]
  profilePicture_lt: String
  profilePicture_lte: String
  profilePicture_gt: String
  profilePicture_gte: String
  profilePicture_contains: String
  profilePicture_not_contains: String
  profilePicture_starts_with: String
  profilePicture_not_starts_with: String
  profilePicture_ends_with: String
  profilePicture_not_ends_with: String
  banner: String
  banner_not: String
  banner_in: [String!]
  banner_not_in: [String!]
  banner_lt: String
  banner_lte: String
  banner_gt: String
  banner_gte: String
  banner_contains: String
  banner_not_contains: String
  banner_starts_with: String
  banner_not_starts_with: String
  banner_ends_with: String
  banner_not_ends_with: String
  connectedStripeId: String
  connectedStripeId_not: String
  connectedStripeId_in: [String!]
  connectedStripeId_not_in: [String!]
  connectedStripeId_lt: String
  connectedStripeId_lte: String
  connectedStripeId_gt: String
  connectedStripeId_gte: String
  connectedStripeId_contains: String
  connectedStripeId_not_contains: String
  connectedStripeId_starts_with: String
  connectedStripeId_not_starts_with: String
  connectedStripeId_ends_with: String
  connectedStripeId_not_ends_with: String
  customerStripeId: String
  customerStripeId_not: String
  customerStripeId_in: [String!]
  customerStripeId_not_in: [String!]
  customerStripeId_lt: String
  customerStripeId_lte: String
  customerStripeId_gt: String
  customerStripeId_gte: String
  customerStripeId_contains: String
  customerStripeId_not_contains: String
  customerStripeId_starts_with: String
  customerStripeId_not_starts_with: String
  customerStripeId_ends_with: String
  customerStripeId_not_ends_with: String
  gamerIsSetup: Boolean
  gamerIsSetup_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  aboutMe: String
  aboutMe_not: String
  aboutMe_in: [String!]
  aboutMe_not_in: [String!]
  aboutMe_lt: String
  aboutMe_lte: String
  aboutMe_gt: String
  aboutMe_gte: String
  aboutMe_contains: String
  aboutMe_not_contains: String
  aboutMe_starts_with: String
  aboutMe_not_starts_with: String
  aboutMe_ends_with: String
  aboutMe_not_ends_with: String
  sessions_every: GamingSessionWhereInput
  sessions_some: GamingSessionWhereInput
  sessions_none: GamingSessionWhereInput
  timeSlots_every: GamingTimeSlotWhereInput
  timeSlots_some: GamingTimeSlotWhereInput
  timeSlots_none: GamingTimeSlotWhereInput
  invites_every: BookingInviteWhereInput
  invites_some: BookingInviteWhereInput
  invites_none: BookingInviteWhereInput
  savedCards_every: SavedCardWhereInput
  savedCards_some: SavedCardWhereInput
  savedCards_none: SavedCardWhereInput
  invitesReceived_every: BookingInviteWhereInput
  invitesReceived_some: BookingInviteWhereInput
  invitesReceived_none: BookingInviteWhereInput
  setup: Int
  setup_not: Int
  setup_in: [Int!]
  setup_not_in: [Int!]
  setup_lt: Int
  setup_lte: Int
  setup_gt: Int
  setup_gte: Int
  resetPasswordToken: String
  resetPasswordToken_not: String
  resetPasswordToken_in: [String!]
  resetPasswordToken_not_in: [String!]
  resetPasswordToken_lt: String
  resetPasswordToken_lte: String
  resetPasswordToken_gt: String
  resetPasswordToken_gte: String
  resetPasswordToken_contains: String
  resetPasswordToken_not_contains: String
  resetPasswordToken_starts_with: String
  resetPasswordToken_not_starts_with: String
  resetPasswordToken_ends_with: String
  resetPasswordToken_not_ends_with: String
  resetPasswordExpires: DateTime
  resetPasswordExpires_not: DateTime
  resetPasswordExpires_in: [DateTime!]
  resetPasswordExpires_not_in: [DateTime!]
  resetPasswordExpires_lt: DateTime
  resetPasswordExpires_lte: DateTime
  resetPasswordExpires_gt: DateTime
  resetPasswordExpires_gte: DateTime
  views: Int
  views_not: Int
  views_in: [Int!]
  views_not_in: [Int!]
  views_lt: Int
  views_lte: Int
  views_gt: Int
  views_gte: Int
  reviews_every: SessionReviewWhereInput
  reviews_some: SessionReviewWhereInput
  reviews_none: SessionReviewWhereInput
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
  gamertags: GamerTagWhereInput
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  index: UserIndexWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
