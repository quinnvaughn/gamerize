# import * from './generated/prisma.graphql'

type Query {
  me: User
  allGames(first: Int, orderBy: String): [Game!]!
  todaySessions: [IndividualGamingSession!]!
  thatDaySessions(day: DateTime!): [IndividualGamingSession!]!
  nextSession: IndividualGamingSession!
  getGamers(first: Int): [User!]!
}

type Mutation {
  signup(input: SignupInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  createGamerRequest(
    input: CreateGamerRequestInput!
  ): CreateGamerRequestPayload!
  respondToGamerRequest(
    input: RespondToGamerRequestInput!
  ): RespondToGamerRequestPayload!
  createGame(input: CreateGameInput!): CreateGamePayload!
  createGamingSession(
    input: CreateGamingSessionInput!
  ): CreateGamingSessionPayload!
  createIndividualGamingSession(
    input: CreateIndividualGamingSessionInput!
  ): CreateIndividualGamingSessionPayload!
  createBulkSessions(
    input: CreateBulkSessionsInput!
  ): CreateBulkSessionsPayload!
  addMinutesToSession(
    input: AddMinutesToSessionInput!
  ): AddMinutesToSessionPayload!
  cancelSession(input: CancelSessionInput!): CancelSessionPayload!
  updateSession(input: UpdateSessionInput!): UpdateSessionPayload!
}

input UpdateSessionInput {
  sessionId: String!
  title: String
  game: String
  price: Float
  length: Int
  systems: [System!]!
  slots: Int
  type: TypeOfGame
}

type UpdateSessionPayload {
  updatedSession: GamingSession!
}

input CancelSessionInput {
  sessionId: String!
}

type CancelSessionPayload {
  cancelled: Boolean!
}

input AddMinutesToSessionInput {
  sessionId: String!
  minutes: Int!
}

type AddMinutesToSessionPayload {
  updatedSession: IndividualGamingSession!
}

type AuthPayload {
  token: String!
  user: User!
}

input SocialMediaInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input CreateBulkSessionsInput {
  startTime: DateTime!
  endTime: DateTime!
  gamingSessionId: String!
}

type CreateBulkSessionsPayload {
  created: Boolean!
  overlaps: [IndividualGamingSession!]!
  sessions: [IndividualGamingSession!]!
  successMsg: [String!]!
  errorMsg: String
}

input CreateGamerRequestInput {
  occupations: [Occupations!]!
  addToOccupations: String
  socialMedia: SocialMediaInput!
}

input CreateIndividualGamingSessionInput {
  startTime: DateTime!
  gamingSessionId: String!
}

type CreateIndividualGamingSessionPayload {
  created: Boolean!
  overlap: Boolean
  individualGamingSession: IndividualGamingSession
  successMsg: String
  errorMsg: String
}

input CreateGamingSessionInput {
  game: String!
  title: String!
  length: Int!
  price: Int!
  type: TypeOfGame!
  slots: Int!
  systems: [System!]!
}

input RequirementInput {
  msg: String!
}

input DiscountInput {
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

type CreateGamingSessionPayload {
  gamingSession: GamingSession
  msg: String
  created: Boolean!
}

type CreateGamerRequestPayload {
  created: Boolean!
  request: GamerRequest
  msg: String
}

input RespondToGamerRequestInput {
  gamerRequestId: String!
  userId: String!
  decision: Decision!
}

input CreateGameInput {
  tags: [Tags!]!
  name: String!
}

type CreateGamePayload {
  created: Boolean!
  game: Game
  msg: String
}

enum Decision {
  ACCEPT
  DENY
}

type RespondToGamerRequestPayload {
  responded: Boolean!
  msg: String
}

input SignupInput {
  email: String!
  password: String!
  name: String!
  username: String!
}

input LoginInput {
  email: String!
  password: String!
}

type User {
  id: ID!
  email: String!
  name: String!
  username: String!
  currentGamerRequest: Boolean!
  isGamer: Boolean!
  sessions: [GamingSession!]!
  individualSessions: [IndividualGamingSession!]!
  sessionIsGoingOn: SessionIsGoingOn
  buffer: Int
  favoriteGames: [Game!]!
  occupations: [Occupations!]!
  aboutMe: String
}

type SessionIsGoingOn {
  goingOn: Boolean!
  session: IndividualGamingSession
}

type GamingSession {
  id: ID!
  gamers: [User!]!
  game: Game!
  title: String!
  length: Int!
  price: Float!
  reviews: [SessionReview!]!
  systems: [System!]!
  type: TypeOfGame!
  slots: Int!
  requirements: [Requirement!]!
  discounts: [Discount!]!
  sessions: [IndividualGamingSession!]!
  slotsLeftToday: Int!
}

type IndividualGamingSession {
  id: ID!
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSession!
  ## gaming session also has this info, but this way the user doesn't have to go through that
  ## to get to this info.
  gamers: [User!]!
  players: [User!]!
  slots: Int!
  finished: Boolean!
  full: Boolean!
}
