# source: http://localhost:4466
# timestamp: Sat Apr 06 2019 14:35:36 GMT-0500 (CDT)

type AggregateBookedPlayer {
  count: Int!
}

type AggregateBooking {
  count: Int!
}

type AggregateBookingInvite {
  count: Int!
}

type AggregateDiscount {
  count: Int!
}

type AggregateFriendRequest {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateGameIndex {
  count: Int!
}

type AggregateGamerRequest {
  count: Int!
}

type AggregateGamerTag {
  count: Int!
}

type AggregateGamingSession {
  count: Int!
}

type AggregateGamingSessionIndex {
  count: Int!
}

type AggregateGamingTimeSlot {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePCLauncher {
  count: Int!
}

type AggregateRequirement {
  count: Int!
}

type AggregateSessionReview {
  count: Int!
}

type AggregateSessionReviewIndex {
  count: Int!
}

type AggregateSocialMedia {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserIndex {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type BookedPlayer implements Node {
  id: ID!
  player: User!
  timeslot: GamingTimeSlot!
}

"""A connection to a list of items."""
type BookedPlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookedPlayerEdge]!
  aggregate: AggregateBookedPlayer!
}

input BookedPlayerCreateInput {
  player: UserCreateOneInput!
  timeslot: GamingTimeSlotCreateOneWithoutPlayersInput!
}

input BookedPlayerCreateManyWithoutTimeslotInput {
  create: [BookedPlayerCreateWithoutTimeslotInput!]
  connect: [BookedPlayerWhereUniqueInput!]
}

input BookedPlayerCreateWithoutTimeslotInput {
  player: UserCreateOneInput!
}

"""An edge in a connection."""
type BookedPlayerEdge {
  """The item at the end of the edge."""
  node: BookedPlayer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookedPlayerOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookedPlayerPreviousValues {
  id: ID!
}

input BookedPlayerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookedPlayerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookedPlayerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookedPlayerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type BookedPlayerSubscriptionPayload {
  mutation: MutationType!
  node: BookedPlayer
  updatedFields: [String!]
  previousValues: BookedPlayerPreviousValues
}

input BookedPlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookedPlayerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookedPlayerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookedPlayerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookedPlayerWhereInput
}

input BookedPlayerUpdateInput {
  player: UserUpdateOneRequiredInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutPlayersInput
}

input BookedPlayerUpdateManyWithoutTimeslotInput {
  create: [BookedPlayerCreateWithoutTimeslotInput!]
  connect: [BookedPlayerWhereUniqueInput!]
  set: [BookedPlayerWhereUniqueInput!]
  disconnect: [BookedPlayerWhereUniqueInput!]
  delete: [BookedPlayerWhereUniqueInput!]
  update: [BookedPlayerUpdateWithWhereUniqueWithoutTimeslotInput!]
  deleteMany: [BookedPlayerScalarWhereInput!]
  upsert: [BookedPlayerUpsertWithWhereUniqueWithoutTimeslotInput!]
}

input BookedPlayerUpdateWithoutTimeslotDataInput {
  player: UserUpdateOneRequiredInput
}

input BookedPlayerUpdateWithWhereUniqueWithoutTimeslotInput {
  where: BookedPlayerWhereUniqueInput!
  data: BookedPlayerUpdateWithoutTimeslotDataInput!
}

input BookedPlayerUpsertWithWhereUniqueWithoutTimeslotInput {
  where: BookedPlayerWhereUniqueInput!
  update: BookedPlayerUpdateWithoutTimeslotDataInput!
  create: BookedPlayerCreateWithoutTimeslotInput!
}

input BookedPlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [BookedPlayerWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookedPlayerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookedPlayerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  player: UserWhereInput
  timeslot: GamingTimeSlotWhereInput
}

input BookedPlayerWhereUniqueInput {
  id: ID
}

type Booking implements Node {
  id: ID!
  numSlots: Int!
  numPlayers: Int!
  players(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  total: Float!
  bookee: User!
  timeslot: GamingTimeSlot!
  invites(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookingInvite!]
  cancelled: Boolean
}

"""A connection to a list of items."""
type BookingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  numSlots: Int!
  numPlayers: Int!
  total: Float!
  cancelled: Boolean
  players: UserCreateManyWithoutTimeSlotsPlayedInput
  bookee: UserCreateOneWithoutTimeSlotsBookedInput!
  timeslot: GamingTimeSlotCreateOneWithoutBookingsInput!
  invites: BookingInviteCreateManyWithoutBookingInput
}

input BookingCreateManyWithoutBookeeInput {
  create: [BookingCreateWithoutBookeeInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateManyWithoutPlayersInput {
  create: [BookingCreateWithoutPlayersInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateManyWithoutTimeslotInput {
  create: [BookingCreateWithoutTimeslotInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateOneInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
}

input BookingCreateOneWithoutInvitesInput {
  create: BookingCreateWithoutInvitesInput
  connect: BookingWhereUniqueInput
}

input BookingCreateWithoutBookeeInput {
  numSlots: Int!
  numPlayers: Int!
  total: Float!
  cancelled: Boolean
  players: UserCreateManyWithoutTimeSlotsPlayedInput
  timeslot: GamingTimeSlotCreateOneWithoutBookingsInput!
  invites: BookingInviteCreateManyWithoutBookingInput
}

input BookingCreateWithoutInvitesInput {
  numSlots: Int!
  numPlayers: Int!
  total: Float!
  cancelled: Boolean
  players: UserCreateManyWithoutTimeSlotsPlayedInput
  bookee: UserCreateOneWithoutTimeSlotsBookedInput!
  timeslot: GamingTimeSlotCreateOneWithoutBookingsInput!
}

input BookingCreateWithoutPlayersInput {
  numSlots: Int!
  numPlayers: Int!
  total: Float!
  cancelled: Boolean
  bookee: UserCreateOneWithoutTimeSlotsBookedInput!
  timeslot: GamingTimeSlotCreateOneWithoutBookingsInput!
  invites: BookingInviteCreateManyWithoutBookingInput
}

input BookingCreateWithoutTimeslotInput {
  numSlots: Int!
  numPlayers: Int!
  total: Float!
  cancelled: Boolean
  players: UserCreateManyWithoutTimeSlotsPlayedInput
  bookee: UserCreateOneWithoutTimeSlotsBookedInput!
  invites: BookingInviteCreateManyWithoutBookingInput
}

"""An edge in a connection."""
type BookingEdge {
  """The item at the end of the edge."""
  node: Booking!

  """A cursor for use in pagination."""
  cursor: String!
}

type BookingInvite implements Node {
  id: ID!
  startTime: DateTime!
  booking: Booking!
  to: User
  from: User!
  sent: Boolean!
  accepted: Boolean
  notification: Notification
}

"""A connection to a list of items."""
type BookingInviteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookingInviteEdge]!
  aggregate: AggregateBookingInvite!
}

input BookingInviteCreateInput {
  startTime: DateTime!
  sent: Boolean!
  accepted: Boolean
  booking: BookingCreateOneWithoutInvitesInput!
  to: UserCreateOneWithoutInvitesReceivedInput
  from: UserCreateOneWithoutInvitesInput!
  notification: NotificationCreateOneWithoutBookingInviteInput
}

input BookingInviteCreateManyWithoutBookingInput {
  create: [BookingInviteCreateWithoutBookingInput!]
  connect: [BookingInviteWhereUniqueInput!]
}

input BookingInviteCreateManyWithoutFromInput {
  create: [BookingInviteCreateWithoutFromInput!]
  connect: [BookingInviteWhereUniqueInput!]
}

input BookingInviteCreateManyWithoutToInput {
  create: [BookingInviteCreateWithoutToInput!]
  connect: [BookingInviteWhereUniqueInput!]
}

input BookingInviteCreateOneWithoutNotificationInput {
  create: BookingInviteCreateWithoutNotificationInput
  connect: BookingInviteWhereUniqueInput
}

input BookingInviteCreateWithoutBookingInput {
  startTime: DateTime!
  sent: Boolean!
  accepted: Boolean
  to: UserCreateOneWithoutInvitesReceivedInput
  from: UserCreateOneWithoutInvitesInput!
  notification: NotificationCreateOneWithoutBookingInviteInput
}

input BookingInviteCreateWithoutFromInput {
  startTime: DateTime!
  sent: Boolean!
  accepted: Boolean
  booking: BookingCreateOneWithoutInvitesInput!
  to: UserCreateOneWithoutInvitesReceivedInput
  notification: NotificationCreateOneWithoutBookingInviteInput
}

input BookingInviteCreateWithoutNotificationInput {
  startTime: DateTime!
  sent: Boolean!
  accepted: Boolean
  booking: BookingCreateOneWithoutInvitesInput!
  to: UserCreateOneWithoutInvitesReceivedInput
  from: UserCreateOneWithoutInvitesInput!
}

input BookingInviteCreateWithoutToInput {
  startTime: DateTime!
  sent: Boolean!
  accepted: Boolean
  booking: BookingCreateOneWithoutInvitesInput!
  from: UserCreateOneWithoutInvitesInput!
  notification: NotificationCreateOneWithoutBookingInviteInput
}

"""An edge in a connection."""
type BookingInviteEdge {
  """The item at the end of the edge."""
  node: BookingInvite!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookingInviteOrderByInput {
  id_ASC
  id_DESC
  startTime_ASC
  startTime_DESC
  sent_ASC
  sent_DESC
  accepted_ASC
  accepted_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookingInvitePreviousValues {
  id: ID!
  startTime: DateTime!
  sent: Boolean!
  accepted: Boolean
}

input BookingInviteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingInviteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingInviteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingInviteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  sent: Boolean

  """All values that are not equal to given value."""
  sent_not: Boolean
  accepted: Boolean

  """All values that are not equal to given value."""
  accepted_not: Boolean
}

type BookingInviteSubscriptionPayload {
  mutation: MutationType!
  node: BookingInvite
  updatedFields: [String!]
  previousValues: BookingInvitePreviousValues
}

input BookingInviteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingInviteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingInviteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingInviteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookingInviteWhereInput
}

input BookingInviteUpdateInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
  booking: BookingUpdateOneRequiredWithoutInvitesInput
  to: UserUpdateOneWithoutInvitesReceivedInput
  from: UserUpdateOneRequiredWithoutInvitesInput
  notification: NotificationUpdateOneWithoutBookingInviteInput
}

input BookingInviteUpdateManyDataInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
}

input BookingInviteUpdateManyMutationInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
}

input BookingInviteUpdateManyWithoutBookingInput {
  create: [BookingInviteCreateWithoutBookingInput!]
  connect: [BookingInviteWhereUniqueInput!]
  set: [BookingInviteWhereUniqueInput!]
  disconnect: [BookingInviteWhereUniqueInput!]
  delete: [BookingInviteWhereUniqueInput!]
  update: [BookingInviteUpdateWithWhereUniqueWithoutBookingInput!]
  updateMany: [BookingInviteUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingInviteScalarWhereInput!]
  upsert: [BookingInviteUpsertWithWhereUniqueWithoutBookingInput!]
}

input BookingInviteUpdateManyWithoutFromInput {
  create: [BookingInviteCreateWithoutFromInput!]
  connect: [BookingInviteWhereUniqueInput!]
  set: [BookingInviteWhereUniqueInput!]
  disconnect: [BookingInviteWhereUniqueInput!]
  delete: [BookingInviteWhereUniqueInput!]
  update: [BookingInviteUpdateWithWhereUniqueWithoutFromInput!]
  updateMany: [BookingInviteUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingInviteScalarWhereInput!]
  upsert: [BookingInviteUpsertWithWhereUniqueWithoutFromInput!]
}

input BookingInviteUpdateManyWithoutToInput {
  create: [BookingInviteCreateWithoutToInput!]
  connect: [BookingInviteWhereUniqueInput!]
  set: [BookingInviteWhereUniqueInput!]
  disconnect: [BookingInviteWhereUniqueInput!]
  delete: [BookingInviteWhereUniqueInput!]
  update: [BookingInviteUpdateWithWhereUniqueWithoutToInput!]
  updateMany: [BookingInviteUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingInviteScalarWhereInput!]
  upsert: [BookingInviteUpsertWithWhereUniqueWithoutToInput!]
}

input BookingInviteUpdateManyWithWhereNestedInput {
  where: BookingInviteScalarWhereInput!
  data: BookingInviteUpdateManyDataInput!
}

input BookingInviteUpdateOneWithoutNotificationInput {
  create: BookingInviteCreateWithoutNotificationInput
  connect: BookingInviteWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BookingInviteUpdateWithoutNotificationDataInput
  upsert: BookingInviteUpsertWithoutNotificationInput
}

input BookingInviteUpdateWithoutBookingDataInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
  to: UserUpdateOneWithoutInvitesReceivedInput
  from: UserUpdateOneRequiredWithoutInvitesInput
  notification: NotificationUpdateOneWithoutBookingInviteInput
}

input BookingInviteUpdateWithoutFromDataInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
  booking: BookingUpdateOneRequiredWithoutInvitesInput
  to: UserUpdateOneWithoutInvitesReceivedInput
  notification: NotificationUpdateOneWithoutBookingInviteInput
}

input BookingInviteUpdateWithoutNotificationDataInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
  booking: BookingUpdateOneRequiredWithoutInvitesInput
  to: UserUpdateOneWithoutInvitesReceivedInput
  from: UserUpdateOneRequiredWithoutInvitesInput
}

input BookingInviteUpdateWithoutToDataInput {
  startTime: DateTime
  sent: Boolean
  accepted: Boolean
  booking: BookingUpdateOneRequiredWithoutInvitesInput
  from: UserUpdateOneRequiredWithoutInvitesInput
  notification: NotificationUpdateOneWithoutBookingInviteInput
}

input BookingInviteUpdateWithWhereUniqueWithoutBookingInput {
  where: BookingInviteWhereUniqueInput!
  data: BookingInviteUpdateWithoutBookingDataInput!
}

input BookingInviteUpdateWithWhereUniqueWithoutFromInput {
  where: BookingInviteWhereUniqueInput!
  data: BookingInviteUpdateWithoutFromDataInput!
}

input BookingInviteUpdateWithWhereUniqueWithoutToInput {
  where: BookingInviteWhereUniqueInput!
  data: BookingInviteUpdateWithoutToDataInput!
}

input BookingInviteUpsertWithoutNotificationInput {
  update: BookingInviteUpdateWithoutNotificationDataInput!
  create: BookingInviteCreateWithoutNotificationInput!
}

input BookingInviteUpsertWithWhereUniqueWithoutBookingInput {
  where: BookingInviteWhereUniqueInput!
  update: BookingInviteUpdateWithoutBookingDataInput!
  create: BookingInviteCreateWithoutBookingInput!
}

input BookingInviteUpsertWithWhereUniqueWithoutFromInput {
  where: BookingInviteWhereUniqueInput!
  update: BookingInviteUpdateWithoutFromDataInput!
  create: BookingInviteCreateWithoutFromInput!
}

input BookingInviteUpsertWithWhereUniqueWithoutToInput {
  where: BookingInviteWhereUniqueInput!
  update: BookingInviteUpdateWithoutToDataInput!
  create: BookingInviteCreateWithoutToInput!
}

input BookingInviteWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingInviteWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingInviteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingInviteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  sent: Boolean

  """All values that are not equal to given value."""
  sent_not: Boolean
  accepted: Boolean

  """All values that are not equal to given value."""
  accepted_not: Boolean
  booking: BookingWhereInput
  to: UserWhereInput
  from: UserWhereInput
  notification: NotificationWhereInput
}

input BookingInviteWhereUniqueInput {
  id: ID
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  numSlots_ASC
  numSlots_DESC
  numPlayers_ASC
  numPlayers_DESC
  total_ASC
  total_DESC
  cancelled_ASC
  cancelled_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookingPreviousValues {
  id: ID!
  numSlots: Int!
  numPlayers: Int!
  total: Float!
  cancelled: Boolean
}

input BookingScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  numSlots: Int

  """All values that are not equal to given value."""
  numSlots_not: Int

  """All values that are contained in given list."""
  numSlots_in: [Int!]

  """All values that are not contained in given list."""
  numSlots_not_in: [Int!]

  """All values less than the given value."""
  numSlots_lt: Int

  """All values less than or equal the given value."""
  numSlots_lte: Int

  """All values greater than the given value."""
  numSlots_gt: Int

  """All values greater than or equal the given value."""
  numSlots_gte: Int
  numPlayers: Int

  """All values that are not equal to given value."""
  numPlayers_not: Int

  """All values that are contained in given list."""
  numPlayers_in: [Int!]

  """All values that are not contained in given list."""
  numPlayers_not_in: [Int!]

  """All values less than the given value."""
  numPlayers_lt: Int

  """All values less than or equal the given value."""
  numPlayers_lte: Int

  """All values greater than the given value."""
  numPlayers_gt: Int

  """All values greater than or equal the given value."""
  numPlayers_gte: Int
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  cancelled: Boolean

  """All values that are not equal to given value."""
  cancelled_not: Boolean
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
}

input BookingUpdateDataInput {
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
  players: UserUpdateManyWithoutTimeSlotsPlayedInput
  bookee: UserUpdateOneRequiredWithoutTimeSlotsBookedInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
  invites: BookingInviteUpdateManyWithoutBookingInput
}

input BookingUpdateInput {
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
  players: UserUpdateManyWithoutTimeSlotsPlayedInput
  bookee: UserUpdateOneRequiredWithoutTimeSlotsBookedInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
  invites: BookingInviteUpdateManyWithoutBookingInput
}

input BookingUpdateManyDataInput {
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
}

input BookingUpdateManyMutationInput {
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
}

input BookingUpdateManyWithoutBookeeInput {
  create: [BookingCreateWithoutBookeeInput!]
  connect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutBookeeInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingScalarWhereInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutBookeeInput!]
}

input BookingUpdateManyWithoutPlayersInput {
  create: [BookingCreateWithoutPlayersInput!]
  connect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutPlayersInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingScalarWhereInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutPlayersInput!]
}

input BookingUpdateManyWithoutTimeslotInput {
  create: [BookingCreateWithoutTimeslotInput!]
  connect: [BookingWhereUniqueInput!]
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutTimeslotInput!]
  updateMany: [BookingUpdateManyWithWhereNestedInput!]
  deleteMany: [BookingScalarWhereInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutTimeslotInput!]
}

input BookingUpdateManyWithWhereNestedInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyDataInput!
}

input BookingUpdateOneInput {
  create: BookingCreateInput
  connect: BookingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BookingUpdateDataInput
  upsert: BookingUpsertNestedInput
}

input BookingUpdateOneRequiredWithoutInvitesInput {
  create: BookingCreateWithoutInvitesInput
  connect: BookingWhereUniqueInput
  update: BookingUpdateWithoutInvitesDataInput
  upsert: BookingUpsertWithoutInvitesInput
}

input BookingUpdateWithoutBookeeDataInput {
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
  players: UserUpdateManyWithoutTimeSlotsPlayedInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
  invites: BookingInviteUpdateManyWithoutBookingInput
}

input BookingUpdateWithoutInvitesDataInput {
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
  players: UserUpdateManyWithoutTimeSlotsPlayedInput
  bookee: UserUpdateOneRequiredWithoutTimeSlotsBookedInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
}

input BookingUpdateWithoutPlayersDataInput {
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
  bookee: UserUpdateOneRequiredWithoutTimeSlotsBookedInput
  timeslot: GamingTimeSlotUpdateOneRequiredWithoutBookingsInput
  invites: BookingInviteUpdateManyWithoutBookingInput
}

input BookingUpdateWithoutTimeslotDataInput {
  numSlots: Int
  numPlayers: Int
  total: Float
  cancelled: Boolean
  players: UserUpdateManyWithoutTimeSlotsPlayedInput
  bookee: UserUpdateOneRequiredWithoutTimeSlotsBookedInput
  invites: BookingInviteUpdateManyWithoutBookingInput
}

input BookingUpdateWithWhereUniqueWithoutBookeeInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutBookeeDataInput!
}

input BookingUpdateWithWhereUniqueWithoutPlayersInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutPlayersDataInput!
}

input BookingUpdateWithWhereUniqueWithoutTimeslotInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutTimeslotDataInput!
}

input BookingUpsertNestedInput {
  update: BookingUpdateDataInput!
  create: BookingCreateInput!
}

input BookingUpsertWithoutInvitesInput {
  update: BookingUpdateWithoutInvitesDataInput!
  create: BookingCreateWithoutInvitesInput!
}

input BookingUpsertWithWhereUniqueWithoutBookeeInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutBookeeDataInput!
  create: BookingCreateWithoutBookeeInput!
}

input BookingUpsertWithWhereUniqueWithoutPlayersInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutPlayersDataInput!
  create: BookingCreateWithoutPlayersInput!
}

input BookingUpsertWithWhereUniqueWithoutTimeslotInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutTimeslotDataInput!
  create: BookingCreateWithoutTimeslotInput!
}

input BookingWhereInput {
  """Logical AND on all given filters."""
  AND: [BookingWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  numSlots: Int

  """All values that are not equal to given value."""
  numSlots_not: Int

  """All values that are contained in given list."""
  numSlots_in: [Int!]

  """All values that are not contained in given list."""
  numSlots_not_in: [Int!]

  """All values less than the given value."""
  numSlots_lt: Int

  """All values less than or equal the given value."""
  numSlots_lte: Int

  """All values greater than the given value."""
  numSlots_gt: Int

  """All values greater than or equal the given value."""
  numSlots_gte: Int
  numPlayers: Int

  """All values that are not equal to given value."""
  numPlayers_not: Int

  """All values that are contained in given list."""
  numPlayers_in: [Int!]

  """All values that are not contained in given list."""
  numPlayers_not_in: [Int!]

  """All values less than the given value."""
  numPlayers_lt: Int

  """All values less than or equal the given value."""
  numPlayers_lte: Int

  """All values greater than the given value."""
  numPlayers_gt: Int

  """All values greater than or equal the given value."""
  numPlayers_gte: Int
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  cancelled: Boolean

  """All values that are not equal to given value."""
  cancelled_not: Boolean
  players_every: UserWhereInput
  players_some: UserWhereInput
  players_none: UserWhereInput
  bookee: UserWhereInput
  timeslot: GamingTimeSlotWhereInput
  invites_every: BookingInviteWhereInput
  invites_some: BookingInviteWhereInput
  invites_none: BookingInviteWhereInput
}

input BookingWhereUniqueInput {
  id: ID
}

scalar DateTime

type Discount {
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

"""A connection to a list of items."""
type DiscountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DiscountEdge]!
  aggregate: AggregateDiscount!
}

input DiscountCreateInput {
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

input DiscountCreateManyInput {
  create: [DiscountCreateInput!]
}

"""An edge in a connection."""
type DiscountEdge {
  """The item at the end of the edge."""
  node: Discount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DiscountOrderByInput {
  percentage_ASC
  percentage_DESC
  threshold_ASC
  threshold_DESC
  playerOrSession_ASC
  playerOrSession_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type DiscountPreviousValues {
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

input DiscountScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountScalarWhereInput!]
  percentage: Int

  """All values that are not equal to given value."""
  percentage_not: Int

  """All values that are contained in given list."""
  percentage_in: [Int!]

  """All values that are not contained in given list."""
  percentage_not_in: [Int!]

  """All values less than the given value."""
  percentage_lt: Int

  """All values less than or equal the given value."""
  percentage_lte: Int

  """All values greater than the given value."""
  percentage_gt: Int

  """All values greater than or equal the given value."""
  percentage_gte: Int
  threshold: Int

  """All values that are not equal to given value."""
  threshold_not: Int

  """All values that are contained in given list."""
  threshold_in: [Int!]

  """All values that are not contained in given list."""
  threshold_not_in: [Int!]

  """All values less than the given value."""
  threshold_lt: Int

  """All values less than or equal the given value."""
  threshold_lte: Int

  """All values greater than the given value."""
  threshold_gt: Int

  """All values greater than or equal the given value."""
  threshold_gte: Int
  playerOrSession: PlayerOrSession

  """All values that are not equal to given value."""
  playerOrSession_not: PlayerOrSession

  """All values that are contained in given list."""
  playerOrSession_in: [PlayerOrSession!]

  """All values that are not contained in given list."""
  playerOrSession_not_in: [PlayerOrSession!]
}

type DiscountSubscriptionPayload {
  mutation: MutationType!
  node: Discount
  updatedFields: [String!]
  previousValues: DiscountPreviousValues
}

input DiscountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DiscountWhereInput
}

input DiscountUpdateManyDataInput {
  percentage: Int
  threshold: Int
  playerOrSession: PlayerOrSession
}

input DiscountUpdateManyInput {
  create: [DiscountCreateInput!]
  updateMany: [DiscountUpdateManyWithWhereNestedInput!]
  deleteMany: [DiscountScalarWhereInput!]
}

input DiscountUpdateManyMutationInput {
  percentage: Int
  threshold: Int
  playerOrSession: PlayerOrSession
}

input DiscountUpdateManyWithWhereNestedInput {
  where: DiscountScalarWhereInput!
  data: DiscountUpdateManyDataInput!
}

input DiscountWhereInput {
  """Logical AND on all given filters."""
  AND: [DiscountWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiscountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiscountWhereInput!]
  percentage: Int

  """All values that are not equal to given value."""
  percentage_not: Int

  """All values that are contained in given list."""
  percentage_in: [Int!]

  """All values that are not contained in given list."""
  percentage_not_in: [Int!]

  """All values less than the given value."""
  percentage_lt: Int

  """All values less than or equal the given value."""
  percentage_lte: Int

  """All values greater than the given value."""
  percentage_gt: Int

  """All values greater than or equal the given value."""
  percentage_gte: Int
  threshold: Int

  """All values that are not equal to given value."""
  threshold_not: Int

  """All values that are contained in given list."""
  threshold_in: [Int!]

  """All values that are not contained in given list."""
  threshold_not_in: [Int!]

  """All values less than the given value."""
  threshold_lt: Int

  """All values less than or equal the given value."""
  threshold_lte: Int

  """All values greater than the given value."""
  threshold_gt: Int

  """All values greater than or equal the given value."""
  threshold_gte: Int
  playerOrSession: PlayerOrSession

  """All values that are not equal to given value."""
  playerOrSession_not: PlayerOrSession

  """All values that are contained in given list."""
  playerOrSession_in: [PlayerOrSession!]

  """All values that are not contained in given list."""
  playerOrSession_not_in: [PlayerOrSession!]
}

type FriendRequest implements Node {
  id: ID!
  createdAt: DateTime!
  to: User!
  from: User!
  notification: Notification!
}

"""A connection to a list of items."""
type FriendRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FriendRequestEdge]!
  aggregate: AggregateFriendRequest!
}

input FriendRequestCreateInput {
  to: UserCreateOneInput!
  from: UserCreateOneInput!
  notification: NotificationCreateOneWithoutFriendRequestInput!
}

input FriendRequestCreateOneWithoutNotificationInput {
  create: FriendRequestCreateWithoutNotificationInput
  connect: FriendRequestWhereUniqueInput
}

input FriendRequestCreateWithoutNotificationInput {
  to: UserCreateOneInput!
  from: UserCreateOneInput!
}

"""An edge in a connection."""
type FriendRequestEdge {
  """The item at the end of the edge."""
  node: FriendRequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FriendRequestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FriendRequestPreviousValues {
  id: ID!
  createdAt: DateTime!
}

type FriendRequestSubscriptionPayload {
  mutation: MutationType!
  node: FriendRequest
  updatedFields: [String!]
  previousValues: FriendRequestPreviousValues
}

input FriendRequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FriendRequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FriendRequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FriendRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FriendRequestWhereInput
}

input FriendRequestUpdateInput {
  to: UserUpdateOneRequiredInput
  from: UserUpdateOneRequiredInput
  notification: NotificationUpdateOneRequiredWithoutFriendRequestInput
}

input FriendRequestUpdateOneWithoutNotificationInput {
  create: FriendRequestCreateWithoutNotificationInput
  connect: FriendRequestWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FriendRequestUpdateWithoutNotificationDataInput
  upsert: FriendRequestUpsertWithoutNotificationInput
}

input FriendRequestUpdateWithoutNotificationDataInput {
  to: UserUpdateOneRequiredInput
  from: UserUpdateOneRequiredInput
}

input FriendRequestUpsertWithoutNotificationInput {
  update: FriendRequestUpdateWithoutNotificationDataInput!
  create: FriendRequestCreateWithoutNotificationInput!
}

input FriendRequestWhereInput {
  """Logical AND on all given filters."""
  AND: [FriendRequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [FriendRequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FriendRequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  to: UserWhereInput
  from: UserWhereInput
  notification: NotificationWhereInput
}

input FriendRequestWhereUniqueInput {
  id: ID
}

type Game implements Node {
  id: ID!
  name: String!
  tags: [Tags!]!
  sessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession!]
  launcher: Launcher!
  numSessions: Int!
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  name: String!
  launcher: Launcher!
  numSessions: Int
  tags: GameCreatetagsInput
  sessions: GamingSessionCreateManyWithoutGameInput
}

input GameCreateManyInput {
  create: [GameCreateInput!]
  connect: [GameWhereUniqueInput!]
}

input GameCreateOneInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutSessionsInput {
  create: GameCreateWithoutSessionsInput
  connect: GameWhereUniqueInput
}

input GameCreatetagsInput {
  set: [Tags!]
}

input GameCreateWithoutSessionsInput {
  name: String!
  launcher: Launcher!
  numSessions: Int
  tags: GameCreatetagsInput
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game!

  """A cursor for use in pagination."""
  cursor: String!
}

type GameIndex implements Node {
  id: ID!
  name: String!
  launcher: String
  tags: [String!]!
  game: Game!
}

"""A connection to a list of items."""
type GameIndexConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameIndexEdge]!
  aggregate: AggregateGameIndex!
}

input GameIndexCreateInput {
  name: String!
  launcher: String
  tags: GameIndexCreatetagsInput
  game: GameCreateOneInput!
}

input GameIndexCreatetagsInput {
  set: [String!]
}

"""An edge in a connection."""
type GameIndexEdge {
  """The item at the end of the edge."""
  node: GameIndex!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameIndexOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  launcher_ASC
  launcher_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GameIndexPreviousValues {
  id: ID!
  name: String!
  launcher: String
  tags: [String!]!
}

type GameIndexSubscriptionPayload {
  mutation: MutationType!
  node: GameIndex
  updatedFields: [String!]
  previousValues: GameIndexPreviousValues
}

input GameIndexSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameIndexSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameIndexSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameIndexSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameIndexWhereInput
}

input GameIndexUpdateInput {
  name: String
  launcher: String
  tags: GameIndexUpdatetagsInput
  game: GameUpdateOneRequiredInput
}

input GameIndexUpdateManyMutationInput {
  name: String
  launcher: String
  tags: GameIndexUpdatetagsInput
}

input GameIndexUpdatetagsInput {
  set: [String!]
}

input GameIndexWhereInput {
  """Logical AND on all given filters."""
  AND: [GameIndexWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameIndexWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameIndexWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  launcher: String

  """All values that are not equal to given value."""
  launcher_not: String

  """All values that are contained in given list."""
  launcher_in: [String!]

  """All values that are not contained in given list."""
  launcher_not_in: [String!]

  """All values less than the given value."""
  launcher_lt: String

  """All values less than or equal the given value."""
  launcher_lte: String

  """All values greater than the given value."""
  launcher_gt: String

  """All values greater than or equal the given value."""
  launcher_gte: String

  """All values containing the given string."""
  launcher_contains: String

  """All values not containing the given string."""
  launcher_not_contains: String

  """All values starting with the given string."""
  launcher_starts_with: String

  """All values not starting with the given string."""
  launcher_not_starts_with: String

  """All values ending with the given string."""
  launcher_ends_with: String

  """All values not ending with the given string."""
  launcher_not_ends_with: String
  game: GameWhereInput
}

input GameIndexWhereUniqueInput {
  id: ID
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  launcher_ASC
  launcher_DESC
  numSessions_ASC
  numSessions_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GamePreviousValues {
  id: ID!
  name: String!
  tags: [Tags!]!
  launcher: Launcher!
  numSessions: Int!
}

type GamerRequest implements Node {
  id: ID!
  user: User!
  occupations: [Occupations!]!
  addToOccupations: String
  socialMedia: SocialMedia!
}

"""A connection to a list of items."""
type GamerRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GamerRequestEdge]!
  aggregate: AggregateGamerRequest!
}

input GamerRequestCreateInput {
  addToOccupations: String
  occupations: GamerRequestCreateoccupationsInput
  user: UserCreateOneInput!
  socialMedia: SocialMediaCreateOneInput!
}

input GamerRequestCreateoccupationsInput {
  set: [Occupations!]
}

"""An edge in a connection."""
type GamerRequestEdge {
  """The item at the end of the edge."""
  node: GamerRequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GamerRequestOrderByInput {
  id_ASC
  id_DESC
  addToOccupations_ASC
  addToOccupations_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GamerRequestPreviousValues {
  id: ID!
  occupations: [Occupations!]!
  addToOccupations: String
}

type GamerRequestSubscriptionPayload {
  mutation: MutationType!
  node: GamerRequest
  updatedFields: [String!]
  previousValues: GamerRequestPreviousValues
}

input GamerRequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GamerRequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamerRequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamerRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamerRequestWhereInput
}

input GamerRequestUpdateInput {
  addToOccupations: String
  occupations: GamerRequestUpdateoccupationsInput
  user: UserUpdateOneRequiredInput
  socialMedia: SocialMediaUpdateOneRequiredInput
}

input GamerRequestUpdateManyMutationInput {
  addToOccupations: String
  occupations: GamerRequestUpdateoccupationsInput
}

input GamerRequestUpdateoccupationsInput {
  set: [Occupations!]
}

input GamerRequestWhereInput {
  """Logical AND on all given filters."""
  AND: [GamerRequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamerRequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamerRequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addToOccupations: String

  """All values that are not equal to given value."""
  addToOccupations_not: String

  """All values that are contained in given list."""
  addToOccupations_in: [String!]

  """All values that are not contained in given list."""
  addToOccupations_not_in: [String!]

  """All values less than the given value."""
  addToOccupations_lt: String

  """All values less than or equal the given value."""
  addToOccupations_lte: String

  """All values greater than the given value."""
  addToOccupations_gt: String

  """All values greater than or equal the given value."""
  addToOccupations_gte: String

  """All values containing the given string."""
  addToOccupations_contains: String

  """All values not containing the given string."""
  addToOccupations_not_contains: String

  """All values starting with the given string."""
  addToOccupations_starts_with: String

  """All values not starting with the given string."""
  addToOccupations_not_starts_with: String

  """All values ending with the given string."""
  addToOccupations_ends_with: String

  """All values not ending with the given string."""
  addToOccupations_not_ends_with: String
  user: UserWhereInput
  socialMedia: SocialMediaWhereInput
}

input GamerRequestWhereUniqueInput {
  id: ID
}

type GamerTag implements Node {
  id: ID!
  user: User!
  psn: String
  xbl: String
  nso: String
  pc: PCLauncher
}

"""A connection to a list of items."""
type GamerTagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GamerTagEdge]!
  aggregate: AggregateGamerTag!
}

input GamerTagCreateInput {
  psn: String
  xbl: String
  nso: String
  user: UserCreateOneWithoutGamertagsInput!
  pc: PCLauncherCreateOneWithoutGamerTagInput
}

input GamerTagCreateOneWithoutPcInput {
  create: GamerTagCreateWithoutPcInput
  connect: GamerTagWhereUniqueInput
}

input GamerTagCreateOneWithoutUserInput {
  create: GamerTagCreateWithoutUserInput
  connect: GamerTagWhereUniqueInput
}

input GamerTagCreateWithoutPcInput {
  psn: String
  xbl: String
  nso: String
  user: UserCreateOneWithoutGamertagsInput!
}

input GamerTagCreateWithoutUserInput {
  psn: String
  xbl: String
  nso: String
  pc: PCLauncherCreateOneWithoutGamerTagInput
}

"""An edge in a connection."""
type GamerTagEdge {
  """The item at the end of the edge."""
  node: GamerTag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GamerTagOrderByInput {
  id_ASC
  id_DESC
  psn_ASC
  psn_DESC
  xbl_ASC
  xbl_DESC
  nso_ASC
  nso_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GamerTagPreviousValues {
  id: ID!
  psn: String
  xbl: String
  nso: String
}

type GamerTagSubscriptionPayload {
  mutation: MutationType!
  node: GamerTag
  updatedFields: [String!]
  previousValues: GamerTagPreviousValues
}

input GamerTagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GamerTagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamerTagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamerTagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamerTagWhereInput
}

input GamerTagUpdateInput {
  psn: String
  xbl: String
  nso: String
  user: UserUpdateOneRequiredWithoutGamertagsInput
  pc: PCLauncherUpdateOneWithoutGamerTagInput
}

input GamerTagUpdateManyMutationInput {
  psn: String
  xbl: String
  nso: String
}

input GamerTagUpdateOneRequiredWithoutPcInput {
  create: GamerTagCreateWithoutPcInput
  connect: GamerTagWhereUniqueInput
  update: GamerTagUpdateWithoutPcDataInput
  upsert: GamerTagUpsertWithoutPcInput
}

input GamerTagUpdateOneWithoutUserInput {
  create: GamerTagCreateWithoutUserInput
  connect: GamerTagWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GamerTagUpdateWithoutUserDataInput
  upsert: GamerTagUpsertWithoutUserInput
}

input GamerTagUpdateWithoutPcDataInput {
  psn: String
  xbl: String
  nso: String
  user: UserUpdateOneRequiredWithoutGamertagsInput
}

input GamerTagUpdateWithoutUserDataInput {
  psn: String
  xbl: String
  nso: String
  pc: PCLauncherUpdateOneWithoutGamerTagInput
}

input GamerTagUpsertWithoutPcInput {
  update: GamerTagUpdateWithoutPcDataInput!
  create: GamerTagCreateWithoutPcInput!
}

input GamerTagUpsertWithoutUserInput {
  update: GamerTagUpdateWithoutUserDataInput!
  create: GamerTagCreateWithoutUserInput!
}

input GamerTagWhereInput {
  """Logical AND on all given filters."""
  AND: [GamerTagWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamerTagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamerTagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  psn: String

  """All values that are not equal to given value."""
  psn_not: String

  """All values that are contained in given list."""
  psn_in: [String!]

  """All values that are not contained in given list."""
  psn_not_in: [String!]

  """All values less than the given value."""
  psn_lt: String

  """All values less than or equal the given value."""
  psn_lte: String

  """All values greater than the given value."""
  psn_gt: String

  """All values greater than or equal the given value."""
  psn_gte: String

  """All values containing the given string."""
  psn_contains: String

  """All values not containing the given string."""
  psn_not_contains: String

  """All values starting with the given string."""
  psn_starts_with: String

  """All values not starting with the given string."""
  psn_not_starts_with: String

  """All values ending with the given string."""
  psn_ends_with: String

  """All values not ending with the given string."""
  psn_not_ends_with: String
  xbl: String

  """All values that are not equal to given value."""
  xbl_not: String

  """All values that are contained in given list."""
  xbl_in: [String!]

  """All values that are not contained in given list."""
  xbl_not_in: [String!]

  """All values less than the given value."""
  xbl_lt: String

  """All values less than or equal the given value."""
  xbl_lte: String

  """All values greater than the given value."""
  xbl_gt: String

  """All values greater than or equal the given value."""
  xbl_gte: String

  """All values containing the given string."""
  xbl_contains: String

  """All values not containing the given string."""
  xbl_not_contains: String

  """All values starting with the given string."""
  xbl_starts_with: String

  """All values not starting with the given string."""
  xbl_not_starts_with: String

  """All values ending with the given string."""
  xbl_ends_with: String

  """All values not ending with the given string."""
  xbl_not_ends_with: String
  nso: String

  """All values that are not equal to given value."""
  nso_not: String

  """All values that are contained in given list."""
  nso_in: [String!]

  """All values that are not contained in given list."""
  nso_not_in: [String!]

  """All values less than the given value."""
  nso_lt: String

  """All values less than or equal the given value."""
  nso_lte: String

  """All values greater than the given value."""
  nso_gt: String

  """All values greater than or equal the given value."""
  nso_gte: String

  """All values containing the given string."""
  nso_contains: String

  """All values not containing the given string."""
  nso_not_contains: String

  """All values starting with the given string."""
  nso_starts_with: String

  """All values not starting with the given string."""
  nso_not_starts_with: String

  """All values ending with the given string."""
  nso_ends_with: String

  """All values not ending with the given string."""
  nso_not_ends_with: String
  user: UserWhereInput
  pc: PCLauncherWhereInput
}

input GamerTagWhereUniqueInput {
  id: ID
}

input GameScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GameScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  launcher: Launcher

  """All values that are not equal to given value."""
  launcher_not: Launcher

  """All values that are contained in given list."""
  launcher_in: [Launcher!]

  """All values that are not contained in given list."""
  launcher_not_in: [Launcher!]
  numSessions: Int

  """All values that are not equal to given value."""
  numSessions_not: Int

  """All values that are contained in given list."""
  numSessions_in: [Int!]

  """All values that are not contained in given list."""
  numSessions_not_in: [Int!]

  """All values less than the given value."""
  numSessions_lt: Int

  """All values less than or equal the given value."""
  numSessions_lte: Int

  """All values greater than the given value."""
  numSessions_gt: Int

  """All values greater than or equal the given value."""
  numSessions_gte: Int
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateDataInput {
  name: String
  launcher: Launcher
  numSessions: Int
  tags: GameUpdatetagsInput
  sessions: GamingSessionUpdateManyWithoutGameInput
}

input GameUpdateInput {
  name: String
  launcher: Launcher
  numSessions: Int
  tags: GameUpdatetagsInput
  sessions: GamingSessionUpdateManyWithoutGameInput
}

input GameUpdateManyDataInput {
  name: String
  launcher: Launcher
  numSessions: Int
  tags: GameUpdatetagsInput
}

input GameUpdateManyInput {
  create: [GameCreateInput!]
  connect: [GameWhereUniqueInput!]
  set: [GameWhereUniqueInput!]
  disconnect: [GameWhereUniqueInput!]
  delete: [GameWhereUniqueInput!]
  update: [GameUpdateWithWhereUniqueNestedInput!]
  updateMany: [GameUpdateManyWithWhereNestedInput!]
  deleteMany: [GameScalarWhereInput!]
  upsert: [GameUpsertWithWhereUniqueNestedInput!]
}

input GameUpdateManyMutationInput {
  name: String
  launcher: Launcher
  numSessions: Int
  tags: GameUpdatetagsInput
}

input GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput!
  data: GameUpdateManyDataInput!
}

input GameUpdateOneRequiredInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  update: GameUpdateDataInput
  upsert: GameUpsertNestedInput
}

input GameUpdateOneRequiredWithoutSessionsInput {
  create: GameCreateWithoutSessionsInput
  connect: GameWhereUniqueInput
  update: GameUpdateWithoutSessionsDataInput
  upsert: GameUpsertWithoutSessionsInput
}

input GameUpdatetagsInput {
  set: [Tags!]
}

input GameUpdateWithoutSessionsDataInput {
  name: String
  launcher: Launcher
  numSessions: Int
  tags: GameUpdatetagsInput
}

input GameUpdateWithWhereUniqueNestedInput {
  where: GameWhereUniqueInput!
  data: GameUpdateDataInput!
}

input GameUpsertNestedInput {
  update: GameUpdateDataInput!
  create: GameCreateInput!
}

input GameUpsertWithoutSessionsInput {
  update: GameUpdateWithoutSessionsDataInput!
  create: GameCreateWithoutSessionsInput!
}

input GameUpsertWithWhereUniqueNestedInput {
  where: GameWhereUniqueInput!
  update: GameUpdateDataInput!
  create: GameCreateInput!
}

input GameWhereInput {
  """Logical AND on all given filters."""
  AND: [GameWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  launcher: Launcher

  """All values that are not equal to given value."""
  launcher_not: Launcher

  """All values that are contained in given list."""
  launcher_in: [Launcher!]

  """All values that are not contained in given list."""
  launcher_not_in: [Launcher!]
  numSessions: Int

  """All values that are not equal to given value."""
  numSessions_not: Int

  """All values that are contained in given list."""
  numSessions_in: [Int!]

  """All values that are not contained in given list."""
  numSessions_not_in: [Int!]

  """All values less than the given value."""
  numSessions_lt: Int

  """All values less than or equal the given value."""
  numSessions_lte: Int

  """All values greater than the given value."""
  numSessions_gt: Int

  """All values greater than or equal the given value."""
  numSessions_gte: Int
  sessions_every: GamingSessionWhereInput
  sessions_some: GamingSessionWhereInput
  sessions_none: GamingSessionWhereInput
}

input GameWhereUniqueInput {
  id: ID
  name: String
}

type GamingSession implements Node {
  id: ID!
  gamers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  creator: User!
  game: Game!
  title: String!
  length: Int!
  price: Float!
  reviews(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReview!]
  system: System!
  type: TypeOfGame!
  slots: Int!
  requirements(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Requirement!]
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount!]
  timeslots(where: GamingTimeSlotWhereInput, orderBy: GamingTimeSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingTimeSlot!]
}

"""A connection to a list of items."""
type GamingSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GamingSessionEdge]!
  aggregate: AggregateGamingSession!
}

input GamingSessionCreateInput {
  title: String!
  length: Int!
  price: Float!
  system: System!
  type: TypeOfGame!
  slots: Int!
  gamers: UserCreateManyWithoutSessionsInput
  creator: UserCreateOneInput!
  game: GameCreateOneWithoutSessionsInput!
  reviews: SessionReviewCreateManyWithoutSessionInput
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  timeslots: GamingTimeSlotCreateManyWithoutGamingSessionInput
}

input GamingSessionCreateManyWithoutGameInput {
  create: [GamingSessionCreateWithoutGameInput!]
  connect: [GamingSessionWhereUniqueInput!]
}

input GamingSessionCreateManyWithoutGamersInput {
  create: [GamingSessionCreateWithoutGamersInput!]
  connect: [GamingSessionWhereUniqueInput!]
}

input GamingSessionCreateOneInput {
  create: GamingSessionCreateInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreateOneWithoutReviewsInput {
  create: GamingSessionCreateWithoutReviewsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreateOneWithoutTimeslotsInput {
  create: GamingSessionCreateWithoutTimeslotsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreateWithoutGameInput {
  title: String!
  length: Int!
  price: Float!
  system: System!
  type: TypeOfGame!
  slots: Int!
  gamers: UserCreateManyWithoutSessionsInput
  creator: UserCreateOneInput!
  reviews: SessionReviewCreateManyWithoutSessionInput
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  timeslots: GamingTimeSlotCreateManyWithoutGamingSessionInput
}

input GamingSessionCreateWithoutGamersInput {
  title: String!
  length: Int!
  price: Float!
  system: System!
  type: TypeOfGame!
  slots: Int!
  creator: UserCreateOneInput!
  game: GameCreateOneWithoutSessionsInput!
  reviews: SessionReviewCreateManyWithoutSessionInput
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  timeslots: GamingTimeSlotCreateManyWithoutGamingSessionInput
}

input GamingSessionCreateWithoutReviewsInput {
  title: String!
  length: Int!
  price: Float!
  system: System!
  type: TypeOfGame!
  slots: Int!
  gamers: UserCreateManyWithoutSessionsInput
  creator: UserCreateOneInput!
  game: GameCreateOneWithoutSessionsInput!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  timeslots: GamingTimeSlotCreateManyWithoutGamingSessionInput
}

input GamingSessionCreateWithoutTimeslotsInput {
  title: String!
  length: Int!
  price: Float!
  system: System!
  type: TypeOfGame!
  slots: Int!
  gamers: UserCreateManyWithoutSessionsInput
  creator: UserCreateOneInput!
  game: GameCreateOneWithoutSessionsInput!
  reviews: SessionReviewCreateManyWithoutSessionInput
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
}

"""An edge in a connection."""
type GamingSessionEdge {
  """The item at the end of the edge."""
  node: GamingSession!

  """A cursor for use in pagination."""
  cursor: String!
}

type GamingSessionIndex implements Node {
  id: ID!
  title: String!
  gamingSession: GamingSession!
}

"""A connection to a list of items."""
type GamingSessionIndexConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GamingSessionIndexEdge]!
  aggregate: AggregateGamingSessionIndex!
}

input GamingSessionIndexCreateInput {
  title: String!
  gamingSession: GamingSessionCreateOneInput!
}

"""An edge in a connection."""
type GamingSessionIndexEdge {
  """The item at the end of the edge."""
  node: GamingSessionIndex!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GamingSessionIndexOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GamingSessionIndexPreviousValues {
  id: ID!
  title: String!
}

type GamingSessionIndexSubscriptionPayload {
  mutation: MutationType!
  node: GamingSessionIndex
  updatedFields: [String!]
  previousValues: GamingSessionIndexPreviousValues
}

input GamingSessionIndexSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GamingSessionIndexSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamingSessionIndexSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamingSessionIndexSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamingSessionIndexWhereInput
}

input GamingSessionIndexUpdateInput {
  title: String
  gamingSession: GamingSessionUpdateOneRequiredInput
}

input GamingSessionIndexUpdateManyMutationInput {
  title: String
}

input GamingSessionIndexWhereInput {
  """Logical AND on all given filters."""
  AND: [GamingSessionIndexWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamingSessionIndexWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamingSessionIndexWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  gamingSession: GamingSessionWhereInput
}

input GamingSessionIndexWhereUniqueInput {
  id: ID
}

enum GamingSessionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  length_ASC
  length_DESC
  price_ASC
  price_DESC
  system_ASC
  system_DESC
  type_ASC
  type_DESC
  slots_ASC
  slots_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GamingSessionPreviousValues {
  id: ID!
  title: String!
  length: Int!
  price: Float!
  system: System!
  type: TypeOfGame!
  slots: Int!
}

input GamingSessionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GamingSessionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamingSessionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamingSessionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  length: Int

  """All values that are not equal to given value."""
  length_not: Int

  """All values that are contained in given list."""
  length_in: [Int!]

  """All values that are not contained in given list."""
  length_not_in: [Int!]

  """All values less than the given value."""
  length_lt: Int

  """All values less than or equal the given value."""
  length_lte: Int

  """All values greater than the given value."""
  length_gt: Int

  """All values greater than or equal the given value."""
  length_gte: Int
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  system: System

  """All values that are not equal to given value."""
  system_not: System

  """All values that are contained in given list."""
  system_in: [System!]

  """All values that are not contained in given list."""
  system_not_in: [System!]
  type: TypeOfGame

  """All values that are not equal to given value."""
  type_not: TypeOfGame

  """All values that are contained in given list."""
  type_in: [TypeOfGame!]

  """All values that are not contained in given list."""
  type_not_in: [TypeOfGame!]
  slots: Int

  """All values that are not equal to given value."""
  slots_not: Int

  """All values that are contained in given list."""
  slots_in: [Int!]

  """All values that are not contained in given list."""
  slots_not_in: [Int!]

  """All values less than the given value."""
  slots_lt: Int

  """All values less than or equal the given value."""
  slots_lte: Int

  """All values greater than the given value."""
  slots_gt: Int

  """All values greater than or equal the given value."""
  slots_gte: Int
}

type GamingSessionSubscriptionPayload {
  mutation: MutationType!
  node: GamingSession
  updatedFields: [String!]
  previousValues: GamingSessionPreviousValues
}

input GamingSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GamingSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamingSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamingSessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamingSessionWhereInput
}

input GamingSessionUpdateDataInput {
  title: String
  length: Int
  price: Float
  system: System
  type: TypeOfGame
  slots: Int
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  reviews: SessionReviewUpdateManyWithoutSessionInput
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateInput {
  title: String
  length: Int
  price: Float
  system: System
  type: TypeOfGame
  slots: Int
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  reviews: SessionReviewUpdateManyWithoutSessionInput
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateManyDataInput {
  title: String
  length: Int
  price: Float
  system: System
  type: TypeOfGame
  slots: Int
}

input GamingSessionUpdateManyMutationInput {
  title: String
  length: Int
  price: Float
  system: System
  type: TypeOfGame
  slots: Int
}

input GamingSessionUpdateManyWithoutGameInput {
  create: [GamingSessionCreateWithoutGameInput!]
  connect: [GamingSessionWhereUniqueInput!]
  set: [GamingSessionWhereUniqueInput!]
  disconnect: [GamingSessionWhereUniqueInput!]
  delete: [GamingSessionWhereUniqueInput!]
  update: [GamingSessionUpdateWithWhereUniqueWithoutGameInput!]
  updateMany: [GamingSessionUpdateManyWithWhereNestedInput!]
  deleteMany: [GamingSessionScalarWhereInput!]
  upsert: [GamingSessionUpsertWithWhereUniqueWithoutGameInput!]
}

input GamingSessionUpdateManyWithoutGamersInput {
  create: [GamingSessionCreateWithoutGamersInput!]
  connect: [GamingSessionWhereUniqueInput!]
  set: [GamingSessionWhereUniqueInput!]
  disconnect: [GamingSessionWhereUniqueInput!]
  delete: [GamingSessionWhereUniqueInput!]
  update: [GamingSessionUpdateWithWhereUniqueWithoutGamersInput!]
  updateMany: [GamingSessionUpdateManyWithWhereNestedInput!]
  deleteMany: [GamingSessionScalarWhereInput!]
  upsert: [GamingSessionUpsertWithWhereUniqueWithoutGamersInput!]
}

input GamingSessionUpdateManyWithWhereNestedInput {
  where: GamingSessionScalarWhereInput!
  data: GamingSessionUpdateManyDataInput!
}

input GamingSessionUpdateOneRequiredInput {
  create: GamingSessionCreateInput
  connect: GamingSessionWhereUniqueInput
  update: GamingSessionUpdateDataInput
  upsert: GamingSessionUpsertNestedInput
}

input GamingSessionUpdateOneRequiredWithoutReviewsInput {
  create: GamingSessionCreateWithoutReviewsInput
  connect: GamingSessionWhereUniqueInput
  update: GamingSessionUpdateWithoutReviewsDataInput
  upsert: GamingSessionUpsertWithoutReviewsInput
}

input GamingSessionUpdateOneRequiredWithoutTimeslotsInput {
  create: GamingSessionCreateWithoutTimeslotsInput
  connect: GamingSessionWhereUniqueInput
  update: GamingSessionUpdateWithoutTimeslotsDataInput
  upsert: GamingSessionUpsertWithoutTimeslotsInput
}

input GamingSessionUpdateWithoutGameDataInput {
  title: String
  length: Int
  price: Float
  system: System
  type: TypeOfGame
  slots: Int
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  reviews: SessionReviewUpdateManyWithoutSessionInput
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateWithoutGamersDataInput {
  title: String
  length: Int
  price: Float
  system: System
  type: TypeOfGame
  slots: Int
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  reviews: SessionReviewUpdateManyWithoutSessionInput
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateWithoutReviewsDataInput {
  title: String
  length: Int
  price: Float
  system: System
  type: TypeOfGame
  slots: Int
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  timeslots: GamingTimeSlotUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateWithoutTimeslotsDataInput {
  title: String
  length: Int
  price: Float
  system: System
  type: TypeOfGame
  slots: Int
  gamers: UserUpdateManyWithoutSessionsInput
  creator: UserUpdateOneRequiredInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  reviews: SessionReviewUpdateManyWithoutSessionInput
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
}

input GamingSessionUpdateWithWhereUniqueWithoutGameInput {
  where: GamingSessionWhereUniqueInput!
  data: GamingSessionUpdateWithoutGameDataInput!
}

input GamingSessionUpdateWithWhereUniqueWithoutGamersInput {
  where: GamingSessionWhereUniqueInput!
  data: GamingSessionUpdateWithoutGamersDataInput!
}

input GamingSessionUpsertNestedInput {
  update: GamingSessionUpdateDataInput!
  create: GamingSessionCreateInput!
}

input GamingSessionUpsertWithoutReviewsInput {
  update: GamingSessionUpdateWithoutReviewsDataInput!
  create: GamingSessionCreateWithoutReviewsInput!
}

input GamingSessionUpsertWithoutTimeslotsInput {
  update: GamingSessionUpdateWithoutTimeslotsDataInput!
  create: GamingSessionCreateWithoutTimeslotsInput!
}

input GamingSessionUpsertWithWhereUniqueWithoutGameInput {
  where: GamingSessionWhereUniqueInput!
  update: GamingSessionUpdateWithoutGameDataInput!
  create: GamingSessionCreateWithoutGameInput!
}

input GamingSessionUpsertWithWhereUniqueWithoutGamersInput {
  where: GamingSessionWhereUniqueInput!
  update: GamingSessionUpdateWithoutGamersDataInput!
  create: GamingSessionCreateWithoutGamersInput!
}

input GamingSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [GamingSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamingSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamingSessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  length: Int

  """All values that are not equal to given value."""
  length_not: Int

  """All values that are contained in given list."""
  length_in: [Int!]

  """All values that are not contained in given list."""
  length_not_in: [Int!]

  """All values less than the given value."""
  length_lt: Int

  """All values less than or equal the given value."""
  length_lte: Int

  """All values greater than the given value."""
  length_gt: Int

  """All values greater than or equal the given value."""
  length_gte: Int
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  system: System

  """All values that are not equal to given value."""
  system_not: System

  """All values that are contained in given list."""
  system_in: [System!]

  """All values that are not contained in given list."""
  system_not_in: [System!]
  type: TypeOfGame

  """All values that are not equal to given value."""
  type_not: TypeOfGame

  """All values that are contained in given list."""
  type_in: [TypeOfGame!]

  """All values that are not contained in given list."""
  type_not_in: [TypeOfGame!]
  slots: Int

  """All values that are not equal to given value."""
  slots_not: Int

  """All values that are contained in given list."""
  slots_in: [Int!]

  """All values that are not contained in given list."""
  slots_not_in: [Int!]

  """All values less than the given value."""
  slots_lt: Int

  """All values less than or equal the given value."""
  slots_lte: Int

  """All values greater than the given value."""
  slots_gt: Int

  """All values greater than or equal the given value."""
  slots_gte: Int
  gamers_every: UserWhereInput
  gamers_some: UserWhereInput
  gamers_none: UserWhereInput
  creator: UserWhereInput
  game: GameWhereInput
  reviews_every: SessionReviewWhereInput
  reviews_some: SessionReviewWhereInput
  reviews_none: SessionReviewWhereInput
  requirements_every: RequirementWhereInput
  requirements_some: RequirementWhereInput
  requirements_none: RequirementWhereInput
  discounts_every: DiscountWhereInput
  discounts_some: DiscountWhereInput
  discounts_none: DiscountWhereInput
  timeslots_every: GamingTimeSlotWhereInput
  timeslots_some: GamingTimeSlotWhereInput
  timeslots_none: GamingTimeSlotWhereInput
}

input GamingSessionWhereUniqueInput {
  id: ID
}

type GamingTimeSlot implements Node {
  id: ID!
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSession!
  gamers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  players(where: BookedPlayerWhereInput, orderBy: BookedPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookedPlayer!]
  length: Int!
  slots: Int!
}

"""A connection to a list of items."""
type GamingTimeSlotConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GamingTimeSlotEdge]!
  aggregate: AggregateGamingTimeSlot!
}

input GamingTimeSlotCreateInput {
  startTime: DateTime!
  endTime: DateTime!
  length: Int!
  slots: Int!
  gamingSession: GamingSessionCreateOneWithoutTimeslotsInput!
  gamers: UserCreateManyWithoutTimeSlotsInput
  bookings: BookingCreateManyWithoutTimeslotInput
  players: BookedPlayerCreateManyWithoutTimeslotInput
}

input GamingTimeSlotCreateManyWithoutGamersInput {
  create: [GamingTimeSlotCreateWithoutGamersInput!]
  connect: [GamingTimeSlotWhereUniqueInput!]
}

input GamingTimeSlotCreateManyWithoutGamingSessionInput {
  create: [GamingTimeSlotCreateWithoutGamingSessionInput!]
  connect: [GamingTimeSlotWhereUniqueInput!]
}

input GamingTimeSlotCreateOneWithoutBookingsInput {
  create: GamingTimeSlotCreateWithoutBookingsInput
  connect: GamingTimeSlotWhereUniqueInput
}

input GamingTimeSlotCreateOneWithoutPlayersInput {
  create: GamingTimeSlotCreateWithoutPlayersInput
  connect: GamingTimeSlotWhereUniqueInput
}

input GamingTimeSlotCreateWithoutBookingsInput {
  startTime: DateTime!
  endTime: DateTime!
  length: Int!
  slots: Int!
  gamingSession: GamingSessionCreateOneWithoutTimeslotsInput!
  gamers: UserCreateManyWithoutTimeSlotsInput
  players: BookedPlayerCreateManyWithoutTimeslotInput
}

input GamingTimeSlotCreateWithoutGamersInput {
  startTime: DateTime!
  endTime: DateTime!
  length: Int!
  slots: Int!
  gamingSession: GamingSessionCreateOneWithoutTimeslotsInput!
  bookings: BookingCreateManyWithoutTimeslotInput
  players: BookedPlayerCreateManyWithoutTimeslotInput
}

input GamingTimeSlotCreateWithoutGamingSessionInput {
  startTime: DateTime!
  endTime: DateTime!
  length: Int!
  slots: Int!
  gamers: UserCreateManyWithoutTimeSlotsInput
  bookings: BookingCreateManyWithoutTimeslotInput
  players: BookedPlayerCreateManyWithoutTimeslotInput
}

input GamingTimeSlotCreateWithoutPlayersInput {
  startTime: DateTime!
  endTime: DateTime!
  length: Int!
  slots: Int!
  gamingSession: GamingSessionCreateOneWithoutTimeslotsInput!
  gamers: UserCreateManyWithoutTimeSlotsInput
  bookings: BookingCreateManyWithoutTimeslotInput
}

"""An edge in a connection."""
type GamingTimeSlotEdge {
  """The item at the end of the edge."""
  node: GamingTimeSlot!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GamingTimeSlotOrderByInput {
  id_ASC
  id_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  length_ASC
  length_DESC
  slots_ASC
  slots_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GamingTimeSlotPreviousValues {
  id: ID!
  startTime: DateTime!
  endTime: DateTime!
  length: Int!
  slots: Int!
}

input GamingTimeSlotScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GamingTimeSlotScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamingTimeSlotScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamingTimeSlotScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  length: Int

  """All values that are not equal to given value."""
  length_not: Int

  """All values that are contained in given list."""
  length_in: [Int!]

  """All values that are not contained in given list."""
  length_not_in: [Int!]

  """All values less than the given value."""
  length_lt: Int

  """All values less than or equal the given value."""
  length_lte: Int

  """All values greater than the given value."""
  length_gt: Int

  """All values greater than or equal the given value."""
  length_gte: Int
  slots: Int

  """All values that are not equal to given value."""
  slots_not: Int

  """All values that are contained in given list."""
  slots_in: [Int!]

  """All values that are not contained in given list."""
  slots_not_in: [Int!]

  """All values less than the given value."""
  slots_lt: Int

  """All values less than or equal the given value."""
  slots_lte: Int

  """All values greater than the given value."""
  slots_gt: Int

  """All values greater than or equal the given value."""
  slots_gte: Int
}

type GamingTimeSlotSubscriptionPayload {
  mutation: MutationType!
  node: GamingTimeSlot
  updatedFields: [String!]
  previousValues: GamingTimeSlotPreviousValues
}

input GamingTimeSlotSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GamingTimeSlotSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamingTimeSlotSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamingTimeSlotSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GamingTimeSlotWhereInput
}

input GamingTimeSlotUpdateInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
  gamingSession: GamingSessionUpdateOneRequiredWithoutTimeslotsInput
  gamers: UserUpdateManyWithoutTimeSlotsInput
  bookings: BookingUpdateManyWithoutTimeslotInput
  players: BookedPlayerUpdateManyWithoutTimeslotInput
}

input GamingTimeSlotUpdateManyDataInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateManyMutationInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
}

input GamingTimeSlotUpdateManyWithoutGamersInput {
  create: [GamingTimeSlotCreateWithoutGamersInput!]
  connect: [GamingTimeSlotWhereUniqueInput!]
  set: [GamingTimeSlotWhereUniqueInput!]
  disconnect: [GamingTimeSlotWhereUniqueInput!]
  delete: [GamingTimeSlotWhereUniqueInput!]
  update: [GamingTimeSlotUpdateWithWhereUniqueWithoutGamersInput!]
  updateMany: [GamingTimeSlotUpdateManyWithWhereNestedInput!]
  deleteMany: [GamingTimeSlotScalarWhereInput!]
  upsert: [GamingTimeSlotUpsertWithWhereUniqueWithoutGamersInput!]
}

input GamingTimeSlotUpdateManyWithoutGamingSessionInput {
  create: [GamingTimeSlotCreateWithoutGamingSessionInput!]
  connect: [GamingTimeSlotWhereUniqueInput!]
  set: [GamingTimeSlotWhereUniqueInput!]
  disconnect: [GamingTimeSlotWhereUniqueInput!]
  delete: [GamingTimeSlotWhereUniqueInput!]
  update: [GamingTimeSlotUpdateWithWhereUniqueWithoutGamingSessionInput!]
  updateMany: [GamingTimeSlotUpdateManyWithWhereNestedInput!]
  deleteMany: [GamingTimeSlotScalarWhereInput!]
  upsert: [GamingTimeSlotUpsertWithWhereUniqueWithoutGamingSessionInput!]
}

input GamingTimeSlotUpdateManyWithWhereNestedInput {
  where: GamingTimeSlotScalarWhereInput!
  data: GamingTimeSlotUpdateManyDataInput!
}

input GamingTimeSlotUpdateOneRequiredWithoutBookingsInput {
  create: GamingTimeSlotCreateWithoutBookingsInput
  connect: GamingTimeSlotWhereUniqueInput
  update: GamingTimeSlotUpdateWithoutBookingsDataInput
  upsert: GamingTimeSlotUpsertWithoutBookingsInput
}

input GamingTimeSlotUpdateOneRequiredWithoutPlayersInput {
  create: GamingTimeSlotCreateWithoutPlayersInput
  connect: GamingTimeSlotWhereUniqueInput
  update: GamingTimeSlotUpdateWithoutPlayersDataInput
  upsert: GamingTimeSlotUpsertWithoutPlayersInput
}

input GamingTimeSlotUpdateWithoutBookingsDataInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
  gamingSession: GamingSessionUpdateOneRequiredWithoutTimeslotsInput
  gamers: UserUpdateManyWithoutTimeSlotsInput
  players: BookedPlayerUpdateManyWithoutTimeslotInput
}

input GamingTimeSlotUpdateWithoutGamersDataInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
  gamingSession: GamingSessionUpdateOneRequiredWithoutTimeslotsInput
  bookings: BookingUpdateManyWithoutTimeslotInput
  players: BookedPlayerUpdateManyWithoutTimeslotInput
}

input GamingTimeSlotUpdateWithoutGamingSessionDataInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
  gamers: UserUpdateManyWithoutTimeSlotsInput
  bookings: BookingUpdateManyWithoutTimeslotInput
  players: BookedPlayerUpdateManyWithoutTimeslotInput
}

input GamingTimeSlotUpdateWithoutPlayersDataInput {
  startTime: DateTime
  endTime: DateTime
  length: Int
  slots: Int
  gamingSession: GamingSessionUpdateOneRequiredWithoutTimeslotsInput
  gamers: UserUpdateManyWithoutTimeSlotsInput
  bookings: BookingUpdateManyWithoutTimeslotInput
}

input GamingTimeSlotUpdateWithWhereUniqueWithoutGamersInput {
  where: GamingTimeSlotWhereUniqueInput!
  data: GamingTimeSlotUpdateWithoutGamersDataInput!
}

input GamingTimeSlotUpdateWithWhereUniqueWithoutGamingSessionInput {
  where: GamingTimeSlotWhereUniqueInput!
  data: GamingTimeSlotUpdateWithoutGamingSessionDataInput!
}

input GamingTimeSlotUpsertWithoutBookingsInput {
  update: GamingTimeSlotUpdateWithoutBookingsDataInput!
  create: GamingTimeSlotCreateWithoutBookingsInput!
}

input GamingTimeSlotUpsertWithoutPlayersInput {
  update: GamingTimeSlotUpdateWithoutPlayersDataInput!
  create: GamingTimeSlotCreateWithoutPlayersInput!
}

input GamingTimeSlotUpsertWithWhereUniqueWithoutGamersInput {
  where: GamingTimeSlotWhereUniqueInput!
  update: GamingTimeSlotUpdateWithoutGamersDataInput!
  create: GamingTimeSlotCreateWithoutGamersInput!
}

input GamingTimeSlotUpsertWithWhereUniqueWithoutGamingSessionInput {
  where: GamingTimeSlotWhereUniqueInput!
  update: GamingTimeSlotUpdateWithoutGamingSessionDataInput!
  create: GamingTimeSlotCreateWithoutGamingSessionInput!
}

input GamingTimeSlotWhereInput {
  """Logical AND on all given filters."""
  AND: [GamingTimeSlotWhereInput!]

  """Logical OR on all given filters."""
  OR: [GamingTimeSlotWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GamingTimeSlotWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startTime: DateTime

  """All values that are not equal to given value."""
  startTime_not: DateTime

  """All values that are contained in given list."""
  startTime_in: [DateTime!]

  """All values that are not contained in given list."""
  startTime_not_in: [DateTime!]

  """All values less than the given value."""
  startTime_lt: DateTime

  """All values less than or equal the given value."""
  startTime_lte: DateTime

  """All values greater than the given value."""
  startTime_gt: DateTime

  """All values greater than or equal the given value."""
  startTime_gte: DateTime
  endTime: DateTime

  """All values that are not equal to given value."""
  endTime_not: DateTime

  """All values that are contained in given list."""
  endTime_in: [DateTime!]

  """All values that are not contained in given list."""
  endTime_not_in: [DateTime!]

  """All values less than the given value."""
  endTime_lt: DateTime

  """All values less than or equal the given value."""
  endTime_lte: DateTime

  """All values greater than the given value."""
  endTime_gt: DateTime

  """All values greater than or equal the given value."""
  endTime_gte: DateTime
  length: Int

  """All values that are not equal to given value."""
  length_not: Int

  """All values that are contained in given list."""
  length_in: [Int!]

  """All values that are not contained in given list."""
  length_not_in: [Int!]

  """All values less than the given value."""
  length_lt: Int

  """All values less than or equal the given value."""
  length_lte: Int

  """All values greater than the given value."""
  length_gt: Int

  """All values greater than or equal the given value."""
  length_gte: Int
  slots: Int

  """All values that are not equal to given value."""
  slots_not: Int

  """All values that are contained in given list."""
  slots_in: [Int!]

  """All values that are not contained in given list."""
  slots_not_in: [Int!]

  """All values less than the given value."""
  slots_lt: Int

  """All values less than or equal the given value."""
  slots_lte: Int

  """All values greater than the given value."""
  slots_gt: Int

  """All values greater than or equal the given value."""
  slots_gte: Int
  gamingSession: GamingSessionWhereInput
  gamers_every: UserWhereInput
  gamers_some: UserWhereInput
  gamers_none: UserWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  players_every: BookedPlayerWhereInput
  players_some: BookedPlayerWhereInput
  players_none: BookedPlayerWhereInput
}

input GamingTimeSlotWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

enum Launcher {
  EPIC
  STEAM
  ORIGIN
  BATTLENET
  GOG
  UPLAY
  BETHESDA
  ITCH
  WINDOWS
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUserIndex(data: UserIndexCreateInput!): UserIndex!
  createBookedPlayer(data: BookedPlayerCreateInput!): BookedPlayer!
  createGamerTag(data: GamerTagCreateInput!): GamerTag!
  createPCLauncher(data: PCLauncherCreateInput!): PCLauncher!
  createGamerRequest(data: GamerRequestCreateInput!): GamerRequest!
  createGameIndex(data: GameIndexCreateInput!): GameIndex!
  createGamingSessionIndex(data: GamingSessionIndexCreateInput!): GamingSessionIndex!
  createSessionReviewIndex(data: SessionReviewIndexCreateInput!): SessionReviewIndex!
  createGamingTimeSlot(data: GamingTimeSlotCreateInput!): GamingTimeSlot!
  createBookingInvite(data: BookingInviteCreateInput!): BookingInvite!
  createFriendRequest(data: FriendRequestCreateInput!): FriendRequest!
  createNotification(data: NotificationCreateInput!): Notification!
  createRequirement(data: RequirementCreateInput!): Requirement!
  createGame(data: GameCreateInput!): Game!
  createDiscount(data: DiscountCreateInput!): Discount!
  createSessionReview(data: SessionReviewCreateInput!): SessionReview!
  createSocialMedia(data: SocialMediaCreateInput!): SocialMedia!
  createGamingSession(data: GamingSessionCreateInput!): GamingSession!
  createBooking(data: BookingCreateInput!): Booking!
  createUser(data: UserCreateInput!): User!
  updateUserIndex(data: UserIndexUpdateInput!, where: UserIndexWhereUniqueInput!): UserIndex
  updateBookedPlayer(data: BookedPlayerUpdateInput!, where: BookedPlayerWhereUniqueInput!): BookedPlayer
  updateGamerTag(data: GamerTagUpdateInput!, where: GamerTagWhereUniqueInput!): GamerTag
  updatePCLauncher(data: PCLauncherUpdateInput!, where: PCLauncherWhereUniqueInput!): PCLauncher
  updateGamerRequest(data: GamerRequestUpdateInput!, where: GamerRequestWhereUniqueInput!): GamerRequest
  updateGameIndex(data: GameIndexUpdateInput!, where: GameIndexWhereUniqueInput!): GameIndex
  updateGamingSessionIndex(data: GamingSessionIndexUpdateInput!, where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  updateSessionReviewIndex(data: SessionReviewIndexUpdateInput!, where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  updateGamingTimeSlot(data: GamingTimeSlotUpdateInput!, where: GamingTimeSlotWhereUniqueInput!): GamingTimeSlot
  updateBookingInvite(data: BookingInviteUpdateInput!, where: BookingInviteWhereUniqueInput!): BookingInvite
  updateFriendRequest(data: FriendRequestUpdateInput!, where: FriendRequestWhereUniqueInput!): FriendRequest
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateSessionReview(data: SessionReviewUpdateInput!, where: SessionReviewWhereUniqueInput!): SessionReview
  updateSocialMedia(data: SocialMediaUpdateInput!, where: SocialMediaWhereUniqueInput!): SocialMedia
  updateGamingSession(data: GamingSessionUpdateInput!, where: GamingSessionWhereUniqueInput!): GamingSession
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteUserIndex(where: UserIndexWhereUniqueInput!): UserIndex
  deleteBookedPlayer(where: BookedPlayerWhereUniqueInput!): BookedPlayer
  deleteGamerTag(where: GamerTagWhereUniqueInput!): GamerTag
  deletePCLauncher(where: PCLauncherWhereUniqueInput!): PCLauncher
  deleteGamerRequest(where: GamerRequestWhereUniqueInput!): GamerRequest
  deleteGameIndex(where: GameIndexWhereUniqueInput!): GameIndex
  deleteGamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  deleteSessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  deleteGamingTimeSlot(where: GamingTimeSlotWhereUniqueInput!): GamingTimeSlot
  deleteBookingInvite(where: BookingInviteWhereUniqueInput!): BookingInvite
  deleteFriendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteSessionReview(where: SessionReviewWhereUniqueInput!): SessionReview
  deleteSocialMedia(where: SocialMediaWhereUniqueInput!): SocialMedia
  deleteGamingSession(where: GamingSessionWhereUniqueInput!): GamingSession
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteUser(where: UserWhereUniqueInput!): User
  upsertUserIndex(where: UserIndexWhereUniqueInput!, create: UserIndexCreateInput!, update: UserIndexUpdateInput!): UserIndex!
  upsertBookedPlayer(where: BookedPlayerWhereUniqueInput!, create: BookedPlayerCreateInput!, update: BookedPlayerUpdateInput!): BookedPlayer!
  upsertGamerTag(where: GamerTagWhereUniqueInput!, create: GamerTagCreateInput!, update: GamerTagUpdateInput!): GamerTag!
  upsertPCLauncher(where: PCLauncherWhereUniqueInput!, create: PCLauncherCreateInput!, update: PCLauncherUpdateInput!): PCLauncher!
  upsertGamerRequest(where: GamerRequestWhereUniqueInput!, create: GamerRequestCreateInput!, update: GamerRequestUpdateInput!): GamerRequest!
  upsertGameIndex(where: GameIndexWhereUniqueInput!, create: GameIndexCreateInput!, update: GameIndexUpdateInput!): GameIndex!
  upsertGamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!, create: GamingSessionIndexCreateInput!, update: GamingSessionIndexUpdateInput!): GamingSessionIndex!
  upsertSessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!, create: SessionReviewIndexCreateInput!, update: SessionReviewIndexUpdateInput!): SessionReviewIndex!
  upsertGamingTimeSlot(where: GamingTimeSlotWhereUniqueInput!, create: GamingTimeSlotCreateInput!, update: GamingTimeSlotUpdateInput!): GamingTimeSlot!
  upsertBookingInvite(where: BookingInviteWhereUniqueInput!, create: BookingInviteCreateInput!, update: BookingInviteUpdateInput!): BookingInvite!
  upsertFriendRequest(where: FriendRequestWhereUniqueInput!, create: FriendRequestCreateInput!, update: FriendRequestUpdateInput!): FriendRequest!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  upsertSessionReview(where: SessionReviewWhereUniqueInput!, create: SessionReviewCreateInput!, update: SessionReviewUpdateInput!): SessionReview!
  upsertSocialMedia(where: SocialMediaWhereUniqueInput!, create: SocialMediaCreateInput!, update: SocialMediaUpdateInput!): SocialMedia!
  upsertGamingSession(where: GamingSessionWhereUniqueInput!, create: GamingSessionCreateInput!, update: GamingSessionUpdateInput!): GamingSession!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyUserIndexes(data: UserIndexUpdateManyMutationInput!, where: UserIndexWhereInput): BatchPayload!
  updateManyGamerTags(data: GamerTagUpdateManyMutationInput!, where: GamerTagWhereInput): BatchPayload!
  updateManyPCLaunchers(data: PCLauncherUpdateManyMutationInput!, where: PCLauncherWhereInput): BatchPayload!
  updateManyGamerRequests(data: GamerRequestUpdateManyMutationInput!, where: GamerRequestWhereInput): BatchPayload!
  updateManyGameIndexes(data: GameIndexUpdateManyMutationInput!, where: GameIndexWhereInput): BatchPayload!
  updateManyGamingSessionIndexes(data: GamingSessionIndexUpdateManyMutationInput!, where: GamingSessionIndexWhereInput): BatchPayload!
  updateManySessionReviewIndexes(data: SessionReviewIndexUpdateManyMutationInput!, where: SessionReviewIndexWhereInput): BatchPayload!
  updateManyGamingTimeSlots(data: GamingTimeSlotUpdateManyMutationInput!, where: GamingTimeSlotWhereInput): BatchPayload!
  updateManyBookingInvites(data: BookingInviteUpdateManyMutationInput!, where: BookingInviteWhereInput): BatchPayload!
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  updateManyRequirements(data: RequirementUpdateManyMutationInput!, where: RequirementWhereInput): BatchPayload!
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  updateManyDiscounts(data: DiscountUpdateManyMutationInput!, where: DiscountWhereInput): BatchPayload!
  updateManySessionReviews(data: SessionReviewUpdateManyMutationInput!, where: SessionReviewWhereInput): BatchPayload!
  updateManySocialMedias(data: SocialMediaUpdateManyMutationInput!, where: SocialMediaWhereInput): BatchPayload!
  updateManyGamingSessions(data: GamingSessionUpdateManyMutationInput!, where: GamingSessionWhereInput): BatchPayload!
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyUserIndexes(where: UserIndexWhereInput): BatchPayload!
  deleteManyBookedPlayers(where: BookedPlayerWhereInput): BatchPayload!
  deleteManyGamerTags(where: GamerTagWhereInput): BatchPayload!
  deleteManyPCLaunchers(where: PCLauncherWhereInput): BatchPayload!
  deleteManyGamerRequests(where: GamerRequestWhereInput): BatchPayload!
  deleteManyGameIndexes(where: GameIndexWhereInput): BatchPayload!
  deleteManyGamingSessionIndexes(where: GamingSessionIndexWhereInput): BatchPayload!
  deleteManySessionReviewIndexes(where: SessionReviewIndexWhereInput): BatchPayload!
  deleteManyGamingTimeSlots(where: GamingTimeSlotWhereInput): BatchPayload!
  deleteManyBookingInvites(where: BookingInviteWhereInput): BatchPayload!
  deleteManyFriendRequests(where: FriendRequestWhereInput): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  deleteManyRequirements(where: RequirementWhereInput): BatchPayload!
  deleteManyGames(where: GameWhereInput): BatchPayload!
  deleteManyDiscounts(where: DiscountWhereInput): BatchPayload!
  deleteManySessionReviews(where: SessionReviewWhereInput): BatchPayload!
  deleteManySocialMedias(where: SocialMediaWhereInput): BatchPayload!
  deleteManyGamingSessions(where: GamingSessionWhereInput): BatchPayload!
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notification implements Node {
  id: ID!
  type: NotificationType!
  text: String!
  for: User!
  friendRequest: FriendRequest
  bookingInvite: BookingInvite
  booking: Booking
  friend: User
  viewed: Boolean!
}

"""A connection to a list of items."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  type: NotificationType!
  text: String!
  viewed: Boolean
  for: UserCreateOneInput!
  friendRequest: FriendRequestCreateOneWithoutNotificationInput
  bookingInvite: BookingInviteCreateOneWithoutNotificationInput
  booking: BookingCreateOneInput
  friend: UserCreateOneInput
}

input NotificationCreateOneWithoutBookingInviteInput {
  create: NotificationCreateWithoutBookingInviteInput
  connect: NotificationWhereUniqueInput
}

input NotificationCreateOneWithoutFriendRequestInput {
  create: NotificationCreateWithoutFriendRequestInput
  connect: NotificationWhereUniqueInput
}

input NotificationCreateWithoutBookingInviteInput {
  type: NotificationType!
  text: String!
  viewed: Boolean
  for: UserCreateOneInput!
  friendRequest: FriendRequestCreateOneWithoutNotificationInput
  booking: BookingCreateOneInput
  friend: UserCreateOneInput
}

input NotificationCreateWithoutFriendRequestInput {
  type: NotificationType!
  text: String!
  viewed: Boolean
  for: UserCreateOneInput!
  bookingInvite: BookingInviteCreateOneWithoutNotificationInput
  booking: BookingCreateOneInput
  friend: UserCreateOneInput
}

"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge."""
  node: Notification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  text_ASC
  text_DESC
  viewed_ASC
  viewed_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NotificationPreviousValues {
  id: ID!
  type: NotificationType!
  text: String!
  viewed: Boolean!
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

enum NotificationType {
  CANCELLED_TIMESLOT
  ACCEPTED_GAMER_REQUEST
  DENIED_GAMER_REQUEST
  FRIEND_REQUEST
  ACCEPTED_TIMESLOT_REQUEST
  TIMESLOT_REQUEST
  BOOKED_TIMESLOT
  TIMESLOT_INVITE
  ACCEPTED_TIMESLOT_INVITE
  ACCEPTED_FRIEND_REQUEST
}

input NotificationUpdateInput {
  type: NotificationType
  text: String
  viewed: Boolean
  for: UserUpdateOneRequiredInput
  friendRequest: FriendRequestUpdateOneWithoutNotificationInput
  bookingInvite: BookingInviteUpdateOneWithoutNotificationInput
  booking: BookingUpdateOneInput
  friend: UserUpdateOneInput
}

input NotificationUpdateManyMutationInput {
  type: NotificationType
  text: String
  viewed: Boolean
}

input NotificationUpdateOneRequiredWithoutFriendRequestInput {
  create: NotificationCreateWithoutFriendRequestInput
  connect: NotificationWhereUniqueInput
  update: NotificationUpdateWithoutFriendRequestDataInput
  upsert: NotificationUpsertWithoutFriendRequestInput
}

input NotificationUpdateOneWithoutBookingInviteInput {
  create: NotificationCreateWithoutBookingInviteInput
  connect: NotificationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NotificationUpdateWithoutBookingInviteDataInput
  upsert: NotificationUpsertWithoutBookingInviteInput
}

input NotificationUpdateWithoutBookingInviteDataInput {
  type: NotificationType
  text: String
  viewed: Boolean
  for: UserUpdateOneRequiredInput
  friendRequest: FriendRequestUpdateOneWithoutNotificationInput
  booking: BookingUpdateOneInput
  friend: UserUpdateOneInput
}

input NotificationUpdateWithoutFriendRequestDataInput {
  type: NotificationType
  text: String
  viewed: Boolean
  for: UserUpdateOneRequiredInput
  bookingInvite: BookingInviteUpdateOneWithoutNotificationInput
  booking: BookingUpdateOneInput
  friend: UserUpdateOneInput
}

input NotificationUpsertWithoutBookingInviteInput {
  update: NotificationUpdateWithoutBookingInviteDataInput!
  create: NotificationCreateWithoutBookingInviteInput!
}

input NotificationUpsertWithoutFriendRequestInput {
  update: NotificationUpdateWithoutFriendRequestDataInput!
  create: NotificationCreateWithoutFriendRequestInput!
}

input NotificationWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: NotificationType

  """All values that are not equal to given value."""
  type_not: NotificationType

  """All values that are contained in given list."""
  type_in: [NotificationType!]

  """All values that are not contained in given list."""
  type_not_in: [NotificationType!]
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  viewed: Boolean

  """All values that are not equal to given value."""
  viewed_not: Boolean
  for: UserWhereInput
  friendRequest: FriendRequestWhereInput
  bookingInvite: BookingInviteWhereInput
  booking: BookingWhereInput
  friend: UserWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

enum Occupations {
  CELEBRITY
  INFLUENCER
  ENTERTAINER
  STREAMER
  YOUTUBER
  MEDIA
  SPORTS_PERSONALITY
  INTERNET_PERSONALITY
  ATHLETE
  PROFESIONAL_GAMER
  ACTOR
  COMEDIAN
  ROCK_STAR
  RAPPER
  SINGER
  MUSICIAN
  POLITICIAN
  DJ
  MUSIC_PRODUCER
  ENTREPRENEUR
  ARTIST
  ACTRESS
  MODEL
  ADULT_PERFORMER
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PCLauncher implements Node {
  id: ID!
  gamerTag: GamerTag!
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
}

"""A connection to a list of items."""
type PCLauncherConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PCLauncherEdge]!
  aggregate: AggregatePCLauncher!
}

input PCLauncherCreateInput {
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  gamerTag: GamerTagCreateOneWithoutPcInput!
}

input PCLauncherCreateOneWithoutGamerTagInput {
  create: PCLauncherCreateWithoutGamerTagInput
  connect: PCLauncherWhereUniqueInput
}

input PCLauncherCreateWithoutGamerTagInput {
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
}

"""An edge in a connection."""
type PCLauncherEdge {
  """The item at the end of the edge."""
  node: PCLauncher!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PCLauncherOrderByInput {
  id_ASC
  id_DESC
  epic_ASC
  epic_DESC
  steam_ASC
  steam_DESC
  origin_ASC
  origin_DESC
  gog_ASC
  gog_DESC
  battlenet_ASC
  battlenet_DESC
  uplay_ASC
  uplay_DESC
  bethesda_ASC
  bethesda_DESC
  itch_ASC
  itch_DESC
  windows_ASC
  windows_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PCLauncherPreviousValues {
  id: ID!
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
}

type PCLauncherSubscriptionPayload {
  mutation: MutationType!
  node: PCLauncher
  updatedFields: [String!]
  previousValues: PCLauncherPreviousValues
}

input PCLauncherSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PCLauncherSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PCLauncherSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PCLauncherSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PCLauncherWhereInput
}

input PCLauncherUpdateInput {
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
  gamerTag: GamerTagUpdateOneRequiredWithoutPcInput
}

input PCLauncherUpdateManyMutationInput {
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
}

input PCLauncherUpdateOneWithoutGamerTagInput {
  create: PCLauncherCreateWithoutGamerTagInput
  connect: PCLauncherWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PCLauncherUpdateWithoutGamerTagDataInput
  upsert: PCLauncherUpsertWithoutGamerTagInput
}

input PCLauncherUpdateWithoutGamerTagDataInput {
  epic: String
  steam: String
  origin: String
  gog: String
  battlenet: String
  uplay: String
  bethesda: String
  itch: String
  windows: String
}

input PCLauncherUpsertWithoutGamerTagInput {
  update: PCLauncherUpdateWithoutGamerTagDataInput!
  create: PCLauncherCreateWithoutGamerTagInput!
}

input PCLauncherWhereInput {
  """Logical AND on all given filters."""
  AND: [PCLauncherWhereInput!]

  """Logical OR on all given filters."""
  OR: [PCLauncherWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PCLauncherWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  epic: String

  """All values that are not equal to given value."""
  epic_not: String

  """All values that are contained in given list."""
  epic_in: [String!]

  """All values that are not contained in given list."""
  epic_not_in: [String!]

  """All values less than the given value."""
  epic_lt: String

  """All values less than or equal the given value."""
  epic_lte: String

  """All values greater than the given value."""
  epic_gt: String

  """All values greater than or equal the given value."""
  epic_gte: String

  """All values containing the given string."""
  epic_contains: String

  """All values not containing the given string."""
  epic_not_contains: String

  """All values starting with the given string."""
  epic_starts_with: String

  """All values not starting with the given string."""
  epic_not_starts_with: String

  """All values ending with the given string."""
  epic_ends_with: String

  """All values not ending with the given string."""
  epic_not_ends_with: String
  steam: String

  """All values that are not equal to given value."""
  steam_not: String

  """All values that are contained in given list."""
  steam_in: [String!]

  """All values that are not contained in given list."""
  steam_not_in: [String!]

  """All values less than the given value."""
  steam_lt: String

  """All values less than or equal the given value."""
  steam_lte: String

  """All values greater than the given value."""
  steam_gt: String

  """All values greater than or equal the given value."""
  steam_gte: String

  """All values containing the given string."""
  steam_contains: String

  """All values not containing the given string."""
  steam_not_contains: String

  """All values starting with the given string."""
  steam_starts_with: String

  """All values not starting with the given string."""
  steam_not_starts_with: String

  """All values ending with the given string."""
  steam_ends_with: String

  """All values not ending with the given string."""
  steam_not_ends_with: String
  origin: String

  """All values that are not equal to given value."""
  origin_not: String

  """All values that are contained in given list."""
  origin_in: [String!]

  """All values that are not contained in given list."""
  origin_not_in: [String!]

  """All values less than the given value."""
  origin_lt: String

  """All values less than or equal the given value."""
  origin_lte: String

  """All values greater than the given value."""
  origin_gt: String

  """All values greater than or equal the given value."""
  origin_gte: String

  """All values containing the given string."""
  origin_contains: String

  """All values not containing the given string."""
  origin_not_contains: String

  """All values starting with the given string."""
  origin_starts_with: String

  """All values not starting with the given string."""
  origin_not_starts_with: String

  """All values ending with the given string."""
  origin_ends_with: String

  """All values not ending with the given string."""
  origin_not_ends_with: String
  gog: String

  """All values that are not equal to given value."""
  gog_not: String

  """All values that are contained in given list."""
  gog_in: [String!]

  """All values that are not contained in given list."""
  gog_not_in: [String!]

  """All values less than the given value."""
  gog_lt: String

  """All values less than or equal the given value."""
  gog_lte: String

  """All values greater than the given value."""
  gog_gt: String

  """All values greater than or equal the given value."""
  gog_gte: String

  """All values containing the given string."""
  gog_contains: String

  """All values not containing the given string."""
  gog_not_contains: String

  """All values starting with the given string."""
  gog_starts_with: String

  """All values not starting with the given string."""
  gog_not_starts_with: String

  """All values ending with the given string."""
  gog_ends_with: String

  """All values not ending with the given string."""
  gog_not_ends_with: String
  battlenet: String

  """All values that are not equal to given value."""
  battlenet_not: String

  """All values that are contained in given list."""
  battlenet_in: [String!]

  """All values that are not contained in given list."""
  battlenet_not_in: [String!]

  """All values less than the given value."""
  battlenet_lt: String

  """All values less than or equal the given value."""
  battlenet_lte: String

  """All values greater than the given value."""
  battlenet_gt: String

  """All values greater than or equal the given value."""
  battlenet_gte: String

  """All values containing the given string."""
  battlenet_contains: String

  """All values not containing the given string."""
  battlenet_not_contains: String

  """All values starting with the given string."""
  battlenet_starts_with: String

  """All values not starting with the given string."""
  battlenet_not_starts_with: String

  """All values ending with the given string."""
  battlenet_ends_with: String

  """All values not ending with the given string."""
  battlenet_not_ends_with: String
  uplay: String

  """All values that are not equal to given value."""
  uplay_not: String

  """All values that are contained in given list."""
  uplay_in: [String!]

  """All values that are not contained in given list."""
  uplay_not_in: [String!]

  """All values less than the given value."""
  uplay_lt: String

  """All values less than or equal the given value."""
  uplay_lte: String

  """All values greater than the given value."""
  uplay_gt: String

  """All values greater than or equal the given value."""
  uplay_gte: String

  """All values containing the given string."""
  uplay_contains: String

  """All values not containing the given string."""
  uplay_not_contains: String

  """All values starting with the given string."""
  uplay_starts_with: String

  """All values not starting with the given string."""
  uplay_not_starts_with: String

  """All values ending with the given string."""
  uplay_ends_with: String

  """All values not ending with the given string."""
  uplay_not_ends_with: String
  bethesda: String

  """All values that are not equal to given value."""
  bethesda_not: String

  """All values that are contained in given list."""
  bethesda_in: [String!]

  """All values that are not contained in given list."""
  bethesda_not_in: [String!]

  """All values less than the given value."""
  bethesda_lt: String

  """All values less than or equal the given value."""
  bethesda_lte: String

  """All values greater than the given value."""
  bethesda_gt: String

  """All values greater than or equal the given value."""
  bethesda_gte: String

  """All values containing the given string."""
  bethesda_contains: String

  """All values not containing the given string."""
  bethesda_not_contains: String

  """All values starting with the given string."""
  bethesda_starts_with: String

  """All values not starting with the given string."""
  bethesda_not_starts_with: String

  """All values ending with the given string."""
  bethesda_ends_with: String

  """All values not ending with the given string."""
  bethesda_not_ends_with: String
  itch: String

  """All values that are not equal to given value."""
  itch_not: String

  """All values that are contained in given list."""
  itch_in: [String!]

  """All values that are not contained in given list."""
  itch_not_in: [String!]

  """All values less than the given value."""
  itch_lt: String

  """All values less than or equal the given value."""
  itch_lte: String

  """All values greater than the given value."""
  itch_gt: String

  """All values greater than or equal the given value."""
  itch_gte: String

  """All values containing the given string."""
  itch_contains: String

  """All values not containing the given string."""
  itch_not_contains: String

  """All values starting with the given string."""
  itch_starts_with: String

  """All values not starting with the given string."""
  itch_not_starts_with: String

  """All values ending with the given string."""
  itch_ends_with: String

  """All values not ending with the given string."""
  itch_not_ends_with: String
  windows: String

  """All values that are not equal to given value."""
  windows_not: String

  """All values that are contained in given list."""
  windows_in: [String!]

  """All values that are not contained in given list."""
  windows_not_in: [String!]

  """All values less than the given value."""
  windows_lt: String

  """All values less than or equal the given value."""
  windows_lte: String

  """All values greater than the given value."""
  windows_gt: String

  """All values greater than or equal the given value."""
  windows_gte: String

  """All values containing the given string."""
  windows_contains: String

  """All values not containing the given string."""
  windows_not_contains: String

  """All values starting with the given string."""
  windows_starts_with: String

  """All values not starting with the given string."""
  windows_not_starts_with: String

  """All values ending with the given string."""
  windows_ends_with: String

  """All values not ending with the given string."""
  windows_not_ends_with: String
  gamerTag: GamerTagWhereInput
}

input PCLauncherWhereUniqueInput {
  id: ID
}

enum PlayerOrSession {
  PLAYER
  SESSION
}

enum PrismaDatabase {
  default
}

type Query {
  userIndexes(where: UserIndexWhereInput, orderBy: UserIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserIndex]!
  bookedPlayers(where: BookedPlayerWhereInput, orderBy: BookedPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookedPlayer]!
  gamerTags(where: GamerTagWhereInput, orderBy: GamerTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamerTag]!
  pCLaunchers(where: PCLauncherWhereInput, orderBy: PCLauncherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PCLauncher]!
  gamerRequests(where: GamerRequestWhereInput, orderBy: GamerRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamerRequest]!
  gameIndexes(where: GameIndexWhereInput, orderBy: GameIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameIndex]!
  gamingSessionIndexes(where: GamingSessionIndexWhereInput, orderBy: GamingSessionIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSessionIndex]!
  sessionReviewIndexes(where: SessionReviewIndexWhereInput, orderBy: SessionReviewIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReviewIndex]!
  gamingTimeSlots(where: GamingTimeSlotWhereInput, orderBy: GamingTimeSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingTimeSlot]!
  bookingInvites(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookingInvite]!
  friendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  requirements(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Requirement]!
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount]!
  sessionReviews(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReview]!
  socialMedias(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialMedia]!
  gamingSessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession]!
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  userIndex(where: UserIndexWhereUniqueInput!): UserIndex
  bookedPlayer(where: BookedPlayerWhereUniqueInput!): BookedPlayer
  gamerTag(where: GamerTagWhereUniqueInput!): GamerTag
  pCLauncher(where: PCLauncherWhereUniqueInput!): PCLauncher
  gamerRequest(where: GamerRequestWhereUniqueInput!): GamerRequest
  gameIndex(where: GameIndexWhereUniqueInput!): GameIndex
  gamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  sessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  gamingTimeSlot(where: GamingTimeSlotWhereUniqueInput!): GamingTimeSlot
  bookingInvite(where: BookingInviteWhereUniqueInput!): BookingInvite
  friendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  notification(where: NotificationWhereUniqueInput!): Notification
  game(where: GameWhereUniqueInput!): Game
  sessionReview(where: SessionReviewWhereUniqueInput!): SessionReview
  socialMedia(where: SocialMediaWhereUniqueInput!): SocialMedia
  gamingSession(where: GamingSessionWhereUniqueInput!): GamingSession
  booking(where: BookingWhereUniqueInput!): Booking
  user(where: UserWhereUniqueInput!): User
  userIndexesConnection(where: UserIndexWhereInput, orderBy: UserIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserIndexConnection!
  bookedPlayersConnection(where: BookedPlayerWhereInput, orderBy: BookedPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookedPlayerConnection!
  gamerTagsConnection(where: GamerTagWhereInput, orderBy: GamerTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamerTagConnection!
  pCLaunchersConnection(where: PCLauncherWhereInput, orderBy: PCLauncherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PCLauncherConnection!
  gamerRequestsConnection(where: GamerRequestWhereInput, orderBy: GamerRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamerRequestConnection!
  gameIndexesConnection(where: GameIndexWhereInput, orderBy: GameIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameIndexConnection!
  gamingSessionIndexesConnection(where: GamingSessionIndexWhereInput, orderBy: GamingSessionIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamingSessionIndexConnection!
  sessionReviewIndexesConnection(where: SessionReviewIndexWhereInput, orderBy: SessionReviewIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionReviewIndexConnection!
  gamingTimeSlotsConnection(where: GamingTimeSlotWhereInput, orderBy: GamingTimeSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamingTimeSlotConnection!
  bookingInvitesConnection(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingInviteConnection!
  friendRequestsConnection(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  requirementsConnection(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequirementConnection!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  discountsConnection(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscountConnection!
  sessionReviewsConnection(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionReviewConnection!
  socialMediasConnection(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialMediaConnection!
  gamingSessionsConnection(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamingSessionConnection!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Requirement {
  msg: String!
}

"""A connection to a list of items."""
type RequirementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RequirementEdge]!
  aggregate: AggregateRequirement!
}

input RequirementCreateInput {
  msg: String!
}

input RequirementCreateManyInput {
  create: [RequirementCreateInput!]
}

"""An edge in a connection."""
type RequirementEdge {
  """The item at the end of the edge."""
  node: Requirement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RequirementOrderByInput {
  msg_ASC
  msg_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RequirementPreviousValues {
  msg: String!
}

input RequirementScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RequirementScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequirementScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequirementScalarWhereInput!]
  msg: String

  """All values that are not equal to given value."""
  msg_not: String

  """All values that are contained in given list."""
  msg_in: [String!]

  """All values that are not contained in given list."""
  msg_not_in: [String!]

  """All values less than the given value."""
  msg_lt: String

  """All values less than or equal the given value."""
  msg_lte: String

  """All values greater than the given value."""
  msg_gt: String

  """All values greater than or equal the given value."""
  msg_gte: String

  """All values containing the given string."""
  msg_contains: String

  """All values not containing the given string."""
  msg_not_contains: String

  """All values starting with the given string."""
  msg_starts_with: String

  """All values not starting with the given string."""
  msg_not_starts_with: String

  """All values ending with the given string."""
  msg_ends_with: String

  """All values not ending with the given string."""
  msg_not_ends_with: String
}

type RequirementSubscriptionPayload {
  mutation: MutationType!
  node: Requirement
  updatedFields: [String!]
  previousValues: RequirementPreviousValues
}

input RequirementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RequirementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequirementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequirementSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RequirementWhereInput
}

input RequirementUpdateManyDataInput {
  msg: String
}

input RequirementUpdateManyInput {
  create: [RequirementCreateInput!]
  updateMany: [RequirementUpdateManyWithWhereNestedInput!]
  deleteMany: [RequirementScalarWhereInput!]
}

input RequirementUpdateManyMutationInput {
  msg: String
}

input RequirementUpdateManyWithWhereNestedInput {
  where: RequirementScalarWhereInput!
  data: RequirementUpdateManyDataInput!
}

input RequirementWhereInput {
  """Logical AND on all given filters."""
  AND: [RequirementWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequirementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequirementWhereInput!]
  msg: String

  """All values that are not equal to given value."""
  msg_not: String

  """All values that are contained in given list."""
  msg_in: [String!]

  """All values that are not contained in given list."""
  msg_not_in: [String!]

  """All values less than the given value."""
  msg_lt: String

  """All values less than or equal the given value."""
  msg_lte: String

  """All values greater than the given value."""
  msg_gt: String

  """All values greater than or equal the given value."""
  msg_gte: String

  """All values containing the given string."""
  msg_contains: String

  """All values not containing the given string."""
  msg_not_contains: String

  """All values starting with the given string."""
  msg_starts_with: String

  """All values not starting with the given string."""
  msg_not_starts_with: String

  """All values ending with the given string."""
  msg_ends_with: String

  """All values not ending with the given string."""
  msg_not_ends_with: String
}

enum Role {
  USER
  GAMER
  ADMIN
}

type SessionReview implements Node {
  id: ID!
  createdAt: DateTime!
  user: User!
  session: GamingSession!
  text: String!
  rating: Int!
}

"""A connection to a list of items."""
type SessionReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionReviewEdge]!
  aggregate: AggregateSessionReview!
}

input SessionReviewCreateInput {
  text: String!
  rating: Int!
  user: UserCreateOneWithoutReviewsInput!
  session: GamingSessionCreateOneWithoutReviewsInput!
}

input SessionReviewCreateManyWithoutSessionInput {
  create: [SessionReviewCreateWithoutSessionInput!]
  connect: [SessionReviewWhereUniqueInput!]
}

input SessionReviewCreateManyWithoutUserInput {
  create: [SessionReviewCreateWithoutUserInput!]
  connect: [SessionReviewWhereUniqueInput!]
}

input SessionReviewCreateOneInput {
  create: SessionReviewCreateInput
  connect: SessionReviewWhereUniqueInput
}

input SessionReviewCreateWithoutSessionInput {
  text: String!
  rating: Int!
  user: UserCreateOneWithoutReviewsInput!
}

input SessionReviewCreateWithoutUserInput {
  text: String!
  rating: Int!
  session: GamingSessionCreateOneWithoutReviewsInput!
}

"""An edge in a connection."""
type SessionReviewEdge {
  """The item at the end of the edge."""
  node: SessionReview!

  """A cursor for use in pagination."""
  cursor: String!
}

type SessionReviewIndex implements Node {
  id: ID!
  text: String!
  sessionReview: SessionReview!
}

"""A connection to a list of items."""
type SessionReviewIndexConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionReviewIndexEdge]!
  aggregate: AggregateSessionReviewIndex!
}

input SessionReviewIndexCreateInput {
  text: String!
  sessionReview: SessionReviewCreateOneInput!
}

"""An edge in a connection."""
type SessionReviewIndexEdge {
  """The item at the end of the edge."""
  node: SessionReviewIndex!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionReviewIndexOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SessionReviewIndexPreviousValues {
  id: ID!
  text: String!
}

type SessionReviewIndexSubscriptionPayload {
  mutation: MutationType!
  node: SessionReviewIndex
  updatedFields: [String!]
  previousValues: SessionReviewIndexPreviousValues
}

input SessionReviewIndexSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionReviewIndexSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionReviewIndexSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionReviewIndexSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionReviewIndexWhereInput
}

input SessionReviewIndexUpdateInput {
  text: String
  sessionReview: SessionReviewUpdateOneRequiredInput
}

input SessionReviewIndexUpdateManyMutationInput {
  text: String
}

input SessionReviewIndexWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionReviewIndexWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionReviewIndexWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionReviewIndexWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  sessionReview: SessionReviewWhereInput
}

input SessionReviewIndexWhereUniqueInput {
  id: ID
}

enum SessionReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  rating_ASC
  rating_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
  rating: Int!
}

input SessionReviewScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionReviewScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionReviewScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionReviewScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
}

type SessionReviewSubscriptionPayload {
  mutation: MutationType!
  node: SessionReview
  updatedFields: [String!]
  previousValues: SessionReviewPreviousValues
}

input SessionReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionReviewWhereInput
}

input SessionReviewUpdateDataInput {
  text: String
  rating: Int
  user: UserUpdateOneRequiredWithoutReviewsInput
  session: GamingSessionUpdateOneRequiredWithoutReviewsInput
}

input SessionReviewUpdateInput {
  text: String
  rating: Int
  user: UserUpdateOneRequiredWithoutReviewsInput
  session: GamingSessionUpdateOneRequiredWithoutReviewsInput
}

input SessionReviewUpdateManyDataInput {
  text: String
  rating: Int
}

input SessionReviewUpdateManyMutationInput {
  text: String
  rating: Int
}

input SessionReviewUpdateManyWithoutSessionInput {
  create: [SessionReviewCreateWithoutSessionInput!]
  connect: [SessionReviewWhereUniqueInput!]
  set: [SessionReviewWhereUniqueInput!]
  disconnect: [SessionReviewWhereUniqueInput!]
  delete: [SessionReviewWhereUniqueInput!]
  update: [SessionReviewUpdateWithWhereUniqueWithoutSessionInput!]
  updateMany: [SessionReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [SessionReviewScalarWhereInput!]
  upsert: [SessionReviewUpsertWithWhereUniqueWithoutSessionInput!]
}

input SessionReviewUpdateManyWithoutUserInput {
  create: [SessionReviewCreateWithoutUserInput!]
  connect: [SessionReviewWhereUniqueInput!]
  set: [SessionReviewWhereUniqueInput!]
  disconnect: [SessionReviewWhereUniqueInput!]
  delete: [SessionReviewWhereUniqueInput!]
  update: [SessionReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionReviewUpdateManyWithWhereNestedInput!]
  deleteMany: [SessionReviewScalarWhereInput!]
  upsert: [SessionReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionReviewUpdateManyWithWhereNestedInput {
  where: SessionReviewScalarWhereInput!
  data: SessionReviewUpdateManyDataInput!
}

input SessionReviewUpdateOneRequiredInput {
  create: SessionReviewCreateInput
  connect: SessionReviewWhereUniqueInput
  update: SessionReviewUpdateDataInput
  upsert: SessionReviewUpsertNestedInput
}

input SessionReviewUpdateWithoutSessionDataInput {
  text: String
  rating: Int
  user: UserUpdateOneRequiredWithoutReviewsInput
}

input SessionReviewUpdateWithoutUserDataInput {
  text: String
  rating: Int
  session: GamingSessionUpdateOneRequiredWithoutReviewsInput
}

input SessionReviewUpdateWithWhereUniqueWithoutSessionInput {
  where: SessionReviewWhereUniqueInput!
  data: SessionReviewUpdateWithoutSessionDataInput!
}

input SessionReviewUpdateWithWhereUniqueWithoutUserInput {
  where: SessionReviewWhereUniqueInput!
  data: SessionReviewUpdateWithoutUserDataInput!
}

input SessionReviewUpsertNestedInput {
  update: SessionReviewUpdateDataInput!
  create: SessionReviewCreateInput!
}

input SessionReviewUpsertWithWhereUniqueWithoutSessionInput {
  where: SessionReviewWhereUniqueInput!
  update: SessionReviewUpdateWithoutSessionDataInput!
  create: SessionReviewCreateWithoutSessionInput!
}

input SessionReviewUpsertWithWhereUniqueWithoutUserInput {
  where: SessionReviewWhereUniqueInput!
  update: SessionReviewUpdateWithoutUserDataInput!
  create: SessionReviewCreateWithoutUserInput!
}

input SessionReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  user: UserWhereInput
  session: GamingSessionWhereInput
}

input SessionReviewWhereUniqueInput {
  id: ID
}

type SocialMedia implements Node {
  id: ID!
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

"""A connection to a list of items."""
type SocialMediaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SocialMediaEdge]!
  aggregate: AggregateSocialMedia!
}

input SocialMediaCreateInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaCreateOneInput {
  create: SocialMediaCreateInput
  connect: SocialMediaWhereUniqueInput
}

"""An edge in a connection."""
type SocialMediaEdge {
  """The item at the end of the edge."""
  node: SocialMedia!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SocialMediaOrderByInput {
  id_ASC
  id_DESC
  twitter_ASC
  twitter_DESC
  facebook_ASC
  facebook_DESC
  youtube_ASC
  youtube_DESC
  instagram_ASC
  instagram_DESC
  twitch_ASC
  twitch_DESC
  snapchat_ASC
  snapchat_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SocialMediaPreviousValues {
  id: ID!
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

type SocialMediaSubscriptionPayload {
  mutation: MutationType!
  node: SocialMedia
  updatedFields: [String!]
  previousValues: SocialMediaPreviousValues
}

input SocialMediaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialMediaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialMediaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialMediaSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SocialMediaWhereInput
}

input SocialMediaUpdateDataInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateManyMutationInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateOneRequiredInput {
  create: SocialMediaCreateInput
  connect: SocialMediaWhereUniqueInput
  update: SocialMediaUpdateDataInput
  upsert: SocialMediaUpsertNestedInput
}

input SocialMediaUpsertNestedInput {
  update: SocialMediaUpdateDataInput!
  create: SocialMediaCreateInput!
}

input SocialMediaWhereInput {
  """Logical AND on all given filters."""
  AND: [SocialMediaWhereInput!]

  """Logical OR on all given filters."""
  OR: [SocialMediaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SocialMediaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  twitter: String

  """All values that are not equal to given value."""
  twitter_not: String

  """All values that are contained in given list."""
  twitter_in: [String!]

  """All values that are not contained in given list."""
  twitter_not_in: [String!]

  """All values less than the given value."""
  twitter_lt: String

  """All values less than or equal the given value."""
  twitter_lte: String

  """All values greater than the given value."""
  twitter_gt: String

  """All values greater than or equal the given value."""
  twitter_gte: String

  """All values containing the given string."""
  twitter_contains: String

  """All values not containing the given string."""
  twitter_not_contains: String

  """All values starting with the given string."""
  twitter_starts_with: String

  """All values not starting with the given string."""
  twitter_not_starts_with: String

  """All values ending with the given string."""
  twitter_ends_with: String

  """All values not ending with the given string."""
  twitter_not_ends_with: String
  facebook: String

  """All values that are not equal to given value."""
  facebook_not: String

  """All values that are contained in given list."""
  facebook_in: [String!]

  """All values that are not contained in given list."""
  facebook_not_in: [String!]

  """All values less than the given value."""
  facebook_lt: String

  """All values less than or equal the given value."""
  facebook_lte: String

  """All values greater than the given value."""
  facebook_gt: String

  """All values greater than or equal the given value."""
  facebook_gte: String

  """All values containing the given string."""
  facebook_contains: String

  """All values not containing the given string."""
  facebook_not_contains: String

  """All values starting with the given string."""
  facebook_starts_with: String

  """All values not starting with the given string."""
  facebook_not_starts_with: String

  """All values ending with the given string."""
  facebook_ends_with: String

  """All values not ending with the given string."""
  facebook_not_ends_with: String
  youtube: String

  """All values that are not equal to given value."""
  youtube_not: String

  """All values that are contained in given list."""
  youtube_in: [String!]

  """All values that are not contained in given list."""
  youtube_not_in: [String!]

  """All values less than the given value."""
  youtube_lt: String

  """All values less than or equal the given value."""
  youtube_lte: String

  """All values greater than the given value."""
  youtube_gt: String

  """All values greater than or equal the given value."""
  youtube_gte: String

  """All values containing the given string."""
  youtube_contains: String

  """All values not containing the given string."""
  youtube_not_contains: String

  """All values starting with the given string."""
  youtube_starts_with: String

  """All values not starting with the given string."""
  youtube_not_starts_with: String

  """All values ending with the given string."""
  youtube_ends_with: String

  """All values not ending with the given string."""
  youtube_not_ends_with: String
  instagram: String

  """All values that are not equal to given value."""
  instagram_not: String

  """All values that are contained in given list."""
  instagram_in: [String!]

  """All values that are not contained in given list."""
  instagram_not_in: [String!]

  """All values less than the given value."""
  instagram_lt: String

  """All values less than or equal the given value."""
  instagram_lte: String

  """All values greater than the given value."""
  instagram_gt: String

  """All values greater than or equal the given value."""
  instagram_gte: String

  """All values containing the given string."""
  instagram_contains: String

  """All values not containing the given string."""
  instagram_not_contains: String

  """All values starting with the given string."""
  instagram_starts_with: String

  """All values not starting with the given string."""
  instagram_not_starts_with: String

  """All values ending with the given string."""
  instagram_ends_with: String

  """All values not ending with the given string."""
  instagram_not_ends_with: String
  twitch: String

  """All values that are not equal to given value."""
  twitch_not: String

  """All values that are contained in given list."""
  twitch_in: [String!]

  """All values that are not contained in given list."""
  twitch_not_in: [String!]

  """All values less than the given value."""
  twitch_lt: String

  """All values less than or equal the given value."""
  twitch_lte: String

  """All values greater than the given value."""
  twitch_gt: String

  """All values greater than or equal the given value."""
  twitch_gte: String

  """All values containing the given string."""
  twitch_contains: String

  """All values not containing the given string."""
  twitch_not_contains: String

  """All values starting with the given string."""
  twitch_starts_with: String

  """All values not starting with the given string."""
  twitch_not_starts_with: String

  """All values ending with the given string."""
  twitch_ends_with: String

  """All values not ending with the given string."""
  twitch_not_ends_with: String
  snapchat: String

  """All values that are not equal to given value."""
  snapchat_not: String

  """All values that are contained in given list."""
  snapchat_in: [String!]

  """All values that are not contained in given list."""
  snapchat_not_in: [String!]

  """All values less than the given value."""
  snapchat_lt: String

  """All values less than or equal the given value."""
  snapchat_lte: String

  """All values greater than the given value."""
  snapchat_gt: String

  """All values greater than or equal the given value."""
  snapchat_gte: String

  """All values containing the given string."""
  snapchat_contains: String

  """All values not containing the given string."""
  snapchat_not_contains: String

  """All values starting with the given string."""
  snapchat_starts_with: String

  """All values not starting with the given string."""
  snapchat_not_starts_with: String

  """All values ending with the given string."""
  snapchat_ends_with: String

  """All values not ending with the given string."""
  snapchat_not_ends_with: String
}

input SocialMediaWhereUniqueInput {
  id: ID
}

type Subscription {
  userIndex(where: UserIndexSubscriptionWhereInput): UserIndexSubscriptionPayload
  bookedPlayer(where: BookedPlayerSubscriptionWhereInput): BookedPlayerSubscriptionPayload
  gamerTag(where: GamerTagSubscriptionWhereInput): GamerTagSubscriptionPayload
  pCLauncher(where: PCLauncherSubscriptionWhereInput): PCLauncherSubscriptionPayload
  gamerRequest(where: GamerRequestSubscriptionWhereInput): GamerRequestSubscriptionPayload
  gameIndex(where: GameIndexSubscriptionWhereInput): GameIndexSubscriptionPayload
  gamingSessionIndex(where: GamingSessionIndexSubscriptionWhereInput): GamingSessionIndexSubscriptionPayload
  sessionReviewIndex(where: SessionReviewIndexSubscriptionWhereInput): SessionReviewIndexSubscriptionPayload
  gamingTimeSlot(where: GamingTimeSlotSubscriptionWhereInput): GamingTimeSlotSubscriptionPayload
  bookingInvite(where: BookingInviteSubscriptionWhereInput): BookingInviteSubscriptionPayload
  friendRequest(where: FriendRequestSubscriptionWhereInput): FriendRequestSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  requirement(where: RequirementSubscriptionWhereInput): RequirementSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  discount(where: DiscountSubscriptionWhereInput): DiscountSubscriptionPayload
  sessionReview(where: SessionReviewSubscriptionWhereInput): SessionReviewSubscriptionPayload
  socialMedia(where: SocialMediaSubscriptionWhereInput): SocialMediaSubscriptionPayload
  gamingSession(where: GamingSessionSubscriptionWhereInput): GamingSessionSubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

enum System {
  PS4
  PC
  XBOX_ONE
  NINTENDO_SWITCH
}

enum Tags {
  ACTION
  ADVENTURE_GAME
  CARD_AND_BOARD_GAME
  COMPILATION
  DRIVING_SLASH_RACING_GAME
  EDUCATIONAL_GAME
  FIGHTING
  FLIGHT_SIMULATOR
  FPS
  GAMBLING_GAME
  HIDDEN_OBJECTS
  HORROR
  INDIE_GAME
  METROIDVANIA
  MMORPG
  MOBA
  OPEN_WORLD
  PINBALL
  PLATFORMER
  POINT_AND_CLICK
  PUZZLE
  RHYTHM_AND_MUSIC_GAME
  ROGUELIKE
  RPG
  RTS
  SERIES_COLON_SOULS
  SHOOT_HYPHEN_EM_UP
  SHOOTER
  SIMULATION
  SPORTS_GAME
  STEALTH
  STRATEGY
  SURVIVAL
  VISUAL_NOVEL
}

enum TypeOfGame {
  CUSTOM
  MATCHMAKING
}

type User implements Node {
  id: ID!
  email: String!
  username: String!
  password: String!
  isGamer: Boolean!
  isAdmin: Boolean!
  gamerIsSetUp: Boolean!
  occupations: [Occupations!]!
  name: String!
  aboutMe: String
  favoriteGames(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game!]
  sessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession!]
  timeSlots(where: GamingTimeSlotWhereInput, orderBy: GamingTimeSlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingTimeSlot!]
  timeSlotsBooked(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  timeSlotsPlayed(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  invites(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookingInvite!]
  invitesReceived(where: BookingInviteWhereInput, orderBy: BookingInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BookingInvite!]
  setup: Int
  reviews(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReview!]
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  gamertags: GamerTag
  roles: [Role!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  timeSlotsBooked: BookingCreateManyWithoutBookeeInput
  timeSlotsPlayed: BookingCreateManyWithoutPlayersInput
  invites: BookingInviteCreateManyWithoutFromInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSessionsInput {
  create: [UserCreateWithoutSessionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTimeSlotsInput {
  create: [UserCreateWithoutTimeSlotsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTimeSlotsPlayedInput {
  create: [UserCreateWithoutTimeSlotsPlayedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateoccupationsInput {
  set: [Occupations!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGamertagsInput {
  create: UserCreateWithoutGamertagsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInvitesInput {
  create: UserCreateWithoutInvitesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInvitesReceivedInput {
  create: UserCreateWithoutInvitesReceivedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTimeSlotsBookedInput {
  create: UserCreateWithoutTimeSlotsBookedInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [Role!]
}

input UserCreateWithoutGamertagsInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  timeSlotsBooked: BookingCreateManyWithoutBookeeInput
  timeSlotsPlayed: BookingCreateManyWithoutPlayersInput
  invites: BookingInviteCreateManyWithoutFromInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
}

input UserCreateWithoutInvitesInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  timeSlotsBooked: BookingCreateManyWithoutBookeeInput
  timeSlotsPlayed: BookingCreateManyWithoutPlayersInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
}

input UserCreateWithoutInvitesReceivedInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  timeSlotsBooked: BookingCreateManyWithoutBookeeInput
  timeSlotsPlayed: BookingCreateManyWithoutPlayersInput
  invites: BookingInviteCreateManyWithoutFromInput
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
}

input UserCreateWithoutReviewsInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  timeSlotsBooked: BookingCreateManyWithoutBookeeInput
  timeSlotsPlayed: BookingCreateManyWithoutPlayersInput
  invites: BookingInviteCreateManyWithoutFromInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
}

input UserCreateWithoutSessionsInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  timeSlotsBooked: BookingCreateManyWithoutBookeeInput
  timeSlotsPlayed: BookingCreateManyWithoutPlayersInput
  invites: BookingInviteCreateManyWithoutFromInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
}

input UserCreateWithoutTimeSlotsBookedInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  timeSlotsPlayed: BookingCreateManyWithoutPlayersInput
  invites: BookingInviteCreateManyWithoutFromInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
}

input UserCreateWithoutTimeSlotsInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlotsBooked: BookingCreateManyWithoutBookeeInput
  timeSlotsPlayed: BookingCreateManyWithoutPlayersInput
  invites: BookingInviteCreateManyWithoutFromInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
}

input UserCreateWithoutTimeSlotsPlayedInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String!
  aboutMe: String
  setup: Int
  occupations: UserCreateoccupationsInput
  roles: UserCreaterolesInput
  favoriteGames: GameCreateManyInput
  sessions: GamingSessionCreateManyWithoutGamersInput
  timeSlots: GamingTimeSlotCreateManyWithoutGamersInput
  timeSlotsBooked: BookingCreateManyWithoutBookeeInput
  invites: BookingInviteCreateManyWithoutFromInput
  invitesReceived: BookingInviteCreateManyWithoutToInput
  reviews: SessionReviewCreateManyWithoutUserInput
  friends: UserCreateManyInput
  gamertags: GamerTagCreateOneWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserIndex implements Node {
  id: ID!
  email: String!
  username: String!
  name: String!
  user: User!
}

"""A connection to a list of items."""
type UserIndexConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserIndexEdge]!
  aggregate: AggregateUserIndex!
}

input UserIndexCreateInput {
  email: String!
  username: String!
  name: String!
  user: UserCreateOneInput!
}

"""An edge in a connection."""
type UserIndexEdge {
  """The item at the end of the edge."""
  node: UserIndex!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserIndexOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserIndexPreviousValues {
  id: ID!
  email: String!
  username: String!
  name: String!
}

type UserIndexSubscriptionPayload {
  mutation: MutationType!
  node: UserIndex
  updatedFields: [String!]
  previousValues: UserIndexPreviousValues
}

input UserIndexSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserIndexSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserIndexSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserIndexSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserIndexWhereInput
}

input UserIndexUpdateInput {
  email: String
  username: String
  name: String
  user: UserUpdateOneRequiredInput
}

input UserIndexUpdateManyMutationInput {
  email: String
  username: String
  name: String
}

input UserIndexWhereInput {
  """Logical AND on all given filters."""
  AND: [UserIndexWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserIndexWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserIndexWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  user: UserWhereInput
}

input UserIndexWhereUniqueInput {
  id: ID
  email: String
  username: String
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  isGamer_ASC
  isGamer_DESC
  isAdmin_ASC
  isAdmin_DESC
  gamerIsSetUp_ASC
  gamerIsSetUp_DESC
  name_ASC
  name_DESC
  aboutMe_ASC
  aboutMe_DESC
  setup_ASC
  setup_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  username: String!
  password: String!
  isGamer: Boolean!
  isAdmin: Boolean!
  gamerIsSetUp: Boolean!
  occupations: [Occupations!]!
  name: String!
  aboutMe: String
  setup: Int
  roles: [Role!]!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  isGamer: Boolean

  """All values that are not equal to given value."""
  isGamer_not: Boolean
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  gamerIsSetUp: Boolean

  """All values that are not equal to given value."""
  gamerIsSetUp_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  aboutMe: String

  """All values that are not equal to given value."""
  aboutMe_not: String

  """All values that are contained in given list."""
  aboutMe_in: [String!]

  """All values that are not contained in given list."""
  aboutMe_not_in: [String!]

  """All values less than the given value."""
  aboutMe_lt: String

  """All values less than or equal the given value."""
  aboutMe_lte: String

  """All values greater than the given value."""
  aboutMe_gt: String

  """All values greater than or equal the given value."""
  aboutMe_gte: String

  """All values containing the given string."""
  aboutMe_contains: String

  """All values not containing the given string."""
  aboutMe_not_contains: String

  """All values starting with the given string."""
  aboutMe_starts_with: String

  """All values not starting with the given string."""
  aboutMe_not_starts_with: String

  """All values ending with the given string."""
  aboutMe_ends_with: String

  """All values not ending with the given string."""
  aboutMe_not_ends_with: String
  setup: Int

  """All values that are not equal to given value."""
  setup_not: Int

  """All values that are contained in given list."""
  setup_in: [Int!]

  """All values that are not contained in given list."""
  setup_not_in: [Int!]

  """All values less than the given value."""
  setup_lt: Int

  """All values less than or equal the given value."""
  setup_lte: Int

  """All values greater than the given value."""
  setup_gt: Int

  """All values greater than or equal the given value."""
  setup_gte: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateManyDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
}

input UserUpdateManyWithoutSessionsInput {
  create: [UserCreateWithoutSessionsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSessionsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSessionsInput!]
}

input UserUpdateManyWithoutTimeSlotsInput {
  create: [UserCreateWithoutTimeSlotsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTimeSlotsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTimeSlotsInput!]
}

input UserUpdateManyWithoutTimeSlotsPlayedInput {
  create: [UserCreateWithoutTimeSlotsPlayedInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTimeSlotsPlayedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTimeSlotsPlayedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateoccupationsInput {
  set: [Occupations!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutGamertagsInput {
  create: UserCreateWithoutGamertagsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutGamertagsDataInput
  upsert: UserUpsertWithoutGamertagsInput
}

input UserUpdateOneRequiredWithoutInvitesInput {
  create: UserCreateWithoutInvitesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutInvitesDataInput
  upsert: UserUpsertWithoutInvitesInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneRequiredWithoutTimeSlotsBookedInput {
  create: UserCreateWithoutTimeSlotsBookedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTimeSlotsBookedDataInput
  upsert: UserUpsertWithoutTimeSlotsBookedInput
}

input UserUpdateOneWithoutInvitesReceivedInput {
  create: UserCreateWithoutInvitesReceivedInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInvitesReceivedDataInput
  upsert: UserUpsertWithoutInvitesReceivedInput
}

input UserUpdaterolesInput {
  set: [Role!]
}

input UserUpdateWithoutGamertagsDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
}

input UserUpdateWithoutInvitesDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateWithoutInvitesReceivedDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateWithoutReviewsDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateWithoutSessionsDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateWithoutTimeSlotsBookedDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateWithoutTimeSlotsDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  timeSlotsPlayed: BookingUpdateManyWithoutPlayersInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateWithoutTimeSlotsPlayedDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  isAdmin: Boolean
  gamerIsSetUp: Boolean
  name: String
  aboutMe: String
  setup: Int
  occupations: UserUpdateoccupationsInput
  roles: UserUpdaterolesInput
  favoriteGames: GameUpdateManyInput
  sessions: GamingSessionUpdateManyWithoutGamersInput
  timeSlots: GamingTimeSlotUpdateManyWithoutGamersInput
  timeSlotsBooked: BookingUpdateManyWithoutBookeeInput
  invites: BookingInviteUpdateManyWithoutFromInput
  invitesReceived: BookingInviteUpdateManyWithoutToInput
  reviews: SessionReviewUpdateManyWithoutUserInput
  friends: UserUpdateManyInput
  gamertags: GamerTagUpdateOneWithoutUserInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutSessionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSessionsDataInput!
}

input UserUpdateWithWhereUniqueWithoutTimeSlotsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTimeSlotsDataInput!
}

input UserUpdateWithWhereUniqueWithoutTimeSlotsPlayedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTimeSlotsPlayedDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutGamertagsInput {
  update: UserUpdateWithoutGamertagsDataInput!
  create: UserCreateWithoutGamertagsInput!
}

input UserUpsertWithoutInvitesInput {
  update: UserUpdateWithoutInvitesDataInput!
  create: UserCreateWithoutInvitesInput!
}

input UserUpsertWithoutInvitesReceivedInput {
  update: UserUpdateWithoutInvitesReceivedDataInput!
  create: UserCreateWithoutInvitesReceivedInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithoutTimeSlotsBookedInput {
  update: UserUpdateWithoutTimeSlotsBookedDataInput!
  create: UserCreateWithoutTimeSlotsBookedInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutSessionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSessionsDataInput!
  create: UserCreateWithoutSessionsInput!
}

input UserUpsertWithWhereUniqueWithoutTimeSlotsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTimeSlotsDataInput!
  create: UserCreateWithoutTimeSlotsInput!
}

input UserUpsertWithWhereUniqueWithoutTimeSlotsPlayedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTimeSlotsPlayedDataInput!
  create: UserCreateWithoutTimeSlotsPlayedInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  isGamer: Boolean

  """All values that are not equal to given value."""
  isGamer_not: Boolean
  isAdmin: Boolean

  """All values that are not equal to given value."""
  isAdmin_not: Boolean
  gamerIsSetUp: Boolean

  """All values that are not equal to given value."""
  gamerIsSetUp_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  aboutMe: String

  """All values that are not equal to given value."""
  aboutMe_not: String

  """All values that are contained in given list."""
  aboutMe_in: [String!]

  """All values that are not contained in given list."""
  aboutMe_not_in: [String!]

  """All values less than the given value."""
  aboutMe_lt: String

  """All values less than or equal the given value."""
  aboutMe_lte: String

  """All values greater than the given value."""
  aboutMe_gt: String

  """All values greater than or equal the given value."""
  aboutMe_gte: String

  """All values containing the given string."""
  aboutMe_contains: String

  """All values not containing the given string."""
  aboutMe_not_contains: String

  """All values starting with the given string."""
  aboutMe_starts_with: String

  """All values not starting with the given string."""
  aboutMe_not_starts_with: String

  """All values ending with the given string."""
  aboutMe_ends_with: String

  """All values not ending with the given string."""
  aboutMe_not_ends_with: String
  setup: Int

  """All values that are not equal to given value."""
  setup_not: Int

  """All values that are contained in given list."""
  setup_in: [Int!]

  """All values that are not contained in given list."""
  setup_not_in: [Int!]

  """All values less than the given value."""
  setup_lt: Int

  """All values less than or equal the given value."""
  setup_lte: Int

  """All values greater than the given value."""
  setup_gt: Int

  """All values greater than or equal the given value."""
  setup_gte: Int
  favoriteGames_every: GameWhereInput
  favoriteGames_some: GameWhereInput
  favoriteGames_none: GameWhereInput
  sessions_every: GamingSessionWhereInput
  sessions_some: GamingSessionWhereInput
  sessions_none: GamingSessionWhereInput
  timeSlots_every: GamingTimeSlotWhereInput
  timeSlots_some: GamingTimeSlotWhereInput
  timeSlots_none: GamingTimeSlotWhereInput
  timeSlotsBooked_every: BookingWhereInput
  timeSlotsBooked_some: BookingWhereInput
  timeSlotsBooked_none: BookingWhereInput
  timeSlotsPlayed_every: BookingWhereInput
  timeSlotsPlayed_some: BookingWhereInput
  timeSlotsPlayed_none: BookingWhereInput
  invites_every: BookingInviteWhereInput
  invites_some: BookingInviteWhereInput
  invites_none: BookingInviteWhereInput
  invitesReceived_every: BookingInviteWhereInput
  invitesReceived_some: BookingInviteWhereInput
  invitesReceived_none: BookingInviteWhereInput
  reviews_every: SessionReviewWhereInput
  reviews_some: SessionReviewWhereInput
  reviews_none: SessionReviewWhereInput
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
  gamertags: GamerTagWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
