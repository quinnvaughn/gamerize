module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateDiscount {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateGameIndex {
  count: Int!
}

type AggregateGamerRequest {
  count: Int!
}

type AggregateGamingSession {
  count: Int!
}

type AggregateGamingSessionIndex {
  count: Int!
}

type AggregateIndividualGamingSession {
  count: Int!
}

type AggregateRequirement {
  count: Int!
}

type AggregateSessionReview {
  count: Int!
}

type AggregateSessionReviewIndex {
  count: Int!
}

type AggregateSocialMedia {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserIndex {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Discount {
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

type DiscountConnection {
  pageInfo: PageInfo!
  edges: [DiscountEdge]!
  aggregate: AggregateDiscount!
}

input DiscountCreateInput {
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

input DiscountCreateManyInput {
  create: [DiscountCreateInput!]
}

type DiscountEdge {
  node: Discount!
  cursor: String!
}

enum DiscountOrderByInput {
  percentage_ASC
  percentage_DESC
  threshold_ASC
  threshold_DESC
  playerOrSession_ASC
  playerOrSession_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DiscountPreviousValues {
  percentage: Int!
  threshold: Int!
  playerOrSession: PlayerOrSession!
}

input DiscountScalarWhereInput {
  percentage: Int
  percentage_not: Int
  percentage_in: [Int!]
  percentage_not_in: [Int!]
  percentage_lt: Int
  percentage_lte: Int
  percentage_gt: Int
  percentage_gte: Int
  threshold: Int
  threshold_not: Int
  threshold_in: [Int!]
  threshold_not_in: [Int!]
  threshold_lt: Int
  threshold_lte: Int
  threshold_gt: Int
  threshold_gte: Int
  playerOrSession: PlayerOrSession
  playerOrSession_not: PlayerOrSession
  playerOrSession_in: [PlayerOrSession!]
  playerOrSession_not_in: [PlayerOrSession!]
  AND: [DiscountScalarWhereInput!]
  OR: [DiscountScalarWhereInput!]
  NOT: [DiscountScalarWhereInput!]
}

type DiscountSubscriptionPayload {
  mutation: MutationType!
  node: Discount
  updatedFields: [String!]
  previousValues: DiscountPreviousValues
}

input DiscountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiscountWhereInput
  AND: [DiscountSubscriptionWhereInput!]
  OR: [DiscountSubscriptionWhereInput!]
  NOT: [DiscountSubscriptionWhereInput!]
}

input DiscountUpdateManyDataInput {
  percentage: Int
  threshold: Int
  playerOrSession: PlayerOrSession
}

input DiscountUpdateManyInput {
  create: [DiscountCreateInput!]
  deleteMany: [DiscountScalarWhereInput!]
  updateMany: [DiscountUpdateManyWithWhereNestedInput!]
}

input DiscountUpdateManyMutationInput {
  percentage: Int
  threshold: Int
  playerOrSession: PlayerOrSession
}

input DiscountUpdateManyWithWhereNestedInput {
  where: DiscountScalarWhereInput!
  data: DiscountUpdateManyDataInput!
}

input DiscountWhereInput {
  percentage: Int
  percentage_not: Int
  percentage_in: [Int!]
  percentage_not_in: [Int!]
  percentage_lt: Int
  percentage_lte: Int
  percentage_gt: Int
  percentage_gte: Int
  threshold: Int
  threshold_not: Int
  threshold_in: [Int!]
  threshold_not_in: [Int!]
  threshold_lt: Int
  threshold_lte: Int
  threshold_gt: Int
  threshold_gte: Int
  playerOrSession: PlayerOrSession
  playerOrSession_not: PlayerOrSession
  playerOrSession_in: [PlayerOrSession!]
  playerOrSession_not_in: [PlayerOrSession!]
  AND: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
}

type Game {
  id: ID!
  name: String!
  tags: [Tags!]!
  sessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession!]
  numSessions: Int!
}

type GameConnection {
  pageInfo: PageInfo!
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  name: String!
  tags: GameCreatetagsInput
  sessions: GamingSessionCreateManyWithoutGameInput
  numSessions: Int
}

input GameCreateOneInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

input GameCreateOneWithoutSessionsInput {
  create: GameCreateWithoutSessionsInput
  connect: GameWhereUniqueInput
}

input GameCreatetagsInput {
  set: [Tags!]
}

input GameCreateWithoutSessionsInput {
  name: String!
  tags: GameCreatetagsInput
  numSessions: Int
}

type GameEdge {
  node: Game!
  cursor: String!
}

type GameIndex {
  id: ID!
  name: String!
  tags: [String!]!
  game: Game!
}

type GameIndexConnection {
  pageInfo: PageInfo!
  edges: [GameIndexEdge]!
  aggregate: AggregateGameIndex!
}

input GameIndexCreateInput {
  name: String!
  tags: GameIndexCreatetagsInput
  game: GameCreateOneInput!
}

input GameIndexCreatetagsInput {
  set: [String!]
}

type GameIndexEdge {
  node: GameIndex!
  cursor: String!
}

enum GameIndexOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GameIndexPreviousValues {
  id: ID!
  name: String!
  tags: [String!]!
}

type GameIndexSubscriptionPayload {
  mutation: MutationType!
  node: GameIndex
  updatedFields: [String!]
  previousValues: GameIndexPreviousValues
}

input GameIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameIndexWhereInput
  AND: [GameIndexSubscriptionWhereInput!]
  OR: [GameIndexSubscriptionWhereInput!]
  NOT: [GameIndexSubscriptionWhereInput!]
}

input GameIndexUpdateInput {
  name: String
  tags: GameIndexUpdatetagsInput
  game: GameUpdateOneRequiredInput
}

input GameIndexUpdateManyMutationInput {
  name: String
  tags: GameIndexUpdatetagsInput
}

input GameIndexUpdatetagsInput {
  set: [String!]
}

input GameIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  game: GameWhereInput
  AND: [GameIndexWhereInput!]
  OR: [GameIndexWhereInput!]
  NOT: [GameIndexWhereInput!]
}

input GameIndexWhereUniqueInput {
  id: ID
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  numSessions_ASC
  numSessions_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GamePreviousValues {
  id: ID!
  name: String!
  tags: [Tags!]!
  numSessions: Int!
}

type GamerRequest {
  id: ID!
  user: User!
  occupations: [Occupations!]!
  addToOccupations: String
  socialMedia: SocialMedia!
}

type GamerRequestConnection {
  pageInfo: PageInfo!
  edges: [GamerRequestEdge]!
  aggregate: AggregateGamerRequest!
}

input GamerRequestCreateInput {
  user: UserCreateOneInput!
  occupations: GamerRequestCreateoccupationsInput
  addToOccupations: String
  socialMedia: SocialMediaCreateOneInput!
}

input GamerRequestCreateoccupationsInput {
  set: [Occupations!]
}

type GamerRequestEdge {
  node: GamerRequest!
  cursor: String!
}

enum GamerRequestOrderByInput {
  id_ASC
  id_DESC
  addToOccupations_ASC
  addToOccupations_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GamerRequestPreviousValues {
  id: ID!
  occupations: [Occupations!]!
  addToOccupations: String
}

type GamerRequestSubscriptionPayload {
  mutation: MutationType!
  node: GamerRequest
  updatedFields: [String!]
  previousValues: GamerRequestPreviousValues
}

input GamerRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamerRequestWhereInput
  AND: [GamerRequestSubscriptionWhereInput!]
  OR: [GamerRequestSubscriptionWhereInput!]
  NOT: [GamerRequestSubscriptionWhereInput!]
}

input GamerRequestUpdateInput {
  user: UserUpdateOneRequiredInput
  occupations: GamerRequestUpdateoccupationsInput
  addToOccupations: String
  socialMedia: SocialMediaUpdateOneRequiredInput
}

input GamerRequestUpdateManyMutationInput {
  occupations: GamerRequestUpdateoccupationsInput
  addToOccupations: String
}

input GamerRequestUpdateoccupationsInput {
  set: [Occupations!]
}

input GamerRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  addToOccupations: String
  addToOccupations_not: String
  addToOccupations_in: [String!]
  addToOccupations_not_in: [String!]
  addToOccupations_lt: String
  addToOccupations_lte: String
  addToOccupations_gt: String
  addToOccupations_gte: String
  addToOccupations_contains: String
  addToOccupations_not_contains: String
  addToOccupations_starts_with: String
  addToOccupations_not_starts_with: String
  addToOccupations_ends_with: String
  addToOccupations_not_ends_with: String
  socialMedia: SocialMediaWhereInput
  AND: [GamerRequestWhereInput!]
  OR: [GamerRequestWhereInput!]
  NOT: [GamerRequestWhereInput!]
}

input GamerRequestWhereUniqueInput {
  id: ID
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GameWhereInput
  AND: [GameSubscriptionWhereInput!]
  OR: [GameSubscriptionWhereInput!]
  NOT: [GameSubscriptionWhereInput!]
}

input GameUpdateDataInput {
  name: String
  tags: GameUpdatetagsInput
  sessions: GamingSessionUpdateManyWithoutGameInput
  numSessions: Int
}

input GameUpdateInput {
  name: String
  tags: GameUpdatetagsInput
  sessions: GamingSessionUpdateManyWithoutGameInput
  numSessions: Int
}

input GameUpdateManyMutationInput {
  name: String
  tags: GameUpdatetagsInput
  numSessions: Int
}

input GameUpdateOneRequiredInput {
  create: GameCreateInput
  update: GameUpdateDataInput
  upsert: GameUpsertNestedInput
  connect: GameWhereUniqueInput
}

input GameUpdateOneRequiredWithoutSessionsInput {
  create: GameCreateWithoutSessionsInput
  update: GameUpdateWithoutSessionsDataInput
  upsert: GameUpsertWithoutSessionsInput
  connect: GameWhereUniqueInput
}

input GameUpdatetagsInput {
  set: [Tags!]
}

input GameUpdateWithoutSessionsDataInput {
  name: String
  tags: GameUpdatetagsInput
  numSessions: Int
}

input GameUpsertNestedInput {
  update: GameUpdateDataInput!
  create: GameCreateInput!
}

input GameUpsertWithoutSessionsInput {
  update: GameUpdateWithoutSessionsDataInput!
  create: GameCreateWithoutSessionsInput!
}

input GameWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  sessions_every: GamingSessionWhereInput
  sessions_some: GamingSessionWhereInput
  sessions_none: GamingSessionWhereInput
  numSessions: Int
  numSessions_not: Int
  numSessions_in: [Int!]
  numSessions_not_in: [Int!]
  numSessions_lt: Int
  numSessions_lte: Int
  numSessions_gt: Int
  numSessions_gte: Int
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
}

input GameWhereUniqueInput {
  id: ID
  name: String
}

type GamingSession {
  id: ID!
  gamers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  game: Game!
  title: String!
  length: Int!
  price: Float!
  reviews(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReview!]
  systems: [System!]!
  type: TypeOfGame!
  slots: Int!
  requirements(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Requirement!]
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount!]
  sessions(where: IndividualGamingSessionWhereInput, orderBy: IndividualGamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IndividualGamingSession!]
}

type GamingSessionConnection {
  pageInfo: PageInfo!
  edges: [GamingSessionEdge]!
  aggregate: AggregateGamingSession!
}

input GamingSessionCreateInput {
  gamers: UserCreateManyWithoutSessionsInput
  game: GameCreateOneWithoutSessionsInput!
  title: String!
  length: Int!
  price: Float!
  reviews: SessionReviewCreateManyWithoutSessionInput
  systems: GamingSessionCreatesystemsInput
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  sessions: IndividualGamingSessionCreateManyWithoutGamingSessionInput
}

input GamingSessionCreateManyWithoutGameInput {
  create: [GamingSessionCreateWithoutGameInput!]
  connect: [GamingSessionWhereUniqueInput!]
}

input GamingSessionCreateManyWithoutGamersInput {
  create: [GamingSessionCreateWithoutGamersInput!]
  connect: [GamingSessionWhereUniqueInput!]
}

input GamingSessionCreateOneInput {
  create: GamingSessionCreateInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreateOneWithoutReviewsInput {
  create: GamingSessionCreateWithoutReviewsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreateOneWithoutSessionsInput {
  create: GamingSessionCreateWithoutSessionsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionCreatesystemsInput {
  set: [System!]
}

input GamingSessionCreateWithoutGameInput {
  gamers: UserCreateManyWithoutSessionsInput
  title: String!
  length: Int!
  price: Float!
  reviews: SessionReviewCreateManyWithoutSessionInput
  systems: GamingSessionCreatesystemsInput
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  sessions: IndividualGamingSessionCreateManyWithoutGamingSessionInput
}

input GamingSessionCreateWithoutGamersInput {
  game: GameCreateOneWithoutSessionsInput!
  title: String!
  length: Int!
  price: Float!
  reviews: SessionReviewCreateManyWithoutSessionInput
  systems: GamingSessionCreatesystemsInput
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  sessions: IndividualGamingSessionCreateManyWithoutGamingSessionInput
}

input GamingSessionCreateWithoutReviewsInput {
  gamers: UserCreateManyWithoutSessionsInput
  game: GameCreateOneWithoutSessionsInput!
  title: String!
  length: Int!
  price: Float!
  systems: GamingSessionCreatesystemsInput
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
  sessions: IndividualGamingSessionCreateManyWithoutGamingSessionInput
}

input GamingSessionCreateWithoutSessionsInput {
  gamers: UserCreateManyWithoutSessionsInput
  game: GameCreateOneWithoutSessionsInput!
  title: String!
  length: Int!
  price: Float!
  reviews: SessionReviewCreateManyWithoutSessionInput
  systems: GamingSessionCreatesystemsInput
  type: TypeOfGame!
  slots: Int!
  requirements: RequirementCreateManyInput
  discounts: DiscountCreateManyInput
}

type GamingSessionEdge {
  node: GamingSession!
  cursor: String!
}

type GamingSessionIndex {
  id: ID!
  title: String!
  gamingSession: GamingSession!
}

type GamingSessionIndexConnection {
  pageInfo: PageInfo!
  edges: [GamingSessionIndexEdge]!
  aggregate: AggregateGamingSessionIndex!
}

input GamingSessionIndexCreateInput {
  title: String!
  gamingSession: GamingSessionCreateOneInput!
}

type GamingSessionIndexEdge {
  node: GamingSessionIndex!
  cursor: String!
}

enum GamingSessionIndexOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GamingSessionIndexPreviousValues {
  id: ID!
  title: String!
}

type GamingSessionIndexSubscriptionPayload {
  mutation: MutationType!
  node: GamingSessionIndex
  updatedFields: [String!]
  previousValues: GamingSessionIndexPreviousValues
}

input GamingSessionIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamingSessionIndexWhereInput
  AND: [GamingSessionIndexSubscriptionWhereInput!]
  OR: [GamingSessionIndexSubscriptionWhereInput!]
  NOT: [GamingSessionIndexSubscriptionWhereInput!]
}

input GamingSessionIndexUpdateInput {
  title: String
  gamingSession: GamingSessionUpdateOneRequiredInput
}

input GamingSessionIndexUpdateManyMutationInput {
  title: String
}

input GamingSessionIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  gamingSession: GamingSessionWhereInput
  AND: [GamingSessionIndexWhereInput!]
  OR: [GamingSessionIndexWhereInput!]
  NOT: [GamingSessionIndexWhereInput!]
}

input GamingSessionIndexWhereUniqueInput {
  id: ID
}

enum GamingSessionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  length_ASC
  length_DESC
  price_ASC
  price_DESC
  type_ASC
  type_DESC
  slots_ASC
  slots_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GamingSessionPreviousValues {
  id: ID!
  title: String!
  length: Int!
  price: Float!
  systems: [System!]!
  type: TypeOfGame!
  slots: Int!
}

input GamingSessionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  type: TypeOfGame
  type_not: TypeOfGame
  type_in: [TypeOfGame!]
  type_not_in: [TypeOfGame!]
  slots: Int
  slots_not: Int
  slots_in: [Int!]
  slots_not_in: [Int!]
  slots_lt: Int
  slots_lte: Int
  slots_gt: Int
  slots_gte: Int
  AND: [GamingSessionScalarWhereInput!]
  OR: [GamingSessionScalarWhereInput!]
  NOT: [GamingSessionScalarWhereInput!]
}

type GamingSessionSubscriptionPayload {
  mutation: MutationType!
  node: GamingSession
  updatedFields: [String!]
  previousValues: GamingSessionPreviousValues
}

input GamingSessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GamingSessionWhereInput
  AND: [GamingSessionSubscriptionWhereInput!]
  OR: [GamingSessionSubscriptionWhereInput!]
  NOT: [GamingSessionSubscriptionWhereInput!]
}

input GamingSessionUpdateDataInput {
  gamers: UserUpdateManyWithoutSessionsInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  reviews: SessionReviewUpdateManyWithoutSessionInput
  systems: GamingSessionUpdatesystemsInput
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  sessions: IndividualGamingSessionUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateInput {
  gamers: UserUpdateManyWithoutSessionsInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  reviews: SessionReviewUpdateManyWithoutSessionInput
  systems: GamingSessionUpdatesystemsInput
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  sessions: IndividualGamingSessionUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateManyDataInput {
  title: String
  length: Int
  price: Float
  systems: GamingSessionUpdatesystemsInput
  type: TypeOfGame
  slots: Int
}

input GamingSessionUpdateManyMutationInput {
  title: String
  length: Int
  price: Float
  systems: GamingSessionUpdatesystemsInput
  type: TypeOfGame
  slots: Int
}

input GamingSessionUpdateManyWithoutGameInput {
  create: [GamingSessionCreateWithoutGameInput!]
  delete: [GamingSessionWhereUniqueInput!]
  connect: [GamingSessionWhereUniqueInput!]
  set: [GamingSessionWhereUniqueInput!]
  disconnect: [GamingSessionWhereUniqueInput!]
  update: [GamingSessionUpdateWithWhereUniqueWithoutGameInput!]
  upsert: [GamingSessionUpsertWithWhereUniqueWithoutGameInput!]
  deleteMany: [GamingSessionScalarWhereInput!]
  updateMany: [GamingSessionUpdateManyWithWhereNestedInput!]
}

input GamingSessionUpdateManyWithoutGamersInput {
  create: [GamingSessionCreateWithoutGamersInput!]
  delete: [GamingSessionWhereUniqueInput!]
  connect: [GamingSessionWhereUniqueInput!]
  set: [GamingSessionWhereUniqueInput!]
  disconnect: [GamingSessionWhereUniqueInput!]
  update: [GamingSessionUpdateWithWhereUniqueWithoutGamersInput!]
  upsert: [GamingSessionUpsertWithWhereUniqueWithoutGamersInput!]
  deleteMany: [GamingSessionScalarWhereInput!]
  updateMany: [GamingSessionUpdateManyWithWhereNestedInput!]
}

input GamingSessionUpdateManyWithWhereNestedInput {
  where: GamingSessionScalarWhereInput!
  data: GamingSessionUpdateManyDataInput!
}

input GamingSessionUpdateOneRequiredInput {
  create: GamingSessionCreateInput
  update: GamingSessionUpdateDataInput
  upsert: GamingSessionUpsertNestedInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionUpdateOneRequiredWithoutReviewsInput {
  create: GamingSessionCreateWithoutReviewsInput
  update: GamingSessionUpdateWithoutReviewsDataInput
  upsert: GamingSessionUpsertWithoutReviewsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionUpdateOneRequiredWithoutSessionsInput {
  create: GamingSessionCreateWithoutSessionsInput
  update: GamingSessionUpdateWithoutSessionsDataInput
  upsert: GamingSessionUpsertWithoutSessionsInput
  connect: GamingSessionWhereUniqueInput
}

input GamingSessionUpdatesystemsInput {
  set: [System!]
}

input GamingSessionUpdateWithoutGameDataInput {
  gamers: UserUpdateManyWithoutSessionsInput
  title: String
  length: Int
  price: Float
  reviews: SessionReviewUpdateManyWithoutSessionInput
  systems: GamingSessionUpdatesystemsInput
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  sessions: IndividualGamingSessionUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateWithoutGamersDataInput {
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  reviews: SessionReviewUpdateManyWithoutSessionInput
  systems: GamingSessionUpdatesystemsInput
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  sessions: IndividualGamingSessionUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateWithoutReviewsDataInput {
  gamers: UserUpdateManyWithoutSessionsInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  systems: GamingSessionUpdatesystemsInput
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
  sessions: IndividualGamingSessionUpdateManyWithoutGamingSessionInput
}

input GamingSessionUpdateWithoutSessionsDataInput {
  gamers: UserUpdateManyWithoutSessionsInput
  game: GameUpdateOneRequiredWithoutSessionsInput
  title: String
  length: Int
  price: Float
  reviews: SessionReviewUpdateManyWithoutSessionInput
  systems: GamingSessionUpdatesystemsInput
  type: TypeOfGame
  slots: Int
  requirements: RequirementUpdateManyInput
  discounts: DiscountUpdateManyInput
}

input GamingSessionUpdateWithWhereUniqueWithoutGameInput {
  where: GamingSessionWhereUniqueInput!
  data: GamingSessionUpdateWithoutGameDataInput!
}

input GamingSessionUpdateWithWhereUniqueWithoutGamersInput {
  where: GamingSessionWhereUniqueInput!
  data: GamingSessionUpdateWithoutGamersDataInput!
}

input GamingSessionUpsertNestedInput {
  update: GamingSessionUpdateDataInput!
  create: GamingSessionCreateInput!
}

input GamingSessionUpsertWithoutReviewsInput {
  update: GamingSessionUpdateWithoutReviewsDataInput!
  create: GamingSessionCreateWithoutReviewsInput!
}

input GamingSessionUpsertWithoutSessionsInput {
  update: GamingSessionUpdateWithoutSessionsDataInput!
  create: GamingSessionCreateWithoutSessionsInput!
}

input GamingSessionUpsertWithWhereUniqueWithoutGameInput {
  where: GamingSessionWhereUniqueInput!
  update: GamingSessionUpdateWithoutGameDataInput!
  create: GamingSessionCreateWithoutGameInput!
}

input GamingSessionUpsertWithWhereUniqueWithoutGamersInput {
  where: GamingSessionWhereUniqueInput!
  update: GamingSessionUpdateWithoutGamersDataInput!
  create: GamingSessionCreateWithoutGamersInput!
}

input GamingSessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gamers_every: UserWhereInput
  gamers_some: UserWhereInput
  gamers_none: UserWhereInput
  game: GameWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  length: Int
  length_not: Int
  length_in: [Int!]
  length_not_in: [Int!]
  length_lt: Int
  length_lte: Int
  length_gt: Int
  length_gte: Int
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  reviews_every: SessionReviewWhereInput
  reviews_some: SessionReviewWhereInput
  reviews_none: SessionReviewWhereInput
  type: TypeOfGame
  type_not: TypeOfGame
  type_in: [TypeOfGame!]
  type_not_in: [TypeOfGame!]
  slots: Int
  slots_not: Int
  slots_in: [Int!]
  slots_not_in: [Int!]
  slots_lt: Int
  slots_lte: Int
  slots_gt: Int
  slots_gte: Int
  requirements_every: RequirementWhereInput
  requirements_some: RequirementWhereInput
  requirements_none: RequirementWhereInput
  discounts_every: DiscountWhereInput
  discounts_some: DiscountWhereInput
  discounts_none: DiscountWhereInput
  sessions_every: IndividualGamingSessionWhereInput
  sessions_some: IndividualGamingSessionWhereInput
  sessions_none: IndividualGamingSessionWhereInput
  AND: [GamingSessionWhereInput!]
  OR: [GamingSessionWhereInput!]
  NOT: [GamingSessionWhereInput!]
}

input GamingSessionWhereUniqueInput {
  id: ID
}

type IndividualGamingSession {
  id: ID!
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSession!
  gamers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  players(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  slots: Int!
}

type IndividualGamingSessionConnection {
  pageInfo: PageInfo!
  edges: [IndividualGamingSessionEdge]!
  aggregate: AggregateIndividualGamingSession!
}

input IndividualGamingSessionCreateInput {
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSessionCreateOneWithoutSessionsInput!
  gamers: UserCreateManyWithoutIndividualSessionsInput
  players: UserCreateManyWithoutSessionsBoughtInput
  slots: Int!
}

input IndividualGamingSessionCreateManyWithoutGamersInput {
  create: [IndividualGamingSessionCreateWithoutGamersInput!]
  connect: [IndividualGamingSessionWhereUniqueInput!]
}

input IndividualGamingSessionCreateManyWithoutGamingSessionInput {
  create: [IndividualGamingSessionCreateWithoutGamingSessionInput!]
  connect: [IndividualGamingSessionWhereUniqueInput!]
}

input IndividualGamingSessionCreateManyWithoutPlayersInput {
  create: [IndividualGamingSessionCreateWithoutPlayersInput!]
  connect: [IndividualGamingSessionWhereUniqueInput!]
}

input IndividualGamingSessionCreateWithoutGamersInput {
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSessionCreateOneWithoutSessionsInput!
  players: UserCreateManyWithoutSessionsBoughtInput
  slots: Int!
}

input IndividualGamingSessionCreateWithoutGamingSessionInput {
  startTime: DateTime!
  endTime: DateTime!
  gamers: UserCreateManyWithoutIndividualSessionsInput
  players: UserCreateManyWithoutSessionsBoughtInput
  slots: Int!
}

input IndividualGamingSessionCreateWithoutPlayersInput {
  startTime: DateTime!
  endTime: DateTime!
  gamingSession: GamingSessionCreateOneWithoutSessionsInput!
  gamers: UserCreateManyWithoutIndividualSessionsInput
  slots: Int!
}

type IndividualGamingSessionEdge {
  node: IndividualGamingSession!
  cursor: String!
}

enum IndividualGamingSessionOrderByInput {
  id_ASC
  id_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  slots_ASC
  slots_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IndividualGamingSessionPreviousValues {
  id: ID!
  startTime: DateTime!
  endTime: DateTime!
  slots: Int!
}

input IndividualGamingSessionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  slots: Int
  slots_not: Int
  slots_in: [Int!]
  slots_not_in: [Int!]
  slots_lt: Int
  slots_lte: Int
  slots_gt: Int
  slots_gte: Int
  AND: [IndividualGamingSessionScalarWhereInput!]
  OR: [IndividualGamingSessionScalarWhereInput!]
  NOT: [IndividualGamingSessionScalarWhereInput!]
}

type IndividualGamingSessionSubscriptionPayload {
  mutation: MutationType!
  node: IndividualGamingSession
  updatedFields: [String!]
  previousValues: IndividualGamingSessionPreviousValues
}

input IndividualGamingSessionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IndividualGamingSessionWhereInput
  AND: [IndividualGamingSessionSubscriptionWhereInput!]
  OR: [IndividualGamingSessionSubscriptionWhereInput!]
  NOT: [IndividualGamingSessionSubscriptionWhereInput!]
}

input IndividualGamingSessionUpdateInput {
  startTime: DateTime
  endTime: DateTime
  gamingSession: GamingSessionUpdateOneRequiredWithoutSessionsInput
  gamers: UserUpdateManyWithoutIndividualSessionsInput
  players: UserUpdateManyWithoutSessionsBoughtInput
  slots: Int
}

input IndividualGamingSessionUpdateManyDataInput {
  startTime: DateTime
  endTime: DateTime
  slots: Int
}

input IndividualGamingSessionUpdateManyMutationInput {
  startTime: DateTime
  endTime: DateTime
  slots: Int
}

input IndividualGamingSessionUpdateManyWithoutGamersInput {
  create: [IndividualGamingSessionCreateWithoutGamersInput!]
  delete: [IndividualGamingSessionWhereUniqueInput!]
  connect: [IndividualGamingSessionWhereUniqueInput!]
  set: [IndividualGamingSessionWhereUniqueInput!]
  disconnect: [IndividualGamingSessionWhereUniqueInput!]
  update: [IndividualGamingSessionUpdateWithWhereUniqueWithoutGamersInput!]
  upsert: [IndividualGamingSessionUpsertWithWhereUniqueWithoutGamersInput!]
  deleteMany: [IndividualGamingSessionScalarWhereInput!]
  updateMany: [IndividualGamingSessionUpdateManyWithWhereNestedInput!]
}

input IndividualGamingSessionUpdateManyWithoutGamingSessionInput {
  create: [IndividualGamingSessionCreateWithoutGamingSessionInput!]
  delete: [IndividualGamingSessionWhereUniqueInput!]
  connect: [IndividualGamingSessionWhereUniqueInput!]
  set: [IndividualGamingSessionWhereUniqueInput!]
  disconnect: [IndividualGamingSessionWhereUniqueInput!]
  update: [IndividualGamingSessionUpdateWithWhereUniqueWithoutGamingSessionInput!]
  upsert: [IndividualGamingSessionUpsertWithWhereUniqueWithoutGamingSessionInput!]
  deleteMany: [IndividualGamingSessionScalarWhereInput!]
  updateMany: [IndividualGamingSessionUpdateManyWithWhereNestedInput!]
}

input IndividualGamingSessionUpdateManyWithoutPlayersInput {
  create: [IndividualGamingSessionCreateWithoutPlayersInput!]
  delete: [IndividualGamingSessionWhereUniqueInput!]
  connect: [IndividualGamingSessionWhereUniqueInput!]
  set: [IndividualGamingSessionWhereUniqueInput!]
  disconnect: [IndividualGamingSessionWhereUniqueInput!]
  update: [IndividualGamingSessionUpdateWithWhereUniqueWithoutPlayersInput!]
  upsert: [IndividualGamingSessionUpsertWithWhereUniqueWithoutPlayersInput!]
  deleteMany: [IndividualGamingSessionScalarWhereInput!]
  updateMany: [IndividualGamingSessionUpdateManyWithWhereNestedInput!]
}

input IndividualGamingSessionUpdateManyWithWhereNestedInput {
  where: IndividualGamingSessionScalarWhereInput!
  data: IndividualGamingSessionUpdateManyDataInput!
}

input IndividualGamingSessionUpdateWithoutGamersDataInput {
  startTime: DateTime
  endTime: DateTime
  gamingSession: GamingSessionUpdateOneRequiredWithoutSessionsInput
  players: UserUpdateManyWithoutSessionsBoughtInput
  slots: Int
}

input IndividualGamingSessionUpdateWithoutGamingSessionDataInput {
  startTime: DateTime
  endTime: DateTime
  gamers: UserUpdateManyWithoutIndividualSessionsInput
  players: UserUpdateManyWithoutSessionsBoughtInput
  slots: Int
}

input IndividualGamingSessionUpdateWithoutPlayersDataInput {
  startTime: DateTime
  endTime: DateTime
  gamingSession: GamingSessionUpdateOneRequiredWithoutSessionsInput
  gamers: UserUpdateManyWithoutIndividualSessionsInput
  slots: Int
}

input IndividualGamingSessionUpdateWithWhereUniqueWithoutGamersInput {
  where: IndividualGamingSessionWhereUniqueInput!
  data: IndividualGamingSessionUpdateWithoutGamersDataInput!
}

input IndividualGamingSessionUpdateWithWhereUniqueWithoutGamingSessionInput {
  where: IndividualGamingSessionWhereUniqueInput!
  data: IndividualGamingSessionUpdateWithoutGamingSessionDataInput!
}

input IndividualGamingSessionUpdateWithWhereUniqueWithoutPlayersInput {
  where: IndividualGamingSessionWhereUniqueInput!
  data: IndividualGamingSessionUpdateWithoutPlayersDataInput!
}

input IndividualGamingSessionUpsertWithWhereUniqueWithoutGamersInput {
  where: IndividualGamingSessionWhereUniqueInput!
  update: IndividualGamingSessionUpdateWithoutGamersDataInput!
  create: IndividualGamingSessionCreateWithoutGamersInput!
}

input IndividualGamingSessionUpsertWithWhereUniqueWithoutGamingSessionInput {
  where: IndividualGamingSessionWhereUniqueInput!
  update: IndividualGamingSessionUpdateWithoutGamingSessionDataInput!
  create: IndividualGamingSessionCreateWithoutGamingSessionInput!
}

input IndividualGamingSessionUpsertWithWhereUniqueWithoutPlayersInput {
  where: IndividualGamingSessionWhereUniqueInput!
  update: IndividualGamingSessionUpdateWithoutPlayersDataInput!
  create: IndividualGamingSessionCreateWithoutPlayersInput!
}

input IndividualGamingSessionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  gamingSession: GamingSessionWhereInput
  gamers_every: UserWhereInput
  gamers_some: UserWhereInput
  gamers_none: UserWhereInput
  players_every: UserWhereInput
  players_some: UserWhereInput
  players_none: UserWhereInput
  slots: Int
  slots_not: Int
  slots_in: [Int!]
  slots_not_in: [Int!]
  slots_lt: Int
  slots_lte: Int
  slots_gt: Int
  slots_gte: Int
  AND: [IndividualGamingSessionWhereInput!]
  OR: [IndividualGamingSessionWhereInput!]
  NOT: [IndividualGamingSessionWhereInput!]
}

input IndividualGamingSessionWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDiscount(data: DiscountCreateInput!): Discount!
  updateManyDiscounts(data: DiscountUpdateManyMutationInput!, where: DiscountWhereInput): BatchPayload!
  deleteManyDiscounts(where: DiscountWhereInput): BatchPayload!
  createGame(data: GameCreateInput!): Game!
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateManyGames(data: GameUpdateManyMutationInput!, where: GameWhereInput): BatchPayload!
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteManyGames(where: GameWhereInput): BatchPayload!
  createGameIndex(data: GameIndexCreateInput!): GameIndex!
  updateGameIndex(data: GameIndexUpdateInput!, where: GameIndexWhereUniqueInput!): GameIndex
  updateManyGameIndexes(data: GameIndexUpdateManyMutationInput!, where: GameIndexWhereInput): BatchPayload!
  upsertGameIndex(where: GameIndexWhereUniqueInput!, create: GameIndexCreateInput!, update: GameIndexUpdateInput!): GameIndex!
  deleteGameIndex(where: GameIndexWhereUniqueInput!): GameIndex
  deleteManyGameIndexes(where: GameIndexWhereInput): BatchPayload!
  createGamerRequest(data: GamerRequestCreateInput!): GamerRequest!
  updateGamerRequest(data: GamerRequestUpdateInput!, where: GamerRequestWhereUniqueInput!): GamerRequest
  updateManyGamerRequests(data: GamerRequestUpdateManyMutationInput!, where: GamerRequestWhereInput): BatchPayload!
  upsertGamerRequest(where: GamerRequestWhereUniqueInput!, create: GamerRequestCreateInput!, update: GamerRequestUpdateInput!): GamerRequest!
  deleteGamerRequest(where: GamerRequestWhereUniqueInput!): GamerRequest
  deleteManyGamerRequests(where: GamerRequestWhereInput): BatchPayload!
  createGamingSession(data: GamingSessionCreateInput!): GamingSession!
  updateGamingSession(data: GamingSessionUpdateInput!, where: GamingSessionWhereUniqueInput!): GamingSession
  updateManyGamingSessions(data: GamingSessionUpdateManyMutationInput!, where: GamingSessionWhereInput): BatchPayload!
  upsertGamingSession(where: GamingSessionWhereUniqueInput!, create: GamingSessionCreateInput!, update: GamingSessionUpdateInput!): GamingSession!
  deleteGamingSession(where: GamingSessionWhereUniqueInput!): GamingSession
  deleteManyGamingSessions(where: GamingSessionWhereInput): BatchPayload!
  createGamingSessionIndex(data: GamingSessionIndexCreateInput!): GamingSessionIndex!
  updateGamingSessionIndex(data: GamingSessionIndexUpdateInput!, where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  updateManyGamingSessionIndexes(data: GamingSessionIndexUpdateManyMutationInput!, where: GamingSessionIndexWhereInput): BatchPayload!
  upsertGamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!, create: GamingSessionIndexCreateInput!, update: GamingSessionIndexUpdateInput!): GamingSessionIndex!
  deleteGamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  deleteManyGamingSessionIndexes(where: GamingSessionIndexWhereInput): BatchPayload!
  createIndividualGamingSession(data: IndividualGamingSessionCreateInput!): IndividualGamingSession!
  updateIndividualGamingSession(data: IndividualGamingSessionUpdateInput!, where: IndividualGamingSessionWhereUniqueInput!): IndividualGamingSession
  updateManyIndividualGamingSessions(data: IndividualGamingSessionUpdateManyMutationInput!, where: IndividualGamingSessionWhereInput): BatchPayload!
  upsertIndividualGamingSession(where: IndividualGamingSessionWhereUniqueInput!, create: IndividualGamingSessionCreateInput!, update: IndividualGamingSessionUpdateInput!): IndividualGamingSession!
  deleteIndividualGamingSession(where: IndividualGamingSessionWhereUniqueInput!): IndividualGamingSession
  deleteManyIndividualGamingSessions(where: IndividualGamingSessionWhereInput): BatchPayload!
  createRequirement(data: RequirementCreateInput!): Requirement!
  updateManyRequirements(data: RequirementUpdateManyMutationInput!, where: RequirementWhereInput): BatchPayload!
  deleteManyRequirements(where: RequirementWhereInput): BatchPayload!
  createSessionReview(data: SessionReviewCreateInput!): SessionReview!
  updateSessionReview(data: SessionReviewUpdateInput!, where: SessionReviewWhereUniqueInput!): SessionReview
  updateManySessionReviews(data: SessionReviewUpdateManyMutationInput!, where: SessionReviewWhereInput): BatchPayload!
  upsertSessionReview(where: SessionReviewWhereUniqueInput!, create: SessionReviewCreateInput!, update: SessionReviewUpdateInput!): SessionReview!
  deleteSessionReview(where: SessionReviewWhereUniqueInput!): SessionReview
  deleteManySessionReviews(where: SessionReviewWhereInput): BatchPayload!
  createSessionReviewIndex(data: SessionReviewIndexCreateInput!): SessionReviewIndex!
  updateSessionReviewIndex(data: SessionReviewIndexUpdateInput!, where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  updateManySessionReviewIndexes(data: SessionReviewIndexUpdateManyMutationInput!, where: SessionReviewIndexWhereInput): BatchPayload!
  upsertSessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!, create: SessionReviewIndexCreateInput!, update: SessionReviewIndexUpdateInput!): SessionReviewIndex!
  deleteSessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  deleteManySessionReviewIndexes(where: SessionReviewIndexWhereInput): BatchPayload!
  createSocialMedia(data: SocialMediaCreateInput!): SocialMedia!
  updateSocialMedia(data: SocialMediaUpdateInput!, where: SocialMediaWhereUniqueInput!): SocialMedia
  updateManySocialMedias(data: SocialMediaUpdateManyMutationInput!, where: SocialMediaWhereInput): BatchPayload!
  upsertSocialMedia(where: SocialMediaWhereUniqueInput!, create: SocialMediaCreateInput!, update: SocialMediaUpdateInput!): SocialMedia!
  deleteSocialMedia(where: SocialMediaWhereUniqueInput!): SocialMedia
  deleteManySocialMedias(where: SocialMediaWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserIndex(data: UserIndexCreateInput!): UserIndex!
  updateUserIndex(data: UserIndexUpdateInput!, where: UserIndexWhereUniqueInput!): UserIndex
  updateManyUserIndexes(data: UserIndexUpdateManyMutationInput!, where: UserIndexWhereInput): BatchPayload!
  upsertUserIndex(where: UserIndexWhereUniqueInput!, create: UserIndexCreateInput!, update: UserIndexUpdateInput!): UserIndex!
  deleteUserIndex(where: UserIndexWhereUniqueInput!): UserIndex
  deleteManyUserIndexes(where: UserIndexWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

enum Occupations {
  CELEBRITY
  INFLUENCER
  ENTERTAINER
  STREAMER
  YOUTUBER
  MEDIA
  SPORTS_PERSONALITY
  INTERNET_PERSONALITY
  ATHLETE
  PROFESIONAL_GAMER
  ACTOR
  COMEDIAN
  ROCK_STAR
  RAPPER
  SINGER
  MUSICIAN
  POLITICIAN
  DJ
  MUSIC_PRODUCER
  ENTREPRENEUR
  ARTIST
  ACTRESS
  MODEL
  ADULT_PERFORMER
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PlayerOrSession {
  PLAYER
  SESSION
}

type Query {
  discounts(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discount]!
  discountsConnection(where: DiscountWhereInput, orderBy: DiscountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscountConnection!
  game(where: GameWhereUniqueInput!): Game
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  gameIndex(where: GameIndexWhereUniqueInput!): GameIndex
  gameIndexes(where: GameIndexWhereInput, orderBy: GameIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GameIndex]!
  gameIndexesConnection(where: GameIndexWhereInput, orderBy: GameIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameIndexConnection!
  gamerRequest(where: GamerRequestWhereUniqueInput!): GamerRequest
  gamerRequests(where: GamerRequestWhereInput, orderBy: GamerRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamerRequest]!
  gamerRequestsConnection(where: GamerRequestWhereInput, orderBy: GamerRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamerRequestConnection!
  gamingSession(where: GamingSessionWhereUniqueInput!): GamingSession
  gamingSessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession]!
  gamingSessionsConnection(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamingSessionConnection!
  gamingSessionIndex(where: GamingSessionIndexWhereUniqueInput!): GamingSessionIndex
  gamingSessionIndexes(where: GamingSessionIndexWhereInput, orderBy: GamingSessionIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSessionIndex]!
  gamingSessionIndexesConnection(where: GamingSessionIndexWhereInput, orderBy: GamingSessionIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GamingSessionIndexConnection!
  individualGamingSession(where: IndividualGamingSessionWhereUniqueInput!): IndividualGamingSession
  individualGamingSessions(where: IndividualGamingSessionWhereInput, orderBy: IndividualGamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IndividualGamingSession]!
  individualGamingSessionsConnection(where: IndividualGamingSessionWhereInput, orderBy: IndividualGamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IndividualGamingSessionConnection!
  requirements(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Requirement]!
  requirementsConnection(where: RequirementWhereInput, orderBy: RequirementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequirementConnection!
  sessionReview(where: SessionReviewWhereUniqueInput!): SessionReview
  sessionReviews(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReview]!
  sessionReviewsConnection(where: SessionReviewWhereInput, orderBy: SessionReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionReviewConnection!
  sessionReviewIndex(where: SessionReviewIndexWhereUniqueInput!): SessionReviewIndex
  sessionReviewIndexes(where: SessionReviewIndexWhereInput, orderBy: SessionReviewIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SessionReviewIndex]!
  sessionReviewIndexesConnection(where: SessionReviewIndexWhereInput, orderBy: SessionReviewIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionReviewIndexConnection!
  socialMedia(where: SocialMediaWhereUniqueInput!): SocialMedia
  socialMedias(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SocialMedia]!
  socialMediasConnection(where: SocialMediaWhereInput, orderBy: SocialMediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SocialMediaConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userIndex(where: UserIndexWhereUniqueInput!): UserIndex
  userIndexes(where: UserIndexWhereInput, orderBy: UserIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserIndex]!
  userIndexesConnection(where: UserIndexWhereInput, orderBy: UserIndexOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserIndexConnection!
  node(id: ID!): Node
}

type Requirement {
  msg: String!
}

type RequirementConnection {
  pageInfo: PageInfo!
  edges: [RequirementEdge]!
  aggregate: AggregateRequirement!
}

input RequirementCreateInput {
  msg: String!
}

input RequirementCreateManyInput {
  create: [RequirementCreateInput!]
}

type RequirementEdge {
  node: Requirement!
  cursor: String!
}

enum RequirementOrderByInput {
  msg_ASC
  msg_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RequirementPreviousValues {
  msg: String!
}

input RequirementScalarWhereInput {
  msg: String
  msg_not: String
  msg_in: [String!]
  msg_not_in: [String!]
  msg_lt: String
  msg_lte: String
  msg_gt: String
  msg_gte: String
  msg_contains: String
  msg_not_contains: String
  msg_starts_with: String
  msg_not_starts_with: String
  msg_ends_with: String
  msg_not_ends_with: String
  AND: [RequirementScalarWhereInput!]
  OR: [RequirementScalarWhereInput!]
  NOT: [RequirementScalarWhereInput!]
}

type RequirementSubscriptionPayload {
  mutation: MutationType!
  node: Requirement
  updatedFields: [String!]
  previousValues: RequirementPreviousValues
}

input RequirementSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RequirementWhereInput
  AND: [RequirementSubscriptionWhereInput!]
  OR: [RequirementSubscriptionWhereInput!]
  NOT: [RequirementSubscriptionWhereInput!]
}

input RequirementUpdateManyDataInput {
  msg: String
}

input RequirementUpdateManyInput {
  create: [RequirementCreateInput!]
  deleteMany: [RequirementScalarWhereInput!]
  updateMany: [RequirementUpdateManyWithWhereNestedInput!]
}

input RequirementUpdateManyMutationInput {
  msg: String
}

input RequirementUpdateManyWithWhereNestedInput {
  where: RequirementScalarWhereInput!
  data: RequirementUpdateManyDataInput!
}

input RequirementWhereInput {
  msg: String
  msg_not: String
  msg_in: [String!]
  msg_not_in: [String!]
  msg_lt: String
  msg_lte: String
  msg_gt: String
  msg_gte: String
  msg_contains: String
  msg_not_contains: String
  msg_starts_with: String
  msg_not_starts_with: String
  msg_ends_with: String
  msg_not_ends_with: String
  AND: [RequirementWhereInput!]
  OR: [RequirementWhereInput!]
  NOT: [RequirementWhereInput!]
}

type SessionReview {
  id: ID!
  createdAt: DateTime!
  user: User!
  session: GamingSession!
  text: String!
}

type SessionReviewConnection {
  pageInfo: PageInfo!
  edges: [SessionReviewEdge]!
  aggregate: AggregateSessionReview!
}

input SessionReviewCreateInput {
  user: UserCreateOneInput!
  session: GamingSessionCreateOneWithoutReviewsInput!
  text: String!
}

input SessionReviewCreateManyWithoutSessionInput {
  create: [SessionReviewCreateWithoutSessionInput!]
  connect: [SessionReviewWhereUniqueInput!]
}

input SessionReviewCreateOneInput {
  create: SessionReviewCreateInput
  connect: SessionReviewWhereUniqueInput
}

input SessionReviewCreateWithoutSessionInput {
  user: UserCreateOneInput!
  text: String!
}

type SessionReviewEdge {
  node: SessionReview!
  cursor: String!
}

type SessionReviewIndex {
  id: ID!
  text: String!
  sessionReview: SessionReview!
}

type SessionReviewIndexConnection {
  pageInfo: PageInfo!
  edges: [SessionReviewIndexEdge]!
  aggregate: AggregateSessionReviewIndex!
}

input SessionReviewIndexCreateInput {
  text: String!
  sessionReview: SessionReviewCreateOneInput!
}

type SessionReviewIndexEdge {
  node: SessionReviewIndex!
  cursor: String!
}

enum SessionReviewIndexOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionReviewIndexPreviousValues {
  id: ID!
  text: String!
}

type SessionReviewIndexSubscriptionPayload {
  mutation: MutationType!
  node: SessionReviewIndex
  updatedFields: [String!]
  previousValues: SessionReviewIndexPreviousValues
}

input SessionReviewIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionReviewIndexWhereInput
  AND: [SessionReviewIndexSubscriptionWhereInput!]
  OR: [SessionReviewIndexSubscriptionWhereInput!]
  NOT: [SessionReviewIndexSubscriptionWhereInput!]
}

input SessionReviewIndexUpdateInput {
  text: String
  sessionReview: SessionReviewUpdateOneRequiredInput
}

input SessionReviewIndexUpdateManyMutationInput {
  text: String
}

input SessionReviewIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  sessionReview: SessionReviewWhereInput
  AND: [SessionReviewIndexWhereInput!]
  OR: [SessionReviewIndexWhereInput!]
  NOT: [SessionReviewIndexWhereInput!]
}

input SessionReviewIndexWhereUniqueInput {
  id: ID
}

enum SessionReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
}

input SessionReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [SessionReviewScalarWhereInput!]
  OR: [SessionReviewScalarWhereInput!]
  NOT: [SessionReviewScalarWhereInput!]
}

type SessionReviewSubscriptionPayload {
  mutation: MutationType!
  node: SessionReview
  updatedFields: [String!]
  previousValues: SessionReviewPreviousValues
}

input SessionReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SessionReviewWhereInput
  AND: [SessionReviewSubscriptionWhereInput!]
  OR: [SessionReviewSubscriptionWhereInput!]
  NOT: [SessionReviewSubscriptionWhereInput!]
}

input SessionReviewUpdateDataInput {
  user: UserUpdateOneRequiredInput
  session: GamingSessionUpdateOneRequiredWithoutReviewsInput
  text: String
}

input SessionReviewUpdateInput {
  user: UserUpdateOneRequiredInput
  session: GamingSessionUpdateOneRequiredWithoutReviewsInput
  text: String
}

input SessionReviewUpdateManyDataInput {
  text: String
}

input SessionReviewUpdateManyMutationInput {
  text: String
}

input SessionReviewUpdateManyWithoutSessionInput {
  create: [SessionReviewCreateWithoutSessionInput!]
  delete: [SessionReviewWhereUniqueInput!]
  connect: [SessionReviewWhereUniqueInput!]
  set: [SessionReviewWhereUniqueInput!]
  disconnect: [SessionReviewWhereUniqueInput!]
  update: [SessionReviewUpdateWithWhereUniqueWithoutSessionInput!]
  upsert: [SessionReviewUpsertWithWhereUniqueWithoutSessionInput!]
  deleteMany: [SessionReviewScalarWhereInput!]
  updateMany: [SessionReviewUpdateManyWithWhereNestedInput!]
}

input SessionReviewUpdateManyWithWhereNestedInput {
  where: SessionReviewScalarWhereInput!
  data: SessionReviewUpdateManyDataInput!
}

input SessionReviewUpdateOneRequiredInput {
  create: SessionReviewCreateInput
  update: SessionReviewUpdateDataInput
  upsert: SessionReviewUpsertNestedInput
  connect: SessionReviewWhereUniqueInput
}

input SessionReviewUpdateWithoutSessionDataInput {
  user: UserUpdateOneRequiredInput
  text: String
}

input SessionReviewUpdateWithWhereUniqueWithoutSessionInput {
  where: SessionReviewWhereUniqueInput!
  data: SessionReviewUpdateWithoutSessionDataInput!
}

input SessionReviewUpsertNestedInput {
  update: SessionReviewUpdateDataInput!
  create: SessionReviewCreateInput!
}

input SessionReviewUpsertWithWhereUniqueWithoutSessionInput {
  where: SessionReviewWhereUniqueInput!
  update: SessionReviewUpdateWithoutSessionDataInput!
  create: SessionReviewCreateWithoutSessionInput!
}

input SessionReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  user: UserWhereInput
  session: GamingSessionWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [SessionReviewWhereInput!]
  OR: [SessionReviewWhereInput!]
  NOT: [SessionReviewWhereInput!]
}

input SessionReviewWhereUniqueInput {
  id: ID
}

type SocialMedia {
  id: ID!
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

type SocialMediaConnection {
  pageInfo: PageInfo!
  edges: [SocialMediaEdge]!
  aggregate: AggregateSocialMedia!
}

input SocialMediaCreateInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaCreateOneInput {
  create: SocialMediaCreateInput
  connect: SocialMediaWhereUniqueInput
}

type SocialMediaEdge {
  node: SocialMedia!
  cursor: String!
}

enum SocialMediaOrderByInput {
  id_ASC
  id_DESC
  twitter_ASC
  twitter_DESC
  facebook_ASC
  facebook_DESC
  youtube_ASC
  youtube_DESC
  instagram_ASC
  instagram_DESC
  twitch_ASC
  twitch_DESC
  snapchat_ASC
  snapchat_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SocialMediaPreviousValues {
  id: ID!
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

type SocialMediaSubscriptionPayload {
  mutation: MutationType!
  node: SocialMedia
  updatedFields: [String!]
  previousValues: SocialMediaPreviousValues
}

input SocialMediaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SocialMediaWhereInput
  AND: [SocialMediaSubscriptionWhereInput!]
  OR: [SocialMediaSubscriptionWhereInput!]
  NOT: [SocialMediaSubscriptionWhereInput!]
}

input SocialMediaUpdateDataInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateManyMutationInput {
  twitter: String
  facebook: String
  youtube: String
  instagram: String
  twitch: String
  snapchat: String
}

input SocialMediaUpdateOneRequiredInput {
  create: SocialMediaCreateInput
  update: SocialMediaUpdateDataInput
  upsert: SocialMediaUpsertNestedInput
  connect: SocialMediaWhereUniqueInput
}

input SocialMediaUpsertNestedInput {
  update: SocialMediaUpdateDataInput!
  create: SocialMediaCreateInput!
}

input SocialMediaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  twitter: String
  twitter_not: String
  twitter_in: [String!]
  twitter_not_in: [String!]
  twitter_lt: String
  twitter_lte: String
  twitter_gt: String
  twitter_gte: String
  twitter_contains: String
  twitter_not_contains: String
  twitter_starts_with: String
  twitter_not_starts_with: String
  twitter_ends_with: String
  twitter_not_ends_with: String
  facebook: String
  facebook_not: String
  facebook_in: [String!]
  facebook_not_in: [String!]
  facebook_lt: String
  facebook_lte: String
  facebook_gt: String
  facebook_gte: String
  facebook_contains: String
  facebook_not_contains: String
  facebook_starts_with: String
  facebook_not_starts_with: String
  facebook_ends_with: String
  facebook_not_ends_with: String
  youtube: String
  youtube_not: String
  youtube_in: [String!]
  youtube_not_in: [String!]
  youtube_lt: String
  youtube_lte: String
  youtube_gt: String
  youtube_gte: String
  youtube_contains: String
  youtube_not_contains: String
  youtube_starts_with: String
  youtube_not_starts_with: String
  youtube_ends_with: String
  youtube_not_ends_with: String
  instagram: String
  instagram_not: String
  instagram_in: [String!]
  instagram_not_in: [String!]
  instagram_lt: String
  instagram_lte: String
  instagram_gt: String
  instagram_gte: String
  instagram_contains: String
  instagram_not_contains: String
  instagram_starts_with: String
  instagram_not_starts_with: String
  instagram_ends_with: String
  instagram_not_ends_with: String
  twitch: String
  twitch_not: String
  twitch_in: [String!]
  twitch_not_in: [String!]
  twitch_lt: String
  twitch_lte: String
  twitch_gt: String
  twitch_gte: String
  twitch_contains: String
  twitch_not_contains: String
  twitch_starts_with: String
  twitch_not_starts_with: String
  twitch_ends_with: String
  twitch_not_ends_with: String
  snapchat: String
  snapchat_not: String
  snapchat_in: [String!]
  snapchat_not_in: [String!]
  snapchat_lt: String
  snapchat_lte: String
  snapchat_gt: String
  snapchat_gte: String
  snapchat_contains: String
  snapchat_not_contains: String
  snapchat_starts_with: String
  snapchat_not_starts_with: String
  snapchat_ends_with: String
  snapchat_not_ends_with: String
  AND: [SocialMediaWhereInput!]
  OR: [SocialMediaWhereInput!]
  NOT: [SocialMediaWhereInput!]
}

input SocialMediaWhereUniqueInput {
  id: ID
}

type Subscription {
  discount(where: DiscountSubscriptionWhereInput): DiscountSubscriptionPayload
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  gameIndex(where: GameIndexSubscriptionWhereInput): GameIndexSubscriptionPayload
  gamerRequest(where: GamerRequestSubscriptionWhereInput): GamerRequestSubscriptionPayload
  gamingSession(where: GamingSessionSubscriptionWhereInput): GamingSessionSubscriptionPayload
  gamingSessionIndex(where: GamingSessionIndexSubscriptionWhereInput): GamingSessionIndexSubscriptionPayload
  individualGamingSession(where: IndividualGamingSessionSubscriptionWhereInput): IndividualGamingSessionSubscriptionPayload
  requirement(where: RequirementSubscriptionWhereInput): RequirementSubscriptionPayload
  sessionReview(where: SessionReviewSubscriptionWhereInput): SessionReviewSubscriptionPayload
  sessionReviewIndex(where: SessionReviewIndexSubscriptionWhereInput): SessionReviewIndexSubscriptionPayload
  socialMedia(where: SocialMediaSubscriptionWhereInput): SocialMediaSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userIndex(where: UserIndexSubscriptionWhereInput): UserIndexSubscriptionPayload
}

enum System {
  XBOX_ONE
  NINTENDO_SWITCH
  PC
  PS4
}

enum Tags {
  ACTION
  ADVENTURE_GAME
  CARD_AND_BOARD_GAME
  COMPILATION
  DRIVING_SLASH_RACING_GAME
  EDUCATIONAL_GAME
  FIGHTING
  FLIGHT_SIMULATOR
  FPS
  GAMBLING_GAME
  HIDDEN_OBJECTS
  HORROR
  INDIE_GAME
  METROIDVANIA
  MMORPG
  MOBA
  OPEN_WORLD
  PINBALL
  PLATFORMER
  POINT_AND_CLICK
  PUZZLE
  RHYTHM_AND_MUSIC_GAME
  ROGUELIKE
  RPG
  RTS
  SERIES_COLON_SOULS
  SHOOT_HYPHEN_EM_UP
  SHOOTER
  SIMULATION
  SPORTS_GAME
  STEALTH
  STRATEGY
  SURVIVAL
  VISUAL_NOVEL
}

enum TypeOfGame {
  CUSTOM
  MATCHMAKING
}

type User {
  id: ID!
  email: String!
  username: String!
  password: String!
  isGamer: Boolean!
  occupations: [Occupations!]!
  name: String!
  aboutMe: String
  sessions(where: GamingSessionWhereInput, orderBy: GamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GamingSession!]
  individualSessions(where: IndividualGamingSessionWhereInput, orderBy: IndividualGamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IndividualGamingSession!]
  sessionsBought(where: IndividualGamingSessionWhereInput, orderBy: IndividualGamingSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IndividualGamingSession!]
  buffer: Int
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  individualSessions: IndividualGamingSessionCreateManyWithoutGamersInput
  sessionsBought: IndividualGamingSessionCreateManyWithoutPlayersInput
  buffer: Int
}

input UserCreateManyWithoutIndividualSessionsInput {
  create: [UserCreateWithoutIndividualSessionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSessionsBoughtInput {
  create: [UserCreateWithoutSessionsBoughtInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSessionsInput {
  create: [UserCreateWithoutSessionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateoccupationsInput {
  set: [Occupations!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutIndividualSessionsInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  sessionsBought: IndividualGamingSessionCreateManyWithoutPlayersInput
  buffer: Int
}

input UserCreateWithoutSessionsBoughtInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  sessions: GamingSessionCreateManyWithoutGamersInput
  individualSessions: IndividualGamingSessionCreateManyWithoutGamersInput
  buffer: Int
}

input UserCreateWithoutSessionsInput {
  email: String!
  username: String!
  password: String!
  isGamer: Boolean
  occupations: UserCreateoccupationsInput
  name: String!
  aboutMe: String
  individualSessions: IndividualGamingSessionCreateManyWithoutGamersInput
  sessionsBought: IndividualGamingSessionCreateManyWithoutPlayersInput
  buffer: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserIndex {
  id: ID!
  email: String!
  username: String!
  name: String!
  user: User!
}

type UserIndexConnection {
  pageInfo: PageInfo!
  edges: [UserIndexEdge]!
  aggregate: AggregateUserIndex!
}

input UserIndexCreateInput {
  email: String!
  username: String!
  name: String!
  user: UserCreateOneInput!
}

type UserIndexEdge {
  node: UserIndex!
  cursor: String!
}

enum UserIndexOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserIndexPreviousValues {
  id: ID!
  email: String!
  username: String!
  name: String!
}

type UserIndexSubscriptionPayload {
  mutation: MutationType!
  node: UserIndex
  updatedFields: [String!]
  previousValues: UserIndexPreviousValues
}

input UserIndexSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserIndexWhereInput
  AND: [UserIndexSubscriptionWhereInput!]
  OR: [UserIndexSubscriptionWhereInput!]
  NOT: [UserIndexSubscriptionWhereInput!]
}

input UserIndexUpdateInput {
  email: String
  username: String
  name: String
  user: UserUpdateOneRequiredInput
}

input UserIndexUpdateManyMutationInput {
  email: String
  username: String
  name: String
}

input UserIndexWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  user: UserWhereInput
  AND: [UserIndexWhereInput!]
  OR: [UserIndexWhereInput!]
  NOT: [UserIndexWhereInput!]
}

input UserIndexWhereUniqueInput {
  id: ID
  email: String
  username: String
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  isGamer_ASC
  isGamer_DESC
  name_ASC
  name_DESC
  aboutMe_ASC
  aboutMe_DESC
  buffer_ASC
  buffer_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  username: String!
  password: String!
  isGamer: Boolean!
  occupations: [Occupations!]!
  name: String!
  aboutMe: String
  buffer: Int
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  isGamer: Boolean
  isGamer_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  aboutMe: String
  aboutMe_not: String
  aboutMe_in: [String!]
  aboutMe_not_in: [String!]
  aboutMe_lt: String
  aboutMe_lte: String
  aboutMe_gt: String
  aboutMe_gte: String
  aboutMe_contains: String
  aboutMe_not_contains: String
  aboutMe_starts_with: String
  aboutMe_not_starts_with: String
  aboutMe_ends_with: String
  aboutMe_not_ends_with: String
  buffer: Int
  buffer_not: Int
  buffer_in: [Int!]
  buffer_not_in: [Int!]
  buffer_lt: Int
  buffer_lte: Int
  buffer_gt: Int
  buffer_gte: Int
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  individualSessions: IndividualGamingSessionUpdateManyWithoutGamersInput
  sessionsBought: IndividualGamingSessionUpdateManyWithoutPlayersInput
  buffer: Int
}

input UserUpdateInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  individualSessions: IndividualGamingSessionUpdateManyWithoutGamersInput
  sessionsBought: IndividualGamingSessionUpdateManyWithoutPlayersInput
  buffer: Int
}

input UserUpdateManyDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  buffer: Int
}

input UserUpdateManyMutationInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  buffer: Int
}

input UserUpdateManyWithoutIndividualSessionsInput {
  create: [UserCreateWithoutIndividualSessionsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutIndividualSessionsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutIndividualSessionsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutSessionsBoughtInput {
  create: [UserCreateWithoutSessionsBoughtInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSessionsBoughtInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSessionsBoughtInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutSessionsInput {
  create: [UserCreateWithoutSessionsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSessionsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSessionsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateoccupationsInput {
  set: [Occupations!]
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutIndividualSessionsDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  sessionsBought: IndividualGamingSessionUpdateManyWithoutPlayersInput
  buffer: Int
}

input UserUpdateWithoutSessionsBoughtDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  sessions: GamingSessionUpdateManyWithoutGamersInput
  individualSessions: IndividualGamingSessionUpdateManyWithoutGamersInput
  buffer: Int
}

input UserUpdateWithoutSessionsDataInput {
  email: String
  username: String
  password: String
  isGamer: Boolean
  occupations: UserUpdateoccupationsInput
  name: String
  aboutMe: String
  individualSessions: IndividualGamingSessionUpdateManyWithoutGamersInput
  sessionsBought: IndividualGamingSessionUpdateManyWithoutPlayersInput
  buffer: Int
}

input UserUpdateWithWhereUniqueWithoutIndividualSessionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutIndividualSessionsDataInput!
}

input UserUpdateWithWhereUniqueWithoutSessionsBoughtInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSessionsBoughtDataInput!
}

input UserUpdateWithWhereUniqueWithoutSessionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSessionsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutIndividualSessionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutIndividualSessionsDataInput!
  create: UserCreateWithoutIndividualSessionsInput!
}

input UserUpsertWithWhereUniqueWithoutSessionsBoughtInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSessionsBoughtDataInput!
  create: UserCreateWithoutSessionsBoughtInput!
}

input UserUpsertWithWhereUniqueWithoutSessionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSessionsDataInput!
  create: UserCreateWithoutSessionsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  isGamer: Boolean
  isGamer_not: Boolean
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  aboutMe: String
  aboutMe_not: String
  aboutMe_in: [String!]
  aboutMe_not_in: [String!]
  aboutMe_lt: String
  aboutMe_lte: String
  aboutMe_gt: String
  aboutMe_gte: String
  aboutMe_contains: String
  aboutMe_not_contains: String
  aboutMe_starts_with: String
  aboutMe_not_starts_with: String
  aboutMe_ends_with: String
  aboutMe_not_ends_with: String
  sessions_every: GamingSessionWhereInput
  sessions_some: GamingSessionWhereInput
  sessions_none: GamingSessionWhereInput
  individualSessions_every: IndividualGamingSessionWhereInput
  individualSessions_some: IndividualGamingSessionWhereInput
  individualSessions_none: IndividualGamingSessionWhereInput
  sessionsBought_every: IndividualGamingSessionWhereInput
  sessionsBought_some: IndividualGamingSessionWhereInput
  sessionsBought_none: IndividualGamingSessionWhereInput
  buffer: Int
  buffer_not: Int
  buffer_in: [Int!]
  buffer_not_in: [Int!]
  buffer_lt: Int
  buffer_lte: Int
  buffer_gt: Int
  buffer_gte: Int
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
`
      }
    